[{"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\index.js":"1","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\App.js":"2","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\RegisterPatient.js":"3","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\BiometricRecapture.js":"4","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\ViewPatient.js":"5","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PatientDashboard.js":"6","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\biometrics\\index.js":"7","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\index.js":"8","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\ClientDashboard\\index.js":"9","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\api.js":"10","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Biometrics.js":"11","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PreviousRecapture.js":"12","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Pims.js":"13","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PatientBiometrics.js":"14","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Home\\Biometrics.js":"15","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Home\\PatientList.js":"16","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Home\\CheckedInPatients.js":"17","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PatientCard.js":"18","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\BaselineWarning.js":"19","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Recapture.js":"20","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PatientRecapture.js":"21","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\RecallPatient.js":"22","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\MigrationDQA\\index.js":"23","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\ClientDashboard\\CheckIn\\index.js":"24","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\SplitActionButton.js":"25","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PersonDemographics\\index.js":"26","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\CaptureBiometric.js":"27","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Home\\NoRecapture.js":"28","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Home\\BiometricsList.js":"29","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Home\\NotCaptured.js":"30","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\MigrationDQA\\DuplicateHospitalNumbers.js":"31","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PatientsCard.js":"32","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\ReCaptureBiometric.js":"33"},{"size":477,"mtime":1728569318259,"results":"34","hashOfConfig":"35"},{"size":2455,"mtime":1728569318206,"results":"36","hashOfConfig":"35"},{"size":74922,"mtime":1729504599207,"results":"37","hashOfConfig":"35"},{"size":29330,"mtime":1728569319443,"results":"38","hashOfConfig":"35"},{"size":78966,"mtime":1729504644938,"results":"39","hashOfConfig":"35"},{"size":32554,"mtime":1728569319516,"results":"40","hashOfConfig":"35"},{"size":7363,"mtime":1728569319847,"results":"41","hashOfConfig":"35"},{"size":6410,"mtime":1728569319670,"results":"42","hashOfConfig":"35"},{"size":8692,"mtime":1728569319699,"results":"43","hashOfConfig":"35"},{"size":478,"mtime":1728570801841,"results":"44","hashOfConfig":"35"},{"size":54149,"mtime":1728569319456,"results":"45","hashOfConfig":"35"},{"size":11356,"mtime":1728569319574,"results":"46","hashOfConfig":"35"},{"size":14477,"mtime":1728569319563,"results":"47","hashOfConfig":"35"},{"size":16310,"mtime":1728569319492,"results":"48","hashOfConfig":"35"},{"size":12751,"mtime":1728569319732,"results":"49","hashOfConfig":"35"},{"size":14947,"mtime":1728569319788,"results":"50","hashOfConfig":"35"},{"size":12775,"mtime":1728569319754,"results":"51","hashOfConfig":"35"},{"size":10205,"mtime":1728569319504,"results":"52","hashOfConfig":"35"},{"size":870,"mtime":1728569319429,"results":"53","hashOfConfig":"35"},{"size":30499,"mtime":1728569319613,"results":"54","hashOfConfig":"35"},{"size":9626,"mtime":1728569319528,"results":"55","hashOfConfig":"35"},{"size":22628,"mtime":1728569319601,"results":"56","hashOfConfig":"35"},{"size":2464,"mtime":1728569319815,"results":"57","hashOfConfig":"35"},{"size":23191,"mtime":1728569319715,"results":"58","hashOfConfig":"35"},{"size":4751,"mtime":1728569319636,"results":"59","hashOfConfig":"35"},{"size":10900,"mtime":1728569319831,"results":"60","hashOfConfig":"35"},{"size":17374,"mtime":1728569319468,"results":"61","hashOfConfig":"35"},{"size":10030,"mtime":1728569319766,"results":"62","hashOfConfig":"35"},{"size":9919,"mtime":1728569319743,"results":"63","hashOfConfig":"35"},{"size":10013,"mtime":1728569319777,"results":"64","hashOfConfig":"35"},{"size":14190,"mtime":1728569319804,"results":"65","hashOfConfig":"35"},{"size":8460,"mtime":1728569319551,"results":"66","hashOfConfig":"35"},{"size":33501,"mtime":1728569319588,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xtw4wd",{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":49,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\index.js",[],"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\App.js",["164","165","166","167","168"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { MemoryRouter as Router, Switch, Route } from \"react-router-dom\";\nimport RegisterPatient from \"./main/webapp/components/RegisterPatient\";\nimport ViewPatient from \"./main/webapp/components/ViewPatient\";\nimport PatientDashboard from \"./main/webapp/components/PatientDashboard\";\nimport Dashboard from \"./main/webapp/components/ClientDashboard\";\nimport ClientDashboard from \"./main/webapp/components/ClientDashboard\";\nimport BiometricsDashboard from \"./main/webapp/components/biometrics/\";\nimport BiometricRecapture from \"./main/webapp/components/BiometricRecapture\";\n/*import PatientVitals from './main/webapp/components/PatientVitals';\nimport AddPatientVitals from './main/webapp/components/Add-Patient-Vitals';*/\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./main/webapp/css/style.css\";\nimport DualListBox from \"react-dual-listbox\";\nimport \"react-dual-listbox/lib/react-dual-listbox.css\";\nimport Components from \"./main/webapp/components\";\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ToastContainer />\n        {/*          <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL.*/}\n        <Switch>\n          <Route path=\"/biometrics-recapture\">\n            <BiometricRecapture />\n          </Route>\n          <Route path=\"/patient-biometrics\">\n            <BiometricsDashboard />\n          </Route>\n          <Route path=\"/register-patient\">\n            <RegisterPatientPage />\n          </Route>\n          <Route path=\"/view-patient\">\n            <ViewPatient />\n          </Route>\n          <Route path=\"/patient-dashboard\">\n            <PatientDashboardPage />\n          </Route>\n          <Route path=\"/patient-vitals\">\n            <Dashboard />\n            {/*<PatientVitalsPage />*/}\n          </Route>\n          <Route path=\"/add-patient-vital\">\n            <Dashboard />\n            {/*<AddPatientVitalsPage />*/}\n          </Route>\n          <Route path=\"/\">\n            <Components />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction PatientDashboardPage() {\n  return <ClientDashboard />;\n}\nfunction RegisterPatientPage() {\n  return <RegisterPatient />;\n}\n\n/*\nfunction PatientVitalsPage() {\n  return <PatientVitals />\n}\nfunction AddPatientVitalsPage() {\n  return <AddPatientVitals />\n}\n*/\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\RegisterPatient.js",["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport MatButton from \"@material-ui/core/Button\";\nimport Button from \"@material-ui/core/Button\";\nimport { FormGroup, Label, Spinner, Input, Form } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faCheckSquare,\n  faCoffee,\n  faEdit,\n  faTrash,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport { TiArrowBack } from \"react-icons/ti\";\nimport { token, url as baseUrl } from \"../../../api\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"./patient.css\";\nimport { Modal } from \"react-bootstrap\";\nimport { Label as LabelSui } from \"semantic-ui-react\";\nimport { Icon } from \"semantic-ui-react\";\n\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    flexGrow: 1,\n    //maxWidth: 752,\n    //flexGrow: 1,\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst RegisterPatient = (props) => {\n  const [basicInfo, setBasicInfo] = useState({\n    active: true,\n    streetAddress: \"\",\n    address: [],\n    contact: [],\n    contactPoint: [],\n    dateOfBirth: \"\",\n    deceased: false,\n    deceasedDateTime: null,\n    firstName: \"\",\n    genderId: \"\",\n    identifier: \"\",\n    otherName: \"\",\n    maritalStatusId: \"\",\n    educationId: \"\",\n    employmentStatusId: \"\",\n    dateOfRegistration: \"\",\n    isDateOfBirthEstimated: null,\n    age: \"\",\n    phoneNumber: \"\",\n    altPhonenumber: \"\",\n    dob: \"\",\n    countryId: 1,\n    stateId: \"\",\n    district: \"\",\n    sexId: \"\",\n    ninNumber: \"\",\n  });\n  const [relatives, setRelatives] = useState({\n    address: \"\",\n    phone: \"\",\n    firstName: \"\",\n    email: \"\",\n    relationshipId: \"\",\n    lastName: \"\",\n    middleName: \"\",\n  });\n\n  const [today, setToday] = useState(\n    new Date().toISOString().substr(0, 10).replace(\"T\", \" \")\n  );\n  let contactArray = [];\n  const [allContacts, setAllContacts] = useState([]);\n  const [saving, setSaving] = useState(false);\n  const [disabledAgeBaseOnAge, setDisabledAgeBaseOnAge] = useState(false);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [showRelative, setShowRelative] = useState(false);\n  const [patientFacilityId, setPatientFacilityId] = useState(null);\n  const [genders, setGenders] = useState([]);\n  const [maritalStatusOptions, setMaritalStatusOptions] = useState([]);\n  const [educationOptions, setEducationOptions] = useState([]);\n  const [occupationOptions, setOccupationOptions] = useState([]);\n  const [relationshipOptions, setRelationshipOptions] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [states, setStates] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n  const [errors, setErrors] = useState({});\n  const [topLevelUnitCountryOptions, settopLevelUnitCountryOptions] = useState(\n    []\n  );\n  const [patientDTO, setPatientDTO] = useState({\n    person: \"\",\n    hivEnrollment: \"\",\n  });\n  const userDetail =\n    props.location && props.location.state ? props.location.state.user : null;\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n  //status for hospital Number\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\n  const [hospitalNumStatus2, setHospitalNumStatus2] = useState(false);\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const locationState = location.state;\n  let patientId = null;\n  patientId = locationState ? locationState.patientId : null;\n\n  const loadState = (stateId) => {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(response.data.sort());\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const getPatient = useCallback(async () => {\n    if (patientId) {\n      const response = await axios.get(`${baseUrl}patient/${patientId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      const sexCodeset = await axios.get(\n        `${baseUrl}application-codesets/v2/SEX`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      const patient = response.data;\n\n      console.log(\"get patient\", patient?.contact?.contact);\n\n      setAllContacts(patient?.contact?.contact);\n      setPatientFacilityId(patient.facilityId);\n      const identifiers = patient.identifier;\n      const address = patient.address;\n      const contactPoint = patient?.contactPoint;\n      const hospitalNumber = identifiers?.identifier?.find(\n        (obj) => obj.type == \"HospitalNumber\"\n      );\n\n      const sex = _.find(sexCodeset.data, {\n        display: _.upperFirst(_.lowerCase(patient.sex)),\n      }).id;\n\n      const phone = phoneNumberFormatCheck(\n        contactPoint?.contactPoint?.find((obj) => obj.type == \"phone\")\n      );\n\n      const email = contactPoint?.contactPoint?.find(\n        (obj) => obj.type == \"email\"\n      );\n      const altphone = phoneNumberFormatCheck(\n        contactPoint?.contactPoint?.find((obj) => obj.type == \"altphone\")\n      );\n\n      const country =\n        address && address?.address && address?.address.length > 0\n          ? address.address[0]\n          : null;\n\n      if (country.stateId) {\n        loadState(country.stateId);\n      }\n\n      setBasicInfo({\n        active: true,\n        streetAddress: country.city,\n        address: [],\n        contact: [],\n        contactPoint: [],\n        dateOfBirth: \"\",\n        deceased: false,\n        deceasedDateTime: null,\n        hospitalNumber: hospitalNumber.value,\n        firstName: patient.firstName,\n        lastName: patient.surname,\n        genderId: \"\",\n        identifier: \"\",\n        otherName: \"\",\n        maritalStatusId: patient.maritalStatus?.id,\n        educationId: patient.education?.id,\n        employmentStatusId: patient.employmentStatus?.id,\n        dateOfRegistration: patient.dateOfRegistration,\n        isDateOfBirthEstimated: patient.dateOfBirth == \"Actual\" ? false : true,\n        age: calculate_age(patient.dateOfBirth),\n        phoneNumber: phone?.value,\n        altPhonenumber: altphone?.value,\n        dob: patient.dateOfBirth,\n        countryId: 1,\n        stateId: country.stateId,\n        district: parseInt(country.district),\n        landmark: country.line[0],\n        sexId: sex,\n        ninNumber: \"\",\n        email: email?.value,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    loadGenders();\n    loadMaritalStatus();\n    loadEducation();\n    loadOccupation();\n    loadRelationships();\n    loadTopLevelCountry();\n    GetCountry();\n    setStateByCountryId();\n    getPatient();\n    if (basicInfo.dateOfRegistration < basicInfo.dob) {\n      toast.error(\"Date of registration can not be earlier than date of birth\");\n    }\n  }, [getPatient]);\n\n  const loadGenders = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/SEX`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setGenders(response.data.sort());\n    } catch (e) {}\n  }, []);\n  const loadMaritalStatus = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/MARITAL_STATUS`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setMaritalStatusOptions(response.data.sort());\n    } catch (e) {}\n  }, []);\n  const loadEducation = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/EDUCATION`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setEducationOptions(response.data.sort());\n    } catch (e) {}\n  }, []);\n  const loadOccupation = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/OCCUPATION`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setOccupationOptions(response.data.sort());\n    } catch (e) {}\n  }, []);\n  const loadRelationships = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/RELATIONSHIP`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setRelationshipOptions(response.data.sort());\n    } catch (e) {}\n  }, []);\n  const loadTopLevelCountry = useCallback(async () => {\n    const response = await axios.get(\n      `${baseUrl}organisation-units/parent-organisation-units/0`,\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n    settopLevelUnitCountryOptions(response.data.sort());\n  }, []);\n  const loadOrganisationUnitsByParentId = async (parentId) => {\n    const response = await axios.get(\n      `${baseUrl}organisation-units/parent-organisation-units/${parentId}`,\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n    return response.data;\n  };\n  const calculate_age = (dob) => {\n    const today = new Date();\n    const dateParts = dob.split(\"-\");\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\n    let age_now = today.getFullYear() - birthDate.getFullYear();\n\n    return age_now;\n  };\n  const phoneNumberFormatCheck = (phone) => {\n    //console.log(\"err\", phone);\n    if (\n      phone != undefined &&\n      typeof phone?.value !== null &&\n      typeof phone?.value !== \"undefined\" &&\n      phone?.value?.charAt(0) === \"0\"\n    ) {\n      phone.value = phone.value.replace(\"0\", \"234\");\n    }\n    return phone;\n  };\n  //Country List\n  const GetCountry = () => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/0`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setCountries(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get States from selected country\n  const getStates = (e) => {\n    const getCountryId = e.target.value;\n    setStateByCountryId(1);\n    setBasicInfo({ ...basicInfo, countryId: getCountryId });\n  };\n  //Get list of State\n  function setStateByCountryId() {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/1`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setStates(response.data.sort());\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n  //fetch province\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    setBasicInfo({ ...basicInfo, stateId: e.target.value });\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(response.data.sort());\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      //   const m = today.getMonth() - birthDate.getMonth();\n      //   if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      //     age_now--;\n      //   }\n      basicInfo.age = age_now;\n      //setBasicInfo({...basicInfo, age: age_now});\n    } else {\n      setBasicInfo({ ...basicInfo, age: \"\" });\n    }\n    setBasicInfo({ ...basicInfo, dob: e.target.value });\n    if (basicInfo.age !== \"\" && basicInfo.age >= 60) {\n      toggle();\n    }\n    setErrors({...errors, age: \"\"})\n\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value === \"Actual\") {\n      setAgeDisabled(true);\n    } else if (e.target.value === \"Estimated\") {\n      setAgeDisabled(false);\n    }\n  };\n  const handleAgeChange = (e) => {\n    const ageNumber = e.target.value.replace(/\\D/g, \"\");\n    if (!ageDisabled && ageNumber) {\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(ageNumber * -1, \"years\");\n      //setBasicInfo({...basicInfo, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\n      basicInfo.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n      if (ageNumber !== \"\" && ageNumber >= 60) {\n        toggle();\n      }\n    }\n    setBasicInfo({ ...basicInfo, age: ageNumber });\n    setErrors({...errors, age: \"\"})\n  };\n\n  const handleInputChangeBasic = (e) => {\n    setErrors({...errors, [e.target.name]: \"\"})\n    setBasicInfo({ ...basicInfo, [e.target.name]: e.target.value });\n\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setBasicInfo({ ...basicInfo, [e.target.name]: name });\n    }\n    if (e.target.name === \"lastName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setBasicInfo({ ...basicInfo, [e.target.name]: name });\n    }\n    if (e.target.name === \"middleName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setBasicInfo({ ...basicInfo, [e.target.name]: name });\n    }\n    if (e.target.name === \"ninNumber\" && e.target.value !== \"\") {\n      const ninNumberValue = checkNumberLimit(\n        e.target.value.replace(/\\D/g, \"\")\n      );\n      setBasicInfo({ ...basicInfo, [e.target.name]: ninNumberValue });\n    }\n    if (e.target.name === \"hospitalNumber\" && e.target.value !== \"\") {\n      async function getHosiptalNumber() {\n        const hosiptalNumber = e.target.value;\n        const response = await axios.post(\n          `${baseUrl}patient/exist/hospital-number`,\n          hosiptalNumber,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data !== true) {\n          setHospitalNumStatus(false);\n          errors.hospitalNumber = \"\";\n          //setObjValues({ ...objValues, uniqueId: e.target.value });\n          setHospitalNumStatus2(true);\n        } else {\n          errors.hospitalNumber = \"\";\n          toast.error(\"Error! Hosiptal Number already exist\");\n          setHospitalNumStatus(true);\n          setHospitalNumStatus2(false);\n        }\n      }\n      getHosiptalNumber();\n    }\n  };\n\n  //Function to show relatives\n  const handleAddRelative = () => {\n    setShowRelative(true);\n  };\n  //Function to cancel the relatives form\n  const handleCancelSaveRelationship = () => {\n    setShowRelative(false);\n  };\n  /*****  Validation  Relationship Input*/\n  const validateRelatives = () => {\n    let temp = { ...errors };\n    temp.firstName = relatives.firstName ? \"\" : \"First Name is required\";\n    //temp.lastName = relatives.lastName ? \"\" : \"Last Name  is required.\"\n    //temp.phone = relatives.phone ? \"\" : \"Phone Number  is required.\"\n    temp.relationshipId = relatives.relationshipId\n      ? \"\"\n      : \"Relationship Type is required.\";\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  //Function to add relatives\n  const handleSaveRelationship = () => {\n    if (validateRelatives()) {\n      const contact = {\n        address: {\n          line: [relatives.address],\n        },\n        contactPoint: {\n          type: \"phone\",\n          value: relatives.phone,\n        },\n        firstName: relatives.firstName,\n        fullName:\n          relatives.firstName +\n          \" \" +\n          relatives.middleName +\n          \" \" +\n          relatives.lastName,\n        relationshipId: relatives.relationshipId,\n        surname: relatives.lastName,\n        otherName: relatives.middleName,\n      };\n\n      if (allContacts === undefined) {\n        contactArray.push(contact);\n        setAllContacts(contactArray);\n      } else {\n        setAllContacts([...allContacts, contact]);\n      }\n      setRelatives({\n        address: \"\",\n        phone: \"\",\n        firstName: \"\",\n        email: \"\",\n        relationshipId: \"\",\n        lastName: \"\",\n        middleName: \"\",\n      });\n    }\n  };\n  const handleDeleteRelative = (index) => {\n    allContacts.splice(index, 1);\n    setAllContacts([...allContacts]);\n  };\n  const handleEditRelative = (relative, index) => {\n    console.log(relative);\n    setRelatives(relative);\n    setShowRelative(true);\n    allContacts.splice(index, 1);\n  };\n  const getRelationship = (relationshipId) => {\n    const relationship = relationshipOptions.find(\n      (obj) => obj.id == relationshipId\n    );\n    return relationship ? relationship.display : \"\";\n  };\n  const handleInputChangeRelatives = (e) => {\n    setRelatives({ ...relatives, [e.target.name]: e.target.value });\n  };\n  /*****  Validation  */\n  const validate = () => {\n    let temp = { ...errors };\n    temp.firstName = basicInfo.firstName ? \"\" : \"First Name is required\";\n    temp.hospitalNumber = basicInfo.hospitalNumber\n      ? \"\"\n      : \"Hospital Number  is required.\";\n    //temp.middleName = basicInfo.middleName ? \"\" : \"Middle is required.\"\n\n    temp.lastName = basicInfo.lastName ? \"\" : \"Last Name  is required.\";\n    temp.sexId = basicInfo.sexId ? \"\" : \"Gender is required.\";\n    temp.dateOfRegistration = basicInfo.dateOfRegistration\n      ? \"\"\n      : \"Date of Registration is required.\";\n    temp.educationId = basicInfo.educationId ? \"\" : \"Education is required.\";\n    temp.streetAddress = basicInfo.streetAddress ? \"\" : \"Address is required.\";\n    //temp.phoneNumber = basicInfo.phoneNumber ? \"\" : \"Phone Number  is required.\"\n    temp.countryId = basicInfo.countryId ? \"\" : \"Country is required.\";\n    temp.age = basicInfo.age ? \"\" : \"Age is required.\";\n\n    temp.stateId = basicInfo.stateId ? \"\" : \"State is required.\";\n    temp.district = basicInfo.district ? \"\" : \"Province/LGA is required.\";\n    temp.employmentStatusId = basicInfo.employmentStatusId\n      ? \"\"\n      : \"Employee Status  is required.\";\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x === \"\");\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (validate()) {\n      setSaving(true);\n      //   let newConatctsInfo = [];\n      //   //Manipulate relatives contact  address:\"\",\n\n      //   allContacts &&\n      //     allContacts.length > 0 &&\n      //     allContacts.map((x) => {\n      //       const contactInfo = {\n      //         address: {\n      //           line: [x.address],\n      //         },\n      //         contactPoint: {\n      //           type: \"phone\",\n      //           value: x.phone,\n      //         },\n      //         firstName: x.firstName,\n      //         fullName: x.firstName + \" \" + x.middleName + \" \" + x.lastName,\n      //         relationshipId: x.relationshipId,\n      //         surname: x.lastName,\n      //         otherName: x.middleName,\n      //       };\n\n      //       newConatctsInfo.push(contactInfo);\n      //     });\n      try {\n        const patientForm = {\n          active: true,\n          address: [\n            {\n              city: basicInfo.streetAddress,\n              countryId: basicInfo.countryId,\n              district: basicInfo.district,\n              line: [basicInfo.landmark],\n              organisationUnitId: 0,\n              postalCode: \"\",\n              stateId: basicInfo.stateId,\n            },\n          ],\n          contact: allContacts,\n          contactPoint: [],\n          dateOfBirth: basicInfo.dob,\n          deceased: false,\n          deceasedDateTime: null,\n          firstName: basicInfo.firstName,\n          genderId: basicInfo.sexId,\n          sexId: basicInfo.sexId,\n          identifier: [\n            {\n              assignerId: 1,\n              type: \"HospitalNumber\",\n              value: basicInfo.hospitalNumber,\n            },\n          ],\n          otherName: basicInfo.middleName,\n          maritalStatusId: basicInfo.maritalStatusId,\n          surname: basicInfo.lastName,\n          educationId: basicInfo.educationId,\n          employmentStatusId: basicInfo.employmentStatusId,\n          dateOfRegistration: basicInfo.dateOfRegistration,\n          isDateOfBirthEstimated:\n            basicInfo.dateOfBirth == \"Actual\" ? false : true,\n          ninNumber: basicInfo.ninNumber,\n        };\n\n        const phone = {\n          type: \"phone\",\n          value: basicInfo.phoneNumber,\n        };\n        if (basicInfo.email) {\n          const email = {\n            type: \"email\",\n            value: basicInfo.email,\n          };\n          patientForm.contactPoint.push(email);\n        }\n        if (basicInfo.altPhonenumber) {\n          const altPhonenumber = {\n            type: \"altphone\",\n            value: basicInfo.altPhonenumber,\n          };\n          patientForm.contactPoint.push(altPhonenumber);\n        }\n        patientForm.contactPoint.push(phone);\n        patientForm.id = patientId;\n        patientDTO.person = patientForm;\n\n        //console.log(\"INPUT \", patientForm);\n\n        if (patientId) {\n          // console.log(\"Edit data\", patientForm);\n\n          patientForm.id = null;\n          patientForm.facilityId = patientFacilityId;\n          const response = await axios.put(\n            `${baseUrl}patient/${patientId}`,\n            patientForm,\n            { headers: { Authorization: `Bearer ${token}` } }\n          );\n          setSaving(false);\n          //console.log(\"saved\", response.data);\n          toast.success(\"Patient Updated successfully\");\n          history.push(\"/\");\n        } else {\n          const response = await axios.post(`${baseUrl}patient`, patientForm, {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          setSaving(false);\n          toast.success(\"Patient Register successfully\");\n          history.push(\"/\");\n        }\n      } catch (error) {\n        setSaving(false);\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          if (\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\" &&\n            error.response.data.apierror &&\n            error.response.data.apierror.subErrors[0].message !== \"\"\n          ) {\n            toast.error(\n              error.response.data.apierror.message +\n                \" : \" +\n                error.response.data.apierror.subErrors[0].field +\n                \" \" +\n                error.response.data.apierror.subErrors[0].message,\n              { position: toast.POSITION.BOTTOM_CENTER }\n            );\n          } else {\n            toast.error(errorMessage, {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        } else {\n          toast.error(\"Something went wrong. Please try again...\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        }\n      }\n    }\n  };\n  const alphabetOnly = (value) => {\n    const result = value.replace(/[^a-z]/gi, \"\");\n    return result;\n  };\n\n  const checkPhoneNumber = (e, inputName) => {\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\n    setRelatives({ ...relatives, [inputName]: NumberValue });\n  };\n\n  const checkNumberLimit = (e) => {\n    const limit = 11;\n    const acceptedNumber = e.slice(0, limit);\n    return acceptedNumber;\n  };\n  const handleInputChangePhoneNumber = (e, inputName) => {\n    const limit = 11;\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\n    setBasicInfo({ ...basicInfo, [inputName]: NumberValue });\n  };\n\n  const handleCancel = () => {\n    history.push({ pathname: \"/\" });\n  };\n\n  return (\n    <>\n      <ToastContainer autoClose={3000} hideProgressBar />\n      <div\n        className=\"row page-titles mx-0\"\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\n      >\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item active\">\n            <h4>\n              {\" \"}\n              <Link to={\"/\"}>Patient /</Link> Patient Registration\n            </h4>\n          </li>\n        </ol>\n      </div>\n      <Link\n        to={{\n          pathname: \"/\",\n          state: \"users\",\n        }}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className=\" float-end mr-10 pr-10\"\n          style={{\n            backgroundColor: \"#014d88\",\n            fontWeight: \"bolder\",\n            margingRight: \"-40px\",\n          }}\n          startIcon={<TiArrowBack />}\n        >\n          <span style={{ textTransform: \"capitalize\", color: \"#fff\" }}>\n            Back{\" \"}\n          </span>\n        </Button>\n      </Link>\n      <br />\n      <br />\n\n      <Card className={classes.root}>\n        <CardContent>\n          <div className=\"col-xl-12 col-lg-12\">\n            <Form>\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                >\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                    {userDetail === null\n                      ? \"Basic Information\"\n                      : \"Edit User Information\"}\n                  </h5>\n                </div>\n\n                <div className=\"card-body\">\n                  <div className=\"basic-form\">\n                    <div className=\"row\">\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"dateOfRegistration\">\n                            Date of Registration{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>{\" \"}\n                          </Label>\n                          <Input\n                            className=\"form-control\"\n                            type=\"date\"\n                            name=\"dateOfRegistration\"\n                            id=\"dateOfRegistration\"\n                            min=\"1983-12-31\"\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            value={basicInfo.dateOfRegistration}\n                            //value={basicInfo.dateOfRegistration===\"\"? moment(new Date()).format(\"YYYY-MM-DD\") : basicInfo.dateOfRegistration}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                          {errors.dateOfRegistration !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.dateOfRegistration}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"patientId\">\n                            Hospital Number{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"hospitalNumber\"\n                            id=\"hospitalNumber\"\n                            value={basicInfo.hospitalNumber}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                          {errors.hospitalNumber !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.hospitalNumber}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                          {hospitalNumStatus === true ? (\n                            <span className={classes.error}>\n                              {\"Hospital number already exist\"}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                          {/* {hospitalNumStatus2===true ? (\n                                                        <span className={classes.success}>{\"Hospital number is OK.\"}</span>\n                                                    ) :\"\"} */}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"ninNumber\">\n                            National Identity Number (NIN){\" \"}\n                          </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"ninNumber\"\n                            value={basicInfo.ninNumber}\n                            id=\"ninNumber\"\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n                      {/* <div className=\"form-group mb-3 col-md-4\">\n                                                <FormGroup>\n                                                    <Label for=\"patientId\">EMR Number <span style={{ color:\"red\"}}> *</span> </Label>\n                                                    <input\n                                                        className=\"form-control\"\n                                                        type=\"text\"\n                                                        name=\"emrNumber\"\n                                                        id=\"emrNumber\"\n                                                        disabled='true'\n                                                        value={1094328}\n                                                        //onChange={handleInputChangeBasic}\n                                                        style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}HIV Enrollment\n                                                    />\n                                                   \n                                                </FormGroup>\n                                            \n                                            </div> */}\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"firstName\">\n                            First Names <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <Input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"firstName\"\n                            id=\"firstName\"\n                            value={basicInfo.firstName}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                          {errors.firstName !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.firstName}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label>Middle Name</Label>\n                          <Input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"middleName\"\n                            id=\"middleName\"\n                            value={basicInfo.middleName}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Last Name <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"lastName\"\n                            id=\"lastName\"\n                            value={basicInfo.lastName}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                          {errors.lastName !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.lastName}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Sex <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"sexId\"\n                            id=\"sexId\"\n                            onChange={handleInputChangeBasic}\n                            value={basicInfo.sexId}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}>Select</option>\n                            {genders.map((gender, index) => (\n                              <option key={gender.id} value={gender.id}>\n                                {gender.display}\n                              </option>\n                            ))}\n                          </select>\n                          {errors.sexId !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.sexId}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-2 col-md-2\">\n                        <FormGroup>\n                          <Label>Date Of Birth</Label>\n                          <div className=\"radio\">\n                            <label>\n                              <input\n                                type=\"radio\"\n                                value=\"Actual\"\n                                name=\"dateOfBirth\"\n                                defaultChecked\n                                onChange={(e) => handleDateOfBirthChange(e)}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                              />{\" \"}\n                              Actual\n                            </label>\n                          </div>\n                          <div className=\"radio\">\n                            <label>\n                              <input\n                                type=\"radio\"\n                                value=\"Estimated\"\n                                name=\"dateOfBirth\"\n                                onChange={(e) => handleDateOfBirthChange(e)}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                              />{\" \"}\n                              Estimated\n                            </label>\n                          </div>\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-3\">\n                        <FormGroup>\n                          <Label>Date </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"date\"\n                            name=\"dob\"\n                            min=\"1940-01-01\"\n                            id=\"dob\"\n                            max={basicInfo.dateOfRegistration}\n                            value={basicInfo.dob}\n                            onChange={handleDobChange}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-3\">\n                        <FormGroup>\n                          <Label>Age  <span style={{ color: \"red\" }}> *</span></Label>\n                          <input\n                            type=\"text\"\n                            name=\"age\"\n                            className=\"form-control\"\n                            id=\"age\"\n                            min=\"1\"\n                            value={basicInfo.age}\n                            disabled={ageDisabled}\n                            onChange={handleAgeChange}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                        </FormGroup>\n                        {errors.age !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.age}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        {basicInfo.age !== \"\" && basicInfo.age >= 80 ? (\n                          <span className={classes.error}>\n                            Are you sure of the age\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </div>\n                    </div>\n\n                    <div className={\"row\"}>\n                      {/*                                            {watchShowAge >=0 &&\n                                            <>*/}\n                      <div className=\"form-group mb-3 col-md-3\">\n                        <FormGroup>\n                          <Label>Marital Status</Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"maritalStatusId\"\n                            id=\"maritalStatusId\"\n                            onChange={handleInputChangeBasic}\n                            value={basicInfo.maritalStatusId}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}>Select</option>\n                            {maritalStatusOptions.map(\n                              (maritalStatusOption, index) => (\n                                <option\n                                  key={maritalStatusOption.id}\n                                  value={maritalStatusOption.id}\n                                >\n                                  {maritalStatusOption.display}\n                                </option>\n                              )\n                            )}\n                          </select>\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Employment Status{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"employmentStatusId\"\n                            id=\"employmentStatusId\"\n                            onChange={handleInputChangeBasic}\n                            value={basicInfo.employmentStatusId}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}>Select</option>\n                            {occupationOptions.map(\n                              (occupationOption, index) => (\n                                <option\n                                  key={occupationOption.id}\n                                  value={occupationOption.id}\n                                >\n                                  {occupationOption.display}\n                                </option>\n                              )\n                            )}\n                          </select>\n                          {errors.employmentStatusId !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.employmentStatusId}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Education Level{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"educationId\"\n                            id=\"educationId\"\n                            onChange={handleInputChangeBasic}\n                            value={basicInfo.educationId}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}>Select</option>\n                            {educationOptions.map((educationOption, index) => (\n                              <option\n                                key={educationOption.id}\n                                value={educationOption.id}\n                              >\n                                {educationOption.display}\n                              </option>\n                            ))}\n                          </select>\n                          {errors.educationId !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.educationId}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                >\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                    Contact Details\n                  </h5>\n                </div>\n\n                <div className=\"card-body\">\n                  <div className={\"row\"}>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Phone Number <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        {/* <PhoneInput\n                                                    containerStyle={{width:'100%',border: \"1px solid #014D88\"}}\n                                                    inputStyle={{width:'100%',borderRadius:'0px'}}\n                                                    country={'ng'}\n                                                    placeholder=\"(234)7099999999\"\n                                                    maxLength={5}\n                                                    name=\"phoneNumber\"\n                                                    id=\"phoneNumber\"\n                                                    masks={{ng: '...-...-....', at: '(....) ...-....'}}\n                                                    value={basicInfo.phoneNumber}\n                                                   onChange={(e)=>{checkPhoneNumberBasic(e,'phoneNumber')}}\n                                                   \n                                                   //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\n                                                /> */}\n                        <Input\n                          type=\"text\"\n                          name=\"phoneNumber\"\n                          id=\"phoneNumber\"\n                          onChange={(e) => {\n                            handleInputChangePhoneNumber(e, \"phoneNumber\");\n                          }}\n                          value={basicInfo.phoneNumber}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          required\n                        />\n                        {errors.phoneNumber !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.phoneNumber}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                        {/* {basicInfo.phoneNumber.length >13 ||  basicInfo.phoneNumber.length <13? (\n                                                <span className={classes.error}>{\"The maximum and minimum required number is 13 digit\"}</span>\n                                                ) : \"\" } */}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label>Alt. Phone Number</Label>\n                        {/* <PhoneInput\n                                                    containerStyle={{width:'100%',border: \"1px solid #014D88\"}}\n                                                    inputStyle={{width:'100%',borderRadius:'0px'}}\n                                                    country={'ng'}\n                                                    placeholder=\"(234)7099999999\"\n                                                    value={basicInfo.altPhonenumber}\n                                                    masks={{ng: '...-...-....', at: '(....) ...-....'}}\n                                                    onChange={(e)=>{checkPhoneNumberBasic(e,'altPhonenumber')}}\n                                                    \n                                                /> */}\n                        <Input\n                          type=\"text\"\n                          name=\"altPhonenumber\"\n                          id=\"altPhonenumber\"\n                          onChange={(e) => {\n                            handleInputChangePhoneNumber(e, \"altPhonenumber\");\n                          }}\n                          value={basicInfo.altPhonenumber}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          required\n                        />\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label>Email</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"email\"\n                          name=\"email\"\n                          id=\"email\"\n                          onChange={handleInputChangeBasic}\n                          value={basicInfo.email}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          required\n                        />\n                      </FormGroup>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Country <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"countryId\"\n                          id=\"countryId\"\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          value={basicInfo.countryId}\n                          onChange={getStates}\n                          disabled\n                        >\n                          <option value={\"\"}>Select</option>\n                          {countries.map((value, index) => (\n                            <option key={index} value={value.id}>\n                              {value.name}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.countryId !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.countryId}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          State <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"stateId\"\n                          id=\"stateId\"\n                          value={basicInfo.stateId}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          onChange={getProvinces}\n                        >\n                          <option value=\"\">Select</option>\n                          {states.map((value, index) => (\n                            <option key={index} value={value.id}>\n                              {value.name}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.stateId !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.stateId}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Province/District/LGA{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"district\"\n                          id=\"district\"\n                          value={basicInfo.district}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          onChange={handleInputChangeBasic}\n                        >\n                          <option value=\"\">Select</option>\n                          {provinces.map((value, index) => (\n                            <option key={index} value={value.id}>\n                              {value.name}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.district !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.district}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  </div>\n\n                  <div className={\"row\"}>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Street Address{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"streetAddress\"\n                          id=\"streetAddress\"\n                          value={basicInfo.streetAddress}\n                          onChange={handleInputChangeBasic}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />\n                        {errors.streetAddress !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.streetAddress}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Landmark</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"landmark\"\n                          id=\"landmark\"\n                          value={basicInfo.landmark}\n                          onChange={handleInputChangeBasic}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                >\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                    Relationship / Next Of Kin\n                  </h5>\n                </div>\n                <div className=\"card-body\">\n                  <div className=\"row\">\n                    {allContacts && allContacts.length > 0 && (\n                      <div className=\"col-xl-12 col-lg-12\">\n                        <table style={{ width: \"100%\" }} className=\"mb-3\">\n                          <thead className=\"mb-3\">\n                            <tr>\n                              <th>Relationship Type</th>\n                              <th>Name</th>\n                              <th>Phone</th>\n                              <th>Address</th>\n                              <th>Actions</th>\n                            </tr>\n                          </thead>\n                          <tbody className=\"mb-3\">\n                            {allContacts.map((item, index) => {\n                              return (\n                                <tr key={item.index} className=\"mb-3\">\n                                  <td>\n                                    {getRelationship(item.relationshipId)}\n                                  </td>\n                                  <td>\n                                    {item?.firstName +\n                                      \" \" +\n                                      item?.otherName +\n                                      \" \" +\n                                      item?.surname}\n                                  </td>\n                                  <td>{item.contactPoint.value}</td>\n                                  <td>{item.address?.line[0]}</td>\n                                  <td>\n                                    {/* <button\n                                      type=\"button\"\n                                      className=\"btn btn-default btn-light btn-sm editRow\"\n                                      onClick={() =>\n                                        handleEditRelative(item, index)\n                                      }\n                                    >\n                                      <FontAwesomeIcon icon=\"edit\" />\n                                    </button> */}\n                                    &nbsp;&nbsp;\n                                    <button\n                                      type=\"button\"\n                                      className=\"btn btn-danger btn-sm removeRow\"\n                                      onClick={(e) =>\n                                        handleDeleteRelative(index)\n                                      }\n                                    >\n                                      <FontAwesomeIcon icon=\"trash\" />\n                                    </button>\n                                  </td>\n                                </tr>\n                              );\n                            })}\n                          </tbody>\n                        </table>\n                      </div>\n                    )}\n                    <div className=\"col-xl-12 col-lg-12\">\n                      {showRelative && (\n                        <div className=\"card\">\n                          <div className=\"card-body\">\n                            <div className=\"row\">\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"relationshipType\">\n                                    Relationship Type{\" \"}\n                                    <span style={{ color: \"red\" }}> *</span>\n                                  </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"relationshipId\"\n                                    id=\"relationshipId\"\n                                    value={relatives.relationshipId}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    onChange={handleInputChangeRelatives}\n                                  >\n                                    <option value={\"\"}>Select</option>\n                                    {relationshipOptions.map(\n                                      (relative, index) => (\n                                        <option\n                                          key={relative.id}\n                                          value={relative.id}\n                                        >\n                                          {relative.display}\n                                        </option>\n                                      )\n                                    )}\n                                  </select>\n                                  {errors.relationshipId !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.relationshipId}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"cfirstName\">\n                                    First Name{\" \"}\n                                    <span style={{ color: \"red\" }}> *</span>\n                                  </Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"firstName\"\n                                    value={relatives.firstName}\n                                    id=\"firstName\"\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    onChange={handleInputChangeRelatives}\n                                  />\n                                  {errors.firstName !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.firstName}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label>Middle Name</Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"middleName\"\n                                    id=\"middleName\"\n                                    value={relatives.middleName}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    onChange={handleInputChangeRelatives}\n                                  />\n                                  {/* {errors.cmiddleName && <p>{errors.cmiddleName.message}</p>} */}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label>Last Name </Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"lastName\"\n                                    id=\"lastName\"\n                                    value={relatives.lastName}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    onChange={handleInputChangeRelatives}\n                                  />\n                                </FormGroup>\n                              </div>\n                            </div>\n\n                            <div className=\"row\">\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"contactPhoneNumber\">\n                                    Phone Number\n                                  </Label>\n                                  <Input\n                                    type=\"text\"\n                                    name=\"phone\"\n                                    id=\"phone\"\n                                    onChange={(e) => {\n                                      checkPhoneNumber(e, \"phone\");\n                                    }}\n                                    value={relatives.phone?.value}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    required\n                                  />\n                                  {errors.phone !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.phone}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"contactEmail\">Email</Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"email\"\n                                    name=\"email\"\n                                    id=\"email\"\n                                    value={relatives.email}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    onChange={handleInputChangeRelatives}\n                                    required\n                                  />\n                                  {/* {errors.contactEmail && <p>{errors.contactEmail.message}</p>} */}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"contactAddress\">Address</Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"address\"\n                                    id=\"address\"\n                                    value={relatives.address?.city}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    onChange={handleInputChangeRelatives}\n                                  />\n                                  {/* {errors.contactAddress && <p>{errors.contactAddress.message}</p>} */}\n                                </FormGroup>\n                              </div>\n                            </div>\n\n                            <div className=\"row\">\n                              <div className=\"col-1\">\n                                <MatButton\n                                  type=\"button\"\n                                  variant=\"contained\"\n                                  color=\"primary\"\n                                  className={classes.button}\n                                  onClick={handleSaveRelationship}\n                                >\n                                  Add\n                                </MatButton>\n                              </div>\n\n                              <div className=\"col-1\">\n                                <MatButton\n                                  type=\"button\"\n                                  variant=\"contained\"\n                                  color=\"secondary\"\n                                  className={classes.button}\n                                  onClick={handleCancelSaveRelationship}\n                                >\n                                  Cancel\n                                </MatButton>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"row\"></div>\n                  <MatButton\n                    type=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.button}\n                    startIcon={<AddIcon />}\n                    onClick={handleAddRelative}\n                    style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\n                  >\n                    Add a Relative/Next Of Kin\n                  </MatButton>\n                  {/* </div> */}\n                </div>\n              </div>\n              {saving ? <Spinner /> : \"\"}\n\n              <br />\n\n              <MatButton\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.button}\n                startIcon={<SaveIcon />}\n                onClick={handleSubmit}\n                hidden={disabledAgeBaseOnAge}\n                disabled={saving}\n                style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\n                id=\"save-patient\"\n              >\n                {!saving ? (\n                  <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                ) : (\n                  <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\n                )}\n              </MatButton>\n\n              <MatButton\n                variant=\"contained\"\n                className={classes.button}\n                startIcon={<CancelIcon />}\n                style={{ backgroundColor: \"#992E62\" }}\n                onClick={handleCancel}\n              >\n                <span style={{ textTransform: \"capitalize\", color: \"#fff\" }}>\n                  Cancel\n                </span>\n              </MatButton>\n            </Form>\n          </div>\n        </CardContent>\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default RegisterPatient;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\BiometricRecapture.js",["196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222"],"import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Row,\n  Label,\n  Col,\n  FormGroup,\n  Input,\n  Badge,\n} from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TiArrowBack } from \"react-icons/ti\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport MatButton from \"@material-ui/core/Button\";\nimport FingerprintIcon from \"@material-ui/icons/Fingerprint\";\nimport { Button2, Icon, List } from \"semantic-ui-react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\n\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../api\";\n\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nimport { Link, useHistory } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport fingerprintimage from \"../images/fingerprintimage.png\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport LinearProgress from \"@mui/material/LinearProgress\";\n\nimport _ from \"lodash\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":\n      {\n        fontFamily: \"FontAwesome\",\n        border: \"0\",\n        verticalAlign: \"middle\",\n        marginLeft: \".25em\",\n        lineHeight: \"1\",\n      },\n    \"& .dropdown-menu .dropdown-item\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      padding: \"0.3rem 1.5rem\",\n      fontWeight: \"bold\",\n    },\n    \"& .mt-4\": {\n      marginTop: \"28px !important\",\n    },\n    \"& .form-control\": {\n      color: \"#992E62\",\n    },\n    \"& .form-control:focus\": {\n      color: \"#014d88\",\n    },\n    \"& .sharp \": {\n      \"min-width\": \"35px\",\n      padding: \"5px\",\n      height: \"35px\",\n      \"min-height\": \"35px\",\n    },\n  },\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n}));\n\nconst BiometricRecapture = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  //console.log(history.location.state);\n  const permissions =\n    history.location && history.location.state\n      ? history.location.state.permissions\n      : [];\n  let currentPatientId = history?.location?.state?.patientObj?.patientId;\n  let currentAge = history?.location?.state?.patientObj?.age;\n  const [biometricDevices, setbiometricDevices] = useState([]);\n  const [objValues, setObjValues] = useState({\n    biometricType: \"FINGERPRINT\",\n    patientId: props.patientId,\n    templateType: \"\",\n    device: \"SECUGEN\",\n    reason: \"\",\n    age: \"\",\n    capturedBiometricsList: [],\n    deduplication: {\n      patientId: \"\",\n      deduplicationDate: null,\n      matchCount: 0,\n      unMatchCount: 0,\n      baselineFingerCount: 0,\n      recaptureFingerCount: 0,\n      perfectMatchCount: 0,\n      imperfectMatchCount: 0,\n      details: null,\n    },\n  });\n  const [fingerType, setFingerType] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [pageLoading, setPageLoading] = useState(false);\n  const [showCapture, setshowCapture] = React.useState(false);\n  const [tryAgain, setTryAgain] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const [errors, setErrors] = useState({});\n  const [storedBiometrics, setStoredBiometrics] = useState([]);\n  const [responseImage, setResponseImage] = useState(\"\");\n  const [capturedFingered, setCapturedFingered] = useState([]);\n  const [capturedFingeredObj, setCapturedFingeredObj] = useState([]);\n  const [recapturedFingered, setRecapturedFingered] = useState([]);\n  // const [selectedFingers, setSelectedFingers] = useState([]);\n  const [imageQuality, setImageQuality] = useState(false);\n  const [isNewStatus, setIsNewStatus] = useState(false);\n\n  const calculate_age = (dob) => {\n    //console.log(dob);\n    const today = new Date();\n    const dateParts = dob.split(\"-\");\n    const birthDate = new Date(dob);\n    let age_now = today.getFullYear() - birthDate.getFullYear();\n\n    return age_now;\n  };\n\n  const getPersonBiometrics = async () => {\n    const fingersCodeset = await axios.get(\n      `${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n\n    axios\n      .get(`${baseUrl}biometrics/person/${currentPatientId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then(async (response) => {\n        if (response.data.length > 0) {\n          setStoredBiometrics(response.data);\n\n          setPageLoading(true);\n\n          let personCapturedFingers = _.uniq(\n            _.map(response.data, \"templateType\")\n          );\n\n          //console.log(personCapturedFingers);\n          //setSelectedFingers(personCapturedFingers);\n\n          let biometricItems = _.map(fingersCodeset.data, (item) => {\n            return _.extend({}, item, {\n              captured: false,\n            });\n          });\n\n          setFingerType(biometricItems);\n        } else {\n          let biometricItems = _.map(fingersCodeset.data, (item) => {\n            return _.extend({}, item, { captured: false });\n            //return item.captured = personCapturedFingers.includes(item.display)\n          });\n          setFingerType(biometricItems);\n        }\n      })\n      .catch(async (error) => {\n        console.log(\"getPersonBiometrics error\");\n        console.log(error);\n\n        let biometricItems = _.map(fingersCodeset.data, (item) => {\n          return _.extend({}, item, { captured: false });\n        });\n        setFingerType(biometricItems);\n        setPageLoading(true);\n      });\n  };\n\n  const clear_storelist = () => {\n    axios\n      .post(\n        `${baseUrl}biometrics/store-list/${currentPatientId}`,\n        currentPatientId,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        //console.log(\"cleared store\");\n      })\n      .catch((error) => {\n        //console.log(\"cleared store error\");\n        console.log(error);\n      });\n  };\n\n  const getRecaptureCount = () => {\n    axios\n      .get(`${baseUrl}biometrics/grouped/person/${currentPatientId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setRecapturedFingered(response.data);\n      });\n  };\n\n  useEffect(() => {\n    clear_storelist();\n    getPersonBiometrics();\n    TemplateType();\n    getRecaptureCount();\n  }, []);\n\n  const TemplateType = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (response.data === true) {\n          axios\n            .get(`${baseUrl}biometrics/devices?active=true`, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              //console.log(response.data.find((x) => x.active === true));\n              setDevices(response.data.find((x) => x.active === true));\n              setbiometricDevices(response.data);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const handleInputChange = (e) => {\n    setObjValues({\n      ...objValues,\n      [e.target.name]: e.target.value,\n      age: calculate_age(currentAge),\n    });\n  };\n\n  const validate = () => {\n    let temp = { ...errors };\n    temp.templateType = objValues.templateType ? \"\" : \"This field is required\";\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x === \"\");\n  };\n\n  const captureFinger = (e) => {\n    e.preventDefault();\n    if (localStorage.getItem(\"capturedBiometricsList\") !== null) {\n      const capturedBiometricsListObj = JSON.parse(\n        localStorage.getItem(\"capturedBiometricsList\")\n      );\n\n      objValues.capturedBiometricsList = capturedBiometricsListObj;\n      localStorage.removeItem(\"capturedBiometricsList\");\n    } else {\n      objValues.capturedBiometricsList = [];\n      localStorage.removeItem(\"capturedBiometricsList\");\n    }\n\n    if (localStorage.getItem(\"deduplicates\") !== null) {\n      const deduplicatesObj = JSON.parse(localStorage.getItem(\"deduplicates\"));\n\n      objValues.deduplication = deduplicatesObj;\n      setObjValues({ ...objValues, deduplication: deduplicatesObj });\n\n      localStorage.removeItem(\"deduplicates\");\n    } else {\n      let deduplicationObj = {\n        patientId: \"\",\n        deduplicationDate: null,\n        matchCount: 0,\n        unMatchCount: 0,\n        baselineFingerCount: 0,\n        recaptureFingerCount: 0,\n        perfectMatchCount: 0,\n        imperfectMatchCount: 0,\n        details: null,\n      };\n      objValues.deduplication = deduplicationObj;\n      setObjValues({ ...objValues, deduplication: deduplicationObj });\n    }\n\n    if (validate()) {\n      setLoading(true);\n\n      axios\n        .post(\n          `${devices.url}?reader=${\n            devices.name\n          }&isNew=${isNewStatus}&recapture=${true}&identify=${false}`,\n          objValues,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        )\n        .then((response) => {\n          setLoading(false);\n\n          if (response.data.type === \"ERROR\") {\n            setLoading(false);\n            setTryAgain(true);\n\n            toast.error(response.data.message.ERROR);\n            setIsNewStatus(false);\n            // if (response.data.deviceName.contains(\"Futronic\")) {\n            //   localStorage.setItem(\n            //     \"capturedBiometricsList\",\n            //     JSON.stringify(response.data.capturedBiometricsList)\n            //   );\n\n            //   localStorage.setItem(\n            //     \"deduplicates\",\n            //     JSON.stringify(response.data.deduplication)\n            //   );\n            // }\n          } else if (response.data.type === \"WARNING\") {\n            //Imperfect Match\n            if (response.data.match === true) {\n              toast.info(response.data.message.RECAPTURE_MESSAGE, {\n                autoClose: 10000,\n              });\n            } else if (response.data.match === false) {\n              toast.error(response.data.message.RECAPTURE_MESSAGE, {\n                autoClose: 10000,\n              });\n            }\n\n            if (\n              response.data.imageQuality <= 60 &&\n              calculate_age(currentAge) <= 6\n            ) {\n              toast.info(\n                \"Image quality captured is poor, Kindly give a reason for capture above.\",\n                { position: toast.POSITION.BOTTOM_CENTER, autoClose: 20000 }\n              );\n              setImageQuality(true);\n            }\n\n            const templateType = response.data.templateType;\n\n            setTryAgain(false);\n            setSuccess(true);\n\n            let biometricsEnrollments = response.data;\n            biometricsEnrollments.capturedBiometricsList = _.uniqBy(\n              biometricsEnrollments.capturedBiometricsList,\n              \"templateType\"\n            );\n\n            setCapturedFingered([...capturedFingered, biometricsEnrollments]);\n\n            _.find(fingerType, { display: templateType }).captured = true;\n\n            setFingerType([...fingerType]);\n\n            setObjValues({ ...objValues, templateType: \"\" });\n            setIsNewStatus(false);\n            //toast.info(response.data.message.match);\n          } else if (\n            response.data.type === \"SUCCESS\" ||\n            response.data.match === false\n          ) {\n            if (\n              response.data.imageQuality <= 60 &&\n              calculate_age(currentAge) <= 6\n            ) {\n              toast.info(\n                \"Image quality captured is poor, Kindly give a reason for capture above.\",\n                { position: toast.POSITION.BOTTOM_CENTER, autoClose: 20000 }\n              );\n              setImageQuality(true);\n            }\n\n            localStorage.setItem(\n              \"capturedBiometricsList\",\n              JSON.stringify(response.data.capturedBiometricsList)\n            );\n\n            localStorage.setItem(\n              \"deduplicates\",\n              JSON.stringify(response.data.deduplication)\n            );\n\n            const templateType = response.data.templateType;\n            setTryAgain(false);\n            setSuccess(true);\n\n            if (response.data.match === true) {\n              toast.success(response.data.message.RECAPTURE_MESSAGE, {\n                autoClose: 10000,\n              });\n            }\n\n            if (response.data.match === false) {\n              toast.error(response.data.message.RECAPTURE_MESSAGE, {\n                autoClose: 10000,\n              });\n            }\n\n            let biometricsEnrollments = response.data;\n\n            biometricsEnrollments.capturedBiometricsList = _.uniqBy(\n              biometricsEnrollments.capturedBiometricsList,\n              \"templateType\"\n            );\n\n            setCapturedFingered([...capturedFingered, biometricsEnrollments]);\n\n            _.find(fingerType, { display: templateType }).captured = true;\n            setFingerType([...fingerType]);\n\n            setObjValues({ ...objValues, templateType: \"\" });\n            setIsNewStatus(false);\n            //toast.success(response.data.message.match);\n          } else {\n            setLoading(false);\n            setTryAgain(true);\n            toast.error(\"Something went wrong capturing biometrics...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        })\n        .catch((error) => {\n          setLoading(false);\n        });\n    }\n  };\n\n  const saveBiometrics = (e) => {\n    e.preventDefault();\n\n    if (capturedFingered.length >= 1) {\n      const capturedObj = capturedFingered[capturedFingered.length - 1];\n\n      capturedObj.capturedBiometricsList = _.uniqBy(\n        capturedObj.capturedBiometricsList,\n        \"templateType\"\n      );\n\n      if (capturedObj.deviceName.includes(\"Futronic\")) {\n        let fingersObj = [];\n        capturedFingered.forEach((obj) => {\n          fingersObj.push(obj.capturedBiometricsList[0]);\n        });\n\n        if (fingersObj.length > 0) {\n          axios\n            .post(`${baseUrl}biometrics/templates`, capturedObj, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              console.log(\"saved\", response);\n              toast.success(\"Biometric saved successfully\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n              setCapturedFingered([]);\n              getPersonBiometrics();\n              //props.updatePatientBiometricStatus(true);\n              getRecaptureCount();\n              //props.toggle();\n            })\n            .catch((error) => {\n              toast.error(\"Something went wrong saving biometrics recapture\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n              console.log(error + \"1\");\n            });\n        }\n      } else {\n        axios\n          .post(`${baseUrl}biometrics/templates`, capturedObj, {\n            headers: { Authorization: `Bearer ${token}` },\n          })\n          .then((response) => {\n            //console.log(\"saved\", response);\n            toast.success(\"Biometric recaptured successfully\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            setCapturedFingered([]);\n            getPersonBiometrics();\n\n            getRecaptureCount();\n            //props.toggle();\n          })\n          .catch((error) => {\n            toast.error(\"Something went wrong saving biometrics recapture\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            console.log(error + \"2\");\n          });\n      }\n    } else {\n      toast.error(\"You can't save less than 2 finger\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  const deleteTempBiometrics = (x) => {\n    axios\n      .delete(\n        `${baseUrl}biometrics?personId=${x.patientId}&templateType=${x.templateType}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((resp) => {\n        _.find(fingerType, { display: x.templateType }).captured = false;\n        setFingerType([...fingerType]);\n        let deletedRecord = capturedFingered.filter(\n          (data) => data.templateType !== x.templateType\n        );\n\n        setCapturedFingered(deletedRecord);\n        toast.info(x.templateType + \" captured removed successfully!\");\n      })\n      .catch((error) => {\n        toast.error(\"Something went wrong\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n        console.log(error);\n      });\n  };\n\n  const getFingerprintsQuality = (imageQuality) => {\n    if (imageQuality > 60 && imageQuality <= 75) {\n      return (\n        <Badge color=\"warning\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    } else if (imageQuality > 75) {\n      return (\n        <Badge color=\"success\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    } else {\n      return (\n        <Badge color=\"error\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    }\n  };\n\n  return (\n    <>\n      <div className={classes.root}>\n        <div>\n          {permissions.includes(\"capture_patient_biometrics\") ||\n          permissions.includes(\"all_permission\") ? (\n            <div\n              style={{\n                flex: \"10\",\n                padding: \"5px\",\n                marginLeft: \"5px\",\n                border: \"1px solid rgba(99, 99, 99, 0.2)\",\n                boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n              }}\n            >\n              {/* <Row>\n                    <Col>\n                      <br />\n                      <p>\n                        {\" \"}\n                        Patient captured count :{\" \"}\n                        <b>{recapturedFingered.length}</b>\n                      </p>\n                      <br />\n                    </Col>\n                  </Row> */}\n              <Row>\n                <p>\n                  {\" \"}\n                  Patient recapture count :{\" \"}\n                  <b>{recapturedFingered.length - 1}</b>\n                  <Link to={\"/\"}>\n                    <MatButton\n                      className=\" float-right mr-1\"\n                      variant=\"contained\"\n                      floated=\"left\"\n                      startIcon={<TiArrowBack />}\n                      style={{\n                        backgroundColor: \"rgb(153, 46, 98)\",\n                        color: \"#fff\",\n                        height: \"35px\",\n                      }}\n                    >\n                      <span style={{ textTransform: \"capitalize\" }}>Back</span>\n                    </MatButton>\n                  </Link>\n                </p>\n                <ToastContainer />\n                <Col md={3}>\n                  <FormGroup>\n                    <Label\n                      for=\"device\"\n                      style={{\n                        color: \"#014d88\",\n                        fontWeight: \"bold\",\n                        fontSize: \"14px\",\n                      }}\n                    >\n                      {\" \"}\n                      Device{\" \"}\n                    </Label>\n                    <Input\n                      type=\"select\"\n                      name=\"device\"\n                      id=\"device\"\n                      //onChange={checkDevice}\n                      value={objValues.device}\n                      required\n                      disabled\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      {biometricDevices.map(\n                        ({ id, name, active, url, type }) => (\n                          <option key={id} value={url}>\n                            {type}\n                          </option>\n                        )\n                      )}\n                    </Input>\n\n                    {errors.device !== \"\" ? (\n                      <span className={classes.error}>{errors.device}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </Col>\n\n                <Col md={3}>\n                  <FormGroup>\n                    <Label\n                      for=\"device\"\n                      style={{\n                        color: \"#014d88\",\n                        fontWeight: \"bold\",\n                        fontSize: \"14px\",\n                      }}\n                    >\n                      Select Finger\n                    </Label>\n                    <Input\n                      type=\"select\"\n                      name=\"templateType\"\n                      id=\"templateType\"\n                      onChange={handleInputChange}\n                      value={objValues.templateType}\n                      required\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value=\"\">Select Finger </option>\n\n                      {fingerType &&\n                        _.filter(fingerType, [\"captured\", false]).map(\n                          (value) => (\n                            <option key={value.id} value={value.display}>\n                              {value.display}\n                            </option>\n                          )\n                        )}\n                    </Input>\n                    {errors.templateType !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.templateType}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </Col>\n\n                {capturedFingered.length >= 6 &&\n                capturedFingered.length < 10 ? (\n                  <Col md={4}>\n                    <FormGroup>\n                      <Label\n                        for=\"device\"\n                        style={{\n                          color: \"#014d88\",\n                          fontWeight: \"bold\",\n                          fontSize: \"14px\",\n                        }}\n                      >\n                        {\" \"}\n                        Reason for recapturing less than 10 fingers{\" \"}\n                      </Label>\n                      <Input\n                        type=\"textarea\"\n                        name=\"reason\"\n                        id=\"reason\"\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </Col>\n                ) : (\n                  \"\"\n                )}\n\n                <Col md={2}>\n                  {!loading ? (\n                    <>\n                      <MatButton\n                        type=\"button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={captureFinger}\n                        className={\"mt-4\"}\n                        style={{ backgroundColor: \"#992E62\" }}\n                        startIcon={<FingerprintIcon />}\n                        disabled={loading}\n                      >\n                        Capture Finger\n                      </MatButton>\n                    </>\n                  ) : (\n                    <>\n                      <MatButton\n                        type=\"button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={\"mt-4\"}\n                        style={{ backgroundColor: \"#992E62\" }}\n                        startIcon={<CircularProgress />}\n                      >\n                        Capturing...\n                      </MatButton>\n                    </>\n                  )}\n                </Col>\n                <br />\n                <Col md={12}>\n                  {loading ? (\n                    <>\n                      <b>Capturing finger...</b>\n                      <LinearProgress />\n                    </>\n                  ) : (\n                    \"\"\n                  )}\n                </Col>\n              </Row>\n            </div>\n          ) : (\n            \"\"\n          )}\n\n          <Row>\n            {capturedFingered.length >= 1 ? (\n              <>\n                <Col\n                  md={12}\n                  style={{ marginTop: \"10px\", paddingBottom: \"20px\" }}\n                >\n                  <List celled horizontal>\n                    {capturedFingered.map((x) => (\n                      <List.Item\n                        style={{\n                          width: \"200px\",\n                          height: \"200px\",\n                          border: \"1px dotted #014d88\",\n                          margin: \"5px\",\n                        }}\n                      >\n                        <List.Header\n                          style={{\n                            paddingLeft: \"0px\",\n                            height: \"0.5rem\",\n\n                            alignItems: \"right\",\n                          }}\n                        >\n                          {getFingerprintsQuality(x.mainImageQuality)}\n                          <span\n                            onClick={() => {\n                              deleteTempBiometrics(x);\n                            }}\n                          >\n                            <Icon\n                              name=\"cancel\"\n                              color=\"red\"\n                              style={{ float: \"right\" }}\n                            />{\" \"}\n                          </span>\n                        </List.Header>\n                        <List.Content\n                          style={{\n                            width: \"200px\",\n                            height: \"150px\",\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                          }}\n                        >\n                          {\" \"}\n                          <FingerprintIcon\n                            style={{ color: \"#992E62\", fontSize: 150 }}\n                          />\n                        </List.Content>\n                        <List.Content\n                          style={{\n                            width: \"200px\",\n                            height: \"30px\",\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                            fontSize: \"16px\",\n                            color: \"#014d88\",\n                            fontWeight: \"bold\",\n                            fontFamily: '\"poppins\", sans-serif',\n                          }}\n                        >\n                          {x.templateType}\n                        </List.Content>\n                        <List.Content>\n                          <br />\n                          {x.mainImageQuality < 75 ? (\n                            <MatButton\n                              type=\"button\"\n                              variant=\"contained\"\n                              color=\"secondary\"\n                              onClick={() => {\n                                deleteTempBiometrics(x);\n                              }}\n                              startIcon={<RestartAltIcon />}\n                            >\n                              Reset recapture\n                            </MatButton>\n                          ) : (\n                            \" \"\n                          )}\n                        </List.Content>\n                      </List.Item>\n                    ))}\n                  </List>\n                </Col>\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <Col md={12}>\n                  <br />\n\n                  <MatButton\n                    type=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={capturedFingered.length < 6 ? true : false}\n                    onClick={saveBiometrics}\n                    startIcon={<SaveIcon />}\n                  >\n                    Save Capture\n                  </MatButton>\n                </Col>\n                <br />\n              </>\n            ) : (\n              \"\"\n            )}\n          </Row>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default BiometricRecapture;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\ViewPatient.js",["223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { format } from \"date-fns\";\nimport MatButton from \"@material-ui/core/Button\";\nimport Button from \"@material-ui/core/Button\";\nimport { Form, FormGroup, Label, Spinner } from \"reactstrap\";\nimport { Modal } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faCheckSquare,\n  faCoffee,\n  faEdit,\n  faTrash,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport { TiArrowBack } from \"react-icons/ti\";\nimport { useForm } from \"react-hook-form\";\nimport { token, url as baseUrl } from \"../../../api\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport _ from \"lodash\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Typography from \"@mui/material/Typography\";\nimport { FaUserPlus } from \"react-icons/fa\";\n\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {},\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    marginBottom: 20,\n    flexGrow: 1,\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n}));\n\nconst schema = yup.object().shape({\n  dateOfRegistration: yup.date().required(),\n  hospitalNumber: yup.string().required(),\n  firstName: yup.string().required(),\n  middleName: yup.string().nullable(),\n  lastName: yup.string().required(),\n  sex: yup.number().required(),\n  employmentStatus: yup.number().required(),\n  //highestQualification: yup.number().nullable(),\n  maritalStatus: yup.number().required(),\n  dob: yup.date().required(),\n  dateOfBirth: yup.string().required(),\n  age: yup.number(),\n  ninNumber: yup.string().nullable(),\n  pnumber: yup.string().required(),\n  altPhonenumber: yup.string().nullable(),\n  email: yup.string().nullable(),\n  address: yup.string().nullable(),\n  landmark: yup.string().nullable(),\n  countryId: yup.number().required(),\n  stateId: yup.number().required(),\n  district: yup.number().nullable(),\n});\n\nconst isValidEmail = (email) =>\n  // eslint-disable-next-line no-useless-escape\n  /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n    email\n  );\n\nconst ViewPatient = (props) => {\n  const {\n    register,\n    watch,\n    setValue,\n    getValues,\n    clearErrors,\n    setError,\n    handleSubmit,\n    formState,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n  const [disValue, setDisValue] = useState(\"\");\n  const { errors, isSubmitting } = formState;\n  const watchPnumber = watch(\"pnumber\", false);\n  const watchAltPhonenumber = watch(\"altPhonenumber\", false);\n  const watchContactPhoneNumber = watch(\"contactPhoneNumber\", false);\n  const watchShowAge = watch(\"age\", false);\n  const [today, setToday] = useState(\n    new Date().toISOString().substr(0, 10).replace(\"T\", \" \")\n  );\n  const [minDOB, setMinDOB] = useState(\n    new Date(\"1/1/1930\").toISOString().substr(0, 10).replace(\"T\", \" \")\n  );\n  const [maxDOB, setMaxDOB] = useState(\n    new Date().toISOString().substr(0, 10).replace(\"T\", \" \")\n  );\n  const [contacts, setContacts] = useState([]);\n  const [saving, setSaving] = useState(false);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [showRelative, setShowRelative] = useState(false);\n  const [editRelative, setEditRelative] = useState(null);\n  const [genders, setGenders] = useState([]);\n  const [sexOptions, setSexOptions] = useState([]);\n  const [maritalStatusOptions, setMaritalStatusOptions] = useState([]);\n  const [educationOptions, setEducationOptions] = useState([]);\n  const [occupationOptions, setOccupationOptions] = useState([]);\n  const [relationshipOptions, setRelationshipOptions] = useState([]);\n  const [topLevelUnitCountryOptions, settopLevelUnitCountryOptions] = useState(\n    []\n  );\n  const [stateUnitOptions, setStateUnitOptions] = useState([]);\n  const [districtUnitOptions, setDistrictUnitOptions] = useState([]);\n  const [checkHospitalNumberError, setCheckHospitalNumberError] =\n    useState(false);\n  const [checkNINError, setCheckNINError] = useState(false);\n  const userDetail =\n    props.location && props.location.state ? props.location.state.user : null;\n  const [patientFacilityId, setPatientFacilityId] = useState(null);\n  const classes = useStyles();\n  const history = useHistory();\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const location = useLocation();\n  const locationState = location.state;\n  let patientId = null;\n  patientId = locationState ? locationState.patientId : null;\n  const [patientData, setPatientData] = useState({});\n\n  const getNames = (relationship) => {\n    const surname = relationship.surname;\n    const firstName = relationship.firstName;\n    const otherName = relationship.otherName ? relationship.otherName : \"\";\n    return surname + \", \" + firstName + \" \" + otherName;\n  };\n  const getRelationship = (relationshipId) => {\n    const relationship = relationshipOptions.find(\n      (obj) => obj.id == relationshipId\n    );\n    return relationship ? relationship.display : \"\";\n  };\n  const getPhoneContactPoint = (contactPoint) => {\n    if (contactPoint.value === null) {\n    } else {\n      return contactPoint ? phoneNumberFormatCheck(contactPoint).value : \"\";\n    }\n  };\n  const getAddress = (address) => {\n    return address && address.line && address.line.length > 0\n      ? address.line[0]\n      : \"\";\n  };\n  const phoneNumberFormatCheck = (phone) => {\n    //console.log(phone);\n    if (\n      phone != undefined &&\n      typeof phone?.value !== null &&\n      typeof phone?.value !== \"undefined\" &&\n      phone?.value?.charAt(0) === \"0\"\n    ) {\n      phone.value = phone.value.replace(\"0\", \"234\");\n    }\n    return phone;\n  };\n  const calculate_age = (dob) => {\n    const today = new Date();\n    const dateParts = dob.split(\"-\");\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\n    let age_now = today.getFullYear() - birthDate.getFullYear();\n    const m = today.getMonth() - birthDate.getMonth();\n    if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n      age_now--;\n    }\n    // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n    //     age_now--;\n    // }\n    if (age_now === 0) {\n      return m;\n    }\n    return age_now;\n  };\n  const getPatient = useCallback(async () => {\n    if (patientId) {\n      const response = await axios.get(`${baseUrl}patient/${patientId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      const sexCodeset = await axios.get(\n        `${baseUrl}application-codesets/v2/SEX`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      const patient = response.data;\n      //console.log(patient);\n      setPatientData(patient);\n      const contacts = patient.contact ? patient.contact : [];\n      setContacts(contacts.contact);\n      const identifiers = patient.identifier;\n      const address = patient.address;\n      const contactPoint = patient?.contactPoint;\n      const hospitalNumber = identifiers.identifier.find(\n        (obj) => obj.type == \"HospitalNumber\"\n      );\n      const phone = phoneNumberFormatCheck(\n        contactPoint?.contactPoint?.find((obj) => obj.type == \"phone\")\n      );\n      const email = contactPoint?.contactPoint?.find(\n        (obj) => obj.type == \"email\"\n      );\n      const altphone = phoneNumberFormatCheck(\n        contactPoint?.contactPoint?.find((obj) => obj.type == \"altphone\")\n      );\n      const country =\n        address && address.address && address.address.length > 0\n          ? address.address[0]\n          : null;\n      const gender = patient.gender;\n\n      //console.log(_.upperFirst(_.lowerCase(patient.sex)))\n      const sex = _.find(sexCodeset.data, {\n        display: _.upperFirst(_.lowerCase(patient.sex)),\n      }).id;\n      const employmentStatus = patient.employmentStatus;\n      const education = patient.education;\n      const maritalStatus = patient.maritalStatus;\n      setPatientFacilityId(patient.facilityId);\n      setValue(\"dateOfRegistration\", patient.dateOfRegistration);\n      setValue(\"facilityId\", patient.facilityId);\n      setValue(\"ninNumber\", patient.ninNumber);\n      setValue(\"firstName\", patient.firstName);\n      setValue(\"middleName\", patient.otherName);\n      setValue(\"lastName\", patient.surname);\n      setValue(\"hospitalNumber\", hospitalNumber ? hospitalNumber.value : \"\");\n      setValue(\"maritalStatus\", maritalStatus ? maritalStatus.id : \"\");\n      setValue(\"employmentStatus\", employmentStatus ? employmentStatus.id : \"\");\n\n      //setValue('gender', gender.id);\n      setValue(\"sex\", sex);\n      setValue(\"highestQualification\", education ? education.id : \"\");\n      setValue(\"dob\", format(new Date(patient.dateOfBirth), \"yyyy-MM-dd\"));\n      setValue(\"age\", calculate_age(patient.dateOfBirth));\n      if (country) {\n        setValue(\"countryId\", country.countryId);\n        const stateOptions = country.countryId\n          ? await loadOrganisationUnitsByParentId(country.countryId)\n          : \"\";\n        setStateUnitOptions(stateOptions);\n        setValue(\"stateId\", country.stateId);\n        const districtOptions = country.stateId\n          ? await loadOrganisationUnitsByParentId(country.stateId)\n          : \"\";\n        setDistrictUnitOptions(districtOptions);\n        setValue(\"district\", country.district);\n        setValue(\"address\", country.city);\n        setValue(\"landmark\", country.line[0]);\n      }\n      setValue(\"pnumber\", phone ? phone.value : \"+234\");\n      setValue(\"email\", email ? email.value : null);\n      setValue(\"altPhonenumber\", altphone ? altphone.value : \"+234\");\n    }\n  }, []);\n  const handleAddRelative = () => {\n    setShowRelative(true);\n  };\n  const checkHospitalNumber = async (e) => {\n    setCheckHospitalNumberError(false);\n    await axios\n      .post(`${baseUrl}patient/exist/hospital-number`, e, {\n        responseType: \"text\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"text/plain\",\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setCheckHospitalNumberError(true);\n        } else {\n          setCheckHospitalNumberError(false);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  const checkNIN = async (e) => {\n    setCheckNINError(false);\n    if (e.target.value.length > 0) {\n      await axios\n        .post(\n          `${baseUrl}patient/exist/nin-number/${e.target.value}`,\n          e.target.value,\n          {\n            responseType: \"text\",\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        )\n        .then((response) => {\n          if (response.data) {\n            setCheckNINError(true);\n          } else {\n            setCheckNINError(false);\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n  const handleSaveRelationship = (e) => {\n    const relationshipType = getValues(\"relationshipType\");\n    const cfirstName = getValues(\"cfirstName\");\n    const cmiddleName = getValues(\"cmiddleName\");\n    const clastName = getValues(\"clastName\");\n    const contactPhoneNumber = getValues(\"contactPhoneNumber\");\n    const contactEmail = getValues(\"contactEmail\");\n    const contactAddress = getValues(\"contactAddress\");\n    if (!relationshipType) {\n      setError(\n        \"relationshipType\",\n        { type: \"custom\", message: \"Relationship is required\" },\n        { shouldFocus: true }\n      );\n      return;\n    }\n    if (!cfirstName) {\n      setError(\n        \"cfirstName\",\n        { type: \"custom\", message: \"FirstName is required\" },\n        { shouldFocus: true }\n      );\n      return;\n    }\n    if (!clastName) {\n      setError(\n        \"clastName\",\n        { type: \"custom\", message: \"LastName is required\" },\n        { shouldFocus: true }\n      );\n      return;\n    }\n\n    const contact = {\n      address: {\n        line: [contactAddress],\n      },\n      contactPoint: {\n        type: \"phone\",\n        value: contactPhoneNumber,\n      },\n      firstName: cfirstName,\n      fullName: cfirstName + \" \" + cmiddleName + \" \" + clastName,\n      relationshipId: relationshipType,\n      surname: clastName,\n      otherName: cmiddleName,\n    };\n\n    if (editRelative != null) {\n      contacts.splice(editRelative, 1);\n      setContacts(contacts.concat(contact));\n    } else {\n      if (contacts === undefined) {\n        setContacts([].concat(contact));\n      } else {\n        setContacts(contacts.concat(contact));\n      }\n    }\n    setShowRelative(false);\n  };\n  const handleCancelSaveRelationship = () => {\n    setShowRelative(false);\n  };\n  const handleEmailValidation = (email) => {\n    console.log(\"ValidateEmail was called with\", email);\n\n    const isValid = isValidEmail(email);\n    if (!isValid) {\n      errors.email.message = \"Please enter a valid email\";\n    }\n    const validityChanged =\n      (errors.email && isValid) || (!errors.email && !isValid);\n    if (validityChanged) {\n      console.log(\"Fire tracker with\", isValid ? \"Valid\" : \"Invalid\");\n    }\n\n    return isValid;\n  };\n\n  const onSubmit = async (data) => {\n    if (\n      _.find(errors, function (error) {\n        return error;\n      })\n    ) {\n      toast.error(\"Failed to save form kindly check the form for errors\", {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    } else {\n      try {\n        const patientForm = {\n          active: true,\n          address: [\n            {\n              city: data.address,\n              countryId: data.countryId,\n              district: data.district,\n              line: [data.landmark],\n              organisationUnitId: 0,\n              postalCode: \"\",\n              stateId: data.stateId,\n            },\n          ],\n          contact: contacts,\n          contactPoint: [],\n          dateOfBirth: new Date(data.dob),\n          deceased: false,\n          deceasedDateTime: null,\n          firstName: data.firstName,\n          sexId: data.sex,\n          /*genderId:data.sex,*/\n          identifier: [\n            {\n              assignerId: 1,\n              type: \"HospitalNumber\",\n              value: data.hospitalNumber,\n            },\n          ],\n          ninNumber: data.ninNumber,\n          otherName: data.middleName,\n          maritalStatusId: data.maritalStatus,\n          surname: data.lastName,\n          educationId: data.highestQualification,\n          employmentStatusId:\n            data.employmentStatus != null ? data.employmentStatus : null,\n          dateOfRegistration: data.dateOfRegistration,\n          isDateOfBirthEstimated: data.dateOfBirth == \"Actual\" ? false : true,\n        };\n        const phone = {\n          type: \"phone\",\n          value: data.pnumber,\n        };\n        if (data.email) {\n          const email = {\n            type: \"email\",\n            value: data.email,\n          };\n          patientForm.contactPoint.push(email);\n        }\n        if (data.altPhonenumber) {\n          const altPhonenumber = {\n            type: \"altphone\",\n            value: data.altPhonenumber,\n          };\n          patientForm.contactPoint.push(altPhonenumber);\n        }\n        patientForm.contactPoint.push(phone);\n        if (patientId) {\n          patientForm.id = null;\n          patientForm.facilityId = patientFacilityId;\n          const response = await axios.put(\n            `${baseUrl}patient/${patientId}`,\n            patientForm,\n            { headers: { Authorization: `Bearer ${token}` } }\n          );\n        } else {\n          const response = await axios.post(`${baseUrl}patient`, patientForm, {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n        }\n        toast.success(\"Patient Register successful\");\n        history.push(\"/\");\n      } catch (e) {\n        console.log(e);\n        toast.error(\"An error occured while registering a patient !\", {\n          position: toast.POSITION.TOP_RIGHT,\n        });\n      }\n    }\n  };\n  const onError = (errors) => {\n    console.error(errors);\n  };\n  const handleEditRelative = (relative, index) => {\n    setValue(\"relationshipType\", relative.relationshipId);\n    setValue(\"cfirstName\", relative.firstName);\n    setValue(\"cmiddleName\", relative.otherName);\n    setValue(\"clastName\", relative.surname);\n    setValue(\n      \"contactPhoneNumber\",\n      relative.contactPoint\n        ? phoneNumberFormatCheck(relative.contactPoint).value\n        : \"\"\n    );\n    setValue(\n      \"contactAddress\",\n      relative.address &&\n        relative.address.line &&\n        relative.address.line.length > 0\n        ? relative.address.line[0]\n        : \"\"\n    );\n    setShowRelative(true);\n    setEditRelative(index);\n  };\n  const handleDeleteRelative = (index) => {\n    setTimeout(() => {\n      contacts.splice(index, 1);\n      setContacts(contacts);\n      setShowRelative(true);\n      setShowRelative(false);\n    }, 500);\n  };\n\n  const loadSexes = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/SEX`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      await setSexOptions(response.data);\n    } catch (e) {\n      toast.error(\"An error occured while fetching sex codesets !\", {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    }\n  }, []);\n  const loadMaritalStatus = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/MARITAL_STATUS`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setMaritalStatusOptions(response.data);\n    } catch (e) {\n      toast.error(\"An error occured while fetching marital codesets !\", {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    }\n  }, []);\n  const loadEducation = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/EDUCATION`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setEducationOptions(response.data);\n    } catch (e) {\n      toast.error(\"An error occured while fetching education codesets !\", {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    }\n  }, []);\n  const loadOccupation = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/OCCUPATION`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setOccupationOptions(response.data);\n    } catch (e) {\n      toast.error(\"An error occured while fetching occupation codesets !\", {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    }\n  }, []);\n  const loadRelationships = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/RELATIONSHIP`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setRelationshipOptions(response.data);\n    } catch (e) {\n      toast.error(\"An error occured while fetching relationship codesets !\", {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    }\n  }, []);\n  const loadTopLevelCountry = useCallback(async () => {\n    const response = await axios.get(\n      `${baseUrl}organisation-units/parent-organisation-units/0`,\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n    settopLevelUnitCountryOptions(response.data);\n  }, []);\n  const loadOrganisationUnitsByParentId = async (parentId) => {\n    const response = await axios.get(\n      `${baseUrl}organisation-units/parent-organisation-units/${parentId}`,\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n    return response.data;\n  };\n  const onCountryChange = async (e) => {\n    if (e.target.value) {\n      const stateOptions = await loadOrganisationUnitsByParentId(\n        e.target.value\n      );\n      setStateUnitOptions(stateOptions);\n    } else {\n      setStateUnitOptions([]);\n    }\n  };\n  const onStateChange = async (e) => {\n    if (e.target.value) {\n      const districtOptions = await loadOrganisationUnitsByParentId(\n        e.target.value\n      );\n      setDistrictUnitOptions(districtOptions);\n    } else {\n      setDistrictUnitOptions([]);\n    }\n  };\n\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n        age_now--;\n      }\n      setValue(\"age\", age_now);\n    } else {\n      setValue(\"age\", null);\n    }\n  };\n\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value == \"Actual\") {\n      setAgeDisabled(true);\n    } else if (e.target.value == \"Estimated\") {\n      setAgeDisabled(false);\n    }\n  };\n\n  const handleAgeChange = (e) => {\n    if (!ageDisabled && e.target.value) {\n      setValue(\"age\", e.target.value);\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dob = estDob.add(e.target.value * -1, \"years\");\n      setValue(\"dob\", format(new Date(dob.toDate()), \"yyyy-MM-dd\"));\n      if (calculate_age(format(new Date(dob.toDate()), \"yyyy-MM-dd\")) >= 60) {\n        toggle();\n      }\n    }\n  };\n\n  useEffect(() => {\n    loadSexes();\n    loadMaritalStatus();\n    loadEducation();\n    loadOccupation();\n    loadRelationships();\n    loadTopLevelCountry();\n    getPatient();\n    districtValue();\n  }, [\n    loadSexes,\n    loadMaritalStatus,\n    loadEducation,\n    loadOccupation,\n    loadRelationships,\n    loadTopLevelCountry,\n    getPatient,\n  ]);\n\n  let genderRows = null;\n  let sexRows = null;\n  let maritalStatusRows = null;\n  let educationRows = null;\n  let occupationRows = null;\n  let relationshipRows = null;\n  let topLevelUnitCountryRows = null;\n  let stateRows = null;\n  let districtRows = null;\n  if (sexOptions && sexOptions.length > 0) {\n    sexRows = sexOptions.map((sex, index) => (\n      <option key={sex.id} value={sex.id}>\n        {sex.display}\n      </option>\n    ));\n  }\n  if (maritalStatusOptions && maritalStatusOptions.length > 0) {\n    maritalStatusRows = maritalStatusOptions.map(\n      (maritalStatusOption, index) => (\n        <option\n          key={maritalStatusOption.id}\n          value={maritalStatusOption.id}\n          defaultValue={maritalStatusOption.display}\n        >\n          {maritalStatusOption.display}\n        </option>\n      )\n    );\n  }\n  if (educationOptions && educationOptions.length > 0) {\n    educationRows = educationOptions.map((educationOption, index) => (\n      <option key={educationOption.id} value={educationOption.id}>\n        {educationOption.display}\n      </option>\n    ));\n  }\n  if (occupationOptions && occupationOptions.length > 0) {\n    occupationRows = occupationOptions.map((occupationOption, index) => (\n      <option key={occupationOption.id} value={occupationOption.id}>\n        {occupationOption.display}\n      </option>\n    ));\n  }\n  if (relationshipOptions && relationshipOptions.length > 0) {\n    relationshipRows = relationshipOptions.map((relationshipOption, index) => (\n      <option key={relationshipOption.id} value={relationshipOption.id}>\n        {relationshipOption.display}\n      </option>\n    ));\n  }\n  if (topLevelUnitCountryOptions && topLevelUnitCountryOptions.length > 0) {\n    topLevelUnitCountryRows = topLevelUnitCountryOptions.map(\n      (topLevelUnitCountryOption, index) => (\n        <option\n          key={topLevelUnitCountryOption.id}\n          value={topLevelUnitCountryOption.id}\n        >\n          {topLevelUnitCountryOption.name}\n        </option>\n      )\n    );\n  }\n  if (stateUnitOptions && stateUnitOptions.length > 0) {\n    stateRows = stateUnitOptions.map((stateUnitOption, index) => (\n      <option key={stateUnitOption.id} value={stateUnitOption.id}>\n        {stateUnitOption.name}\n      </option>\n    ));\n  }\n  if (districtUnitOptions && districtUnitOptions.length > 0) {\n    districtRows = districtUnitOptions.map((districtUnitOption, index) => (\n      <option key={districtUnitOption.id} value={districtUnitOption.id}>\n        {districtUnitOption.name}\n      </option>\n    ));\n  }\n\n  const districtValue = () => {\n    let value = \"\";\n    if (\n      Object.keys(patientData).length !== 0 &&\n      patientData.address.address[0].district !== null\n    ) {\n      districtUnitOptions.map((districtUnitOption, index) => {\n        if (districtUnitOption.id === patientData.address.address[0].district) {\n          value = districtUnitOption.name;\n          setDisValue(value);\n        }\n      });\n    }\n    return value;\n  };\n\n  const handleCancel = () => {\n    history.push(\"/\");\n  };\n\n  const checkPhoneNumber = (e, inputName) => {\n    setValue(inputName, e);\n  };\n\n  const alphabetOnly = (e, inputName) => {\n    const result = e.target.value.replace(/[^a-z]/gi, \"\");\n    setValue(inputName, result);\n  };\n\n  return (\n    <>\n      <ToastContainer autoClose={3000} hideProgressBar />\n      <Card className={classes.root}>\n        <CardContent>\n          <div className=\"row mb-12 col-md-12\" style={{ paddingBottom: \"5px\" }}>\n            <div className=\"mb-6 col-md-6\">\n              <Breadcrumbs aria-label=\"breadcrumb\">\n                <Typography style={{ color: \"#992E62\" }}>Patient</Typography>\n                <Typography style={{ color: \"#014d88\" }}>\n                  Registration\n                </Typography>\n              </Breadcrumbs>\n            </div>\n            <div className=\"mb-6 col-md-6\">\n              <Link\n                to={{\n                  pathname: \"/\",\n                  state: \"users\",\n                }}\n              >\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className=\" float-right ms-1\"\n                  style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\n                  startIcon={<TiArrowBack />}\n                >\n                  <span style={{ textTransform: \"capitalize\" }}>Back </span>\n                </Button>\n              </Link>\n            </div>\n          </div>\n          <div className=\"col-xl-12 col-lg-12\">\n            <Form onSubmit={handleSubmit(onSubmit, onError)}>\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                  }}\n                >\n                  <h5\n                    className=\"card-title\"\n                    style={{ color: \"#fff\", fontWeight: \"bolder\" }}\n                  >\n                    {userDetail === null\n                      ? \"Basic Information\"\n                      : \"Edit User Information\"}\n                  </h5>\n                </div>\n\n                <div className=\"card-body\">\n                  <div className=\"basic-form\">\n                    <div className=\"row\">\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"dateOfRegistration\">\n                            Date of Registration*{\" \"}\n                          </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"date\"\n                            name=\"dateOfRegistration\"\n                            id=\"dateOfRegistration\"\n                            max={today}\n                            {...register(\"dateOfRegistration\")}\n                            onChange={(e) => {\n                              if (\n                                new Date(e.target.value) instanceof Date &&\n                                e.target.value != \"\"\n                              ) {\n                                setMaxDOB(\n                                  new Date(e.target.value)\n                                    .toISOString()\n                                    .substr(0, 10)\n                                    .replace(\"T\", \" \")\n                                );\n                              } else {\n                                setMaxDOB(\n                                  new Date()\n                                    .toISOString()\n                                    .substr(0, 10)\n                                    .replace(\"T\", \" \")\n                                );\n                              }\n                            }}\n                            style={{ border: \"1px solid #014d88\" }}\n                            readOnly\n                          />\n                          {errors.dateOfRegistration && (\n                            <p>Enter the registration date</p>\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"patientId\">Hospital Number* </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"hospitalNumber\"\n                            id=\"hospitalNumber\"\n                            autoComplete=\"off\"\n                            onInput={(e) => {\n                              e.target.value = e.target.value.replace(\n                                /\\s/g,\n                                \"\"\n                              );\n                              console.log(e.target.value);\n                              checkHospitalNumber(e.target.value);\n                            }}\n                            onChange={checkHospitalNumber}\n                            {...register(\"hospitalNumber\", {\n                              onChange: (e) => {\n                                checkHospitalNumber(\n                                  e.target.value.replace(/\\s/g, \"\")\n                                );\n                              },\n                            })}\n                            style={{ border: \"1px solid #014d88\" }}\n                            readOnly\n                          />\n                          {checkHospitalNumberError && (\n                            <p>Hospital number has been registered before</p>\n                          )}\n                          {!checkHospitalNumberError &&\n                            errors.hospitalNumber && (\n                              <p>Enter the hospital number</p>\n                            )}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"ninNumber\">\n                            National Identification Number (NIN)\n                          </Label>\n                          <input\n                            className=\"form-control\"\n                            name=\"ninNumber\"\n                            type=\"number\"\n                            {...register(\"ninNumber\")}\n                            id=\"ninNumber\"\n                            autoComplete=\"off\"\n                            onChange={(e) => {\n                              console.log(\"here\");\n                              clearErrors(\"ninNumber\");\n                              e.target.value = e.target.value.replace(\n                                /\\D/g,\n                                \"\"\n                              );\n                              checkNIN(e);\n                              if (e.target.value.length > e.target.maxLength) {\n                                e.target.value = e.target.value.slice(\n                                  0,\n                                  e.target.maxLength\n                                );\n                                clearErrors(\"ninNumber\");\n                              } else if (\n                                e.target.value.length > 0 &&\n                                e.target.value.length < e.target.maxLength\n                              ) {\n                                setError(\"ninNumber\");\n                              } else if (\n                                e.target.value.length <= 0 ||\n                                e.target.value.length == e.target.maxLength\n                              ) {\n                                clearErrors(\"ninNumber\");\n                              }\n                            }}\n                            minLength={11}\n                            maxLength={11}\n                            style={{ border: \"1px solid #014d88\" }}\n                            readOnly\n                          />\n                          {checkNINError && (\n                            <p>NIN has been registered before</p>\n                          )}\n                          {!checkNINError && errors.ninNumber && (\n                            <p>Enter a valid NIN Number</p>\n                          )}\n                        </FormGroup>\n                      </div>\n                      {/*                                            <div className=\"form-group mb-3 col-md-3\">\n                                                <FormGroup>\n                                                    <Label for=\"emrId\">EMR ID *</Label>\n                                                    <input\n                                                        className=\"form-control\"\n                                                        disabled={true}\n                                                        type=\"text\"\n                                                        name=\"emrId\"\n                                                        id=\"emrId\"\n                                                        style={{border: \"1px solid #014d88\"}}\n                                                    />\n                                                </FormGroup>\n                                            </div>*/}\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"firstName\">First Names *</Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"firstName\"\n                            id=\"firstName\"\n                            {...register(\"firstName\", {\n                              onChange: (e) => {\n                                alphabetOnly(e, \"firstName\");\n                              },\n                            })}\n                            style={{ border: \"1px solid #014d88\" }}\n                            readOnly\n                          />\n                          {errors.firstName && <p>First Name is required</p>}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label>Middle Name</Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"middleName\"\n                            id=\"middleName\"\n                            {...register(\"middleName\", {\n                              onChange: (e) => {\n                                alphabetOnly(e, \"middleName\");\n                              },\n                            })}\n                            style={{ border: \"1px solid #014d88\" }}\n                            readOnly\n                          />\n                          {errors.middleName && (\n                            <p>{errors.middleName.message}</p>\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label>Last Name *</Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"lastName\"\n                            id=\"lastName\"\n                            {...register(\"lastName\", {\n                              onChange: (e) => {\n                                alphabetOnly(e, \"lastName\");\n                              },\n                            })}\n                            style={{ border: \"1px solid #014d88\" }}\n                            readOnly\n                          />\n                          {errors.lastName && <p>Last Name is required</p>}\n                        </FormGroup>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>Sex *</Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"sex\"\n                            id=\"sex\"\n                            value={\n                              patientData.sex !== null ? patientData.sex : \" \"\n                            }\n                            style={{ border: \"1px solid #014d88\" }}\n                            readOnly\n                          />\n                          {errors.sex && <p>Select Sex</p>}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-2 col-md-2\">\n                        <FormGroup>\n                          <Label>Date Of Birth</Label>\n                          <div className=\"radio\">\n                            <label>\n                              <input\n                                type=\"radio\"\n                                value=\"Actual\"\n                                name=\"dateOfBirth\"\n                                defaultChecked\n                                {...register(\"dateOfBirth\")}\n                                onChange={(e) => handleDateOfBirthChange(e)}\n                                style={{ border: \"1px solid #014d88\" }}\n                              />{\" \"}\n                              Actual\n                            </label>\n                          </div>\n                          <div className=\"radio\">\n                            <label>\n                              <input\n                                type=\"radio\"\n                                value=\"Estimated\"\n                                name=\"dateOfBirth\"\n                                {...register(\"dateOfBirth\")}\n                                onChange={(e) => handleDateOfBirthChange(e)}\n                                style={{ border: \"1px solid #014d88\" }}\n                              />{\" \"}\n                              Estimated\n                            </label>\n                          </div>\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-2\">\n                        <FormGroup>\n                          <Label>Date</Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"date\"\n                            name=\"dob\"\n                            id=\"dob\"\n                            min={minDOB}\n                            max={maxDOB}\n                            {...register(\"dob\")}\n                            onChange={(e) => {\n                              clearErrors(\"dob\");\n                              if (new Date(e.target.value) instanceof Date) {\n                                console.log(\"date\");\n                                handleDobChange(e);\n                                clearErrors(\"dob\");\n                              } else {\n                                setError(\"dob\");\n                              }\n                            }}\n                            style={{ border: \"1px solid #014d88\" }}\n                            readOnly\n                          />\n                          {errors.dob && (\n                            <p>Enter a valid date of birth (dd/mm/yyyy)</p>\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label>Age  <span style={{ color: \"red\" }}> *</span></Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"number\"\n                            name=\"age\"\n                            id=\"age\"\n                            {...register(\"age\")}\n                            disabled={ageDisabled}\n                            onChange={(e) => handleAgeChange(e)}\n                            style={{ border: \"1px solid #014d88\" }}\n                            readOnly\n                          />\n                        </FormGroup>\n                      </div>\n                    </div>\n\n                    <div className={\"row\"}>\n                      {/*                                            {watchShowAge >=0 &&\n                                            <>*/}\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label>Marital Status *</Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"maritalStatus\"\n                            id=\"maritalStatus\"\n                            value={\n                              Object.keys(patientData).length !== 0 &&\n                              patientData.maritalStatus !== null\n                                ? patientData.maritalStatus.display\n                                : \"\"\n                            }\n                            style={{ border: \"1px solid #014d88\" }}\n                            readOnly\n                          />\n                          {errors.maritalStatus && <p>Select Marital Status</p>}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>Employment Status *</Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"employmentStatus\"\n                            id=\"employmentStatus\"\n                            value={\n                              Object.keys(patientData).length !== 0 &&\n                              patientData.employmentStatus !== null\n                                ? patientData.employmentStatus.display\n                                : \" \"\n                            }\n                            style={{ border: \"1px solid #014d88\" }}\n                            readOnly\n                          />\n                          {errors.employmentStatus && (\n                            <p>Select Employment Status</p>\n                          )}\n                        </FormGroup>\n                      </div>\n                      {/*\n                                            </>\n                                            }\n*/}\n\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>Education Level</Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"highestQualification\"\n                            id=\"highestQualification\"\n                            value={\n                              Object.keys(patientData).length !== 0 &&\n                              patientData.education !== null\n                                ? patientData.education.display\n                                : \"\"\n                            }\n                            style={{ border: \"1px solid #014d88\" }}\n                            readOnly\n                          />\n                          {errors.highestQualification && (\n                            <p>Select the Education Level</p>\n                          )}\n                        </FormGroup>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                  }}\n                >\n                  <h5 className=\"card-title\">Contact Details</h5>\n                </div>\n\n                <div className=\"card-body\">\n                  <div className={\"row\"}>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Phone Number *</Label>\n                        <PhoneInput\n                          containerStyle={{\n                            width: \"100%\",\n                            border: \"1px solid #014d88\",\n                          }}\n                          inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\n                          country={\"ng\"}\n                          masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\n                          placeholder=\"(234)7099999999\"\n                          value={getValues(\"pnumber\")}\n                          onChange={(e) => {\n                            checkPhoneNumber(e, \"pnumber\");\n                          }}\n                          isValid={(value, country) => {\n                            if (value === country.countryCode) {\n                              return true;\n                            } else {\n                              if (value.length < 13) {\n                                errors.pnumber = true;\n                                return false;\n                              } else {\n                                errors.pnumber = false;\n                                return true;\n                              }\n                            }\n                          }}\n                          disabled={true}\n                        />\n\n                        {/*                                                <input\n                                                    className=\"form-control\"\n                                                    type=\"tel\"\n                                                    name=\"pnumber\"\n                                                    id=\"pnumber\"\n                                                    {...register(\"pnumber\",{\n                                                        onChange:(e)=>{checkPhoneNumber(e,'pnumber')}\n                                                    })}\n                                                    placeholder=\"(234)7099999999\"\n                                                    style={{border: \"1px solid #014d88\"}}\n                                                />*/}\n                        {/*errors.pnumber && <p>Phone number is required</p>*/}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label>Alt. Phone Number</Label>\n                        <PhoneInput\n                          containerStyle={{\n                            width: \"100%\",\n                            border: \"1px solid #014d88\",\n                          }}\n                          inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\n                          country={\"ng\"}\n                          masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\n                          placeholder=\"(234)7099999999\"\n                          value={getValues(\"altPhonenumber\")}\n                          onChange={(e) => {\n                            checkPhoneNumber(e, \"altPhonenumber\");\n                          }}\n                          isValid={(value, country) => {\n                            if (value === country.countryCode) {\n                              return true;\n                            } else {\n                              if (value.length < 13) {\n                                errors.altPhonenumber = true;\n                                return \"Enter a valid phone number\";\n                              } else {\n                                errors.altPhonenumber = false;\n                                return true;\n                              }\n                            }\n                          }}\n                          disabled={true}\n                        />\n                        {/*                                                <input\n                                                    className=\"form-control\"\n                                                    type=\"tel\"\n                                                    name=\"altPhoneNumber\"\n                                                    id=\"altPhoneNumber\"\n                                                    {...register(\"altPhonenumber\",{\n                                                        onChange:(e)=>{checkPhoneNumber(e,'altPhonenumber')}\n                                                    })}\n                                                    placeholder=\"(234)7099999999\"\n                                                    style={{border: \"1px solid #014d88\"}}\n                                                />*/}\n                        {errors.altPhonenumber && (\n                          <p>{errors.altPhonenumber.message}</p>\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label>Email</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"email\"\n                          name=\"email\"\n                          id=\"email\"\n                          {...register(\"email\", {\n                            required: true,\n                            validate: handleEmailValidation,\n                          })}\n                          style={{ border: \"1px solid #014d88\" }}\n                          readOnly\n                        />\n                        {errors.email && <p>{errors.email.message}</p>}\n                      </FormGroup>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Country *</Label>\n                        {/* <input\n                                                    className=\"form-control\"\n                                                    type=\"text\"\n                                                    name=\"country\"\n                                                    id=\"country\"\n                                                    value={Object.keys(patientData).length !== 0 &&  patientData.address.address[0]?.countryId === 1 ? \"Nigeria\" : \"\"}\n                                                    style={{border: \"1px solid #014d88\"}}\n                                                    readOnly\n                                                />*/}\n                        <select\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"country\"\n                          id=\"country\"\n                          readOnly\n                          style={{ border: \"1px solid #014d88\" }}\n                          {...register(\"countryId\")}\n                          onChange={(e) => onCountryChange(e)}\n                        >\n                          {/*<option value={\"\"}>Select Country</option>*/}\n                          {topLevelUnitCountryRows}\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>State *</Label>\n                        {/*<input\n                                                    className=\"form-control\"\n                                                    type=\"text\"\n                                                    name=\"stateId\"\n                                                    id=\"stateId\"\n                                                    value={Object.keys(patientData).length !== 0 && patientData.address.address[0].city !== null ? patientData.address.address[0].city : \"\"}\n                                                    style={{border: \"1px solid #014d88\"}}\n                                                    readOnly\n                                                />*/}\n                        <select\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"stateId\"\n                          id=\"stateId\"\n                          readOnly\n                          style={{ border: \"1px solid #014d88\" }}\n                          {...register(\"stateId\")}\n                          onChange={(e) => onStateChange(e)}\n                        >\n                          <option value={\"\"}>Select State</option>\n                          {stateRows}\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Province/District/LGA *</Label>\n                        {/*  <input\n                                                        className=\"form-control\"\n                                                        type=\"text\"\n                                                        name=\"district\"\n                                                        id=\"district\"\n                                                        value={disValue !== \"\" ? disValue : \"\"}\n                                                        style={{border: \"1px solid #014d88\"}}\n                                                        readOnly\n                                                    />*/}\n                        <select\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"district\"\n                          id=\"district\"\n                          readOnly\n                          style={{ border: \"1px solid #014d88\" }}\n                          {...register(\"district\")}\n                        >\n                          <option value={\"\"}>\n                            Select Province/District/LGA\n                          </option>\n                          {districtRows}\n                        </select>\n                        {errors.district && <p>Select Province/District/LGA</p>}\n                      </FormGroup>\n                    </div>\n                  </div>\n\n                  <div className={\"row\"}>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Street Address</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"address\"\n                          id=\"address\"\n                          style={{ border: \"1px solid #014d88\" }}\n                          {...register(\"address\")}\n                          readOnly\n                        />\n                        {errors.address && <p>{errors.address.message}</p>}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-6\">\n                      <FormGroup>\n                        <Label>Landmark</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"landmark\"\n                          id=\"landmark\"\n                          style={{ border: \"1px solid #014d88\" }}\n                          {...register(\"landmark\")}\n                          readOnly\n                        />\n                        {errors.landmark && <p>{errors.landmark.message}</p>}\n                      </FormGroup>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                  }}\n                >\n                  <h5 className=\"card-title\">Relationship / Next Of Kin</h5>\n                </div>\n                <div className=\"card-body\">\n                  <div className=\"row\">\n                    {contacts && contacts.length > 0 && (\n                      <div className=\"col-xl-12 col-lg-12\">\n                        <table style={{ width: \"100%\" }}>\n                          <thead>\n                            <tr>\n                              <th>Relationship Type</th>\n                              <th>Name</th>\n                              <th>Phone</th>\n                              <th>Address</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {contacts.map((item, index) => {\n                              return (\n                                <tr key={item.index}>\n                                  <td>\n                                    {getRelationship(item.relationshipId)}\n                                  </td>\n                                  <td>{getNames(item)}</td>\n                                  <td>\n                                    {getPhoneContactPoint(item.contactPoint)}\n                                  </td>\n                                  <td>{getAddress(item.address)}</td>\n                                  {/*<td>\n                                                                        <button type=\"button\"\n                                                                                className=\"btn btn-default btn-light btn-sm editRow\"\n                                                                                onClick={(e) => handleEditRelative(item, index)}>\n                                                                            <FontAwesomeIcon icon=\"edit\" />\n                                                                        </button>\n                                                                        &nbsp;&nbsp;\n                                                                        <button\n                                                                            type=\"button\"\n                                                                            className=\"btn btn-danger btn-sm removeRow\"\n                                                                            onClick={(e) => handleDeleteRelative(index)}>\n                                                                            <FontAwesomeIcon icon=\"trash\" />\n                                                                        </button>\n                                                                    </td>*/}\n                                </tr>\n                              );\n                            })}\n                          </tbody>\n                        </table>\n                      </div>\n                    )}\n                    <div className=\"col-xl-12 col-lg-12\">\n                      {showRelative && (\n                        <div className=\"card\">\n                          <div className=\"card-body\">\n                            <div className=\"row\">\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"relationshipType\">\n                                    Relationship Type *\n                                  </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"relationshipType\"\n                                    id=\"relationshipType\"\n                                    style={{ border: \"1px solid #014d88\" }}\n                                    {...register(\"relationshipType\")}\n                                  >\n                                    <option value={\"\"}></option>\n                                    {relationshipRows}\n                                  </select>\n                                  {errors.relationshipType && (\n                                    <p>{errors.relationshipType.message}</p>\n                                  )}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"cfirstName\">First Name *</Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"cfirstName\"\n                                    id=\"cfirstName\"\n                                    style={{ border: \"1px solid #014d88\" }}\n                                    {...register(\"cfirstName\", {\n                                      onChange: (e) => {\n                                        alphabetOnly(e, \"cfirstName\");\n                                      },\n                                    })}\n                                  />\n                                  {errors.cfirstName && (\n                                    <p>{errors.cfirstName.message}</p>\n                                  )}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label>Middle Name</Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"cmiddleName\"\n                                    id=\"cmiddleName\"\n                                    style={{ border: \"1px solid #014d88\" }}\n                                    {...register(\"cmiddleName\", {\n                                      onChange: (e) => {\n                                        alphabetOnly(e, \"cmiddleName\");\n                                      },\n                                    })}\n                                  />\n                                  {errors.cmiddleName && (\n                                    <p>{errors.cmiddleName.message}</p>\n                                  )}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label>Last Name </Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"clastName\"\n                                    id=\"clastName\"\n                                    style={{ border: \"1px solid #014d88\" }}\n                                    {...register(\"clastName\", {\n                                      onChange: (e) => {\n                                        alphabetOnly(e, \"clastName\");\n                                      },\n                                    })}\n                                  />\n                                  {errors.clastName && (\n                                    <p>{errors.clastName.message}</p>\n                                  )}\n                                </FormGroup>\n                              </div>\n                            </div>\n\n                            <div className=\"row\">\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"contactPhoneNumber\">\n                                    Phone Number\n                                  </Label>\n                                  <PhoneInput\n                                    containerStyle={{\n                                      width: \"100%\",\n                                      border: \"1px solid #014d88\",\n                                    }}\n                                    inputStyle={{\n                                      width: \"100%\",\n                                      borderRadius: \"0px\",\n                                    }}\n                                    country={\"ng\"}\n                                    onlyCountries={[\"ng\"]}\n                                    masks={{\n                                      ng: \"...-...-....\",\n                                      at: \"(....) ...-....\",\n                                    }}\n                                    placeholder=\"(234)7099999999\"\n                                    value={getValues(\"contactPhoneNumber\")}\n                                    onChange={(e) => {\n                                      checkPhoneNumber(e, \"contactPhoneNumber\");\n                                    }}\n                                    isValid={(value, country) => {\n                                      if (value === country.countryCode) {\n                                        return true;\n                                      } else {\n                                        if (value.length < 13) {\n                                          errors.contactPhoneNumber = true;\n                                          return \"Enter a valid phone number\";\n                                        } else {\n                                          errors.contactPhoneNumber = false;\n                                          return true;\n                                        }\n                                      }\n                                    }}\n                                  />\n                                  {/*                                                                        <input\n                                                                            className=\"form-control\"\n                                                                            type=\"text\"\n                                                                            name=\"contactPhoneNumber\"\n                                                                            id=\"contactPhoneNumber\"\n                                                                            style={{border: \"1px solid #014d88\"}}\n                                                                            {...register(\"contactPhoneNumber\",{\n                                                                                onChange:(e)=>{checkPhoneNumber(e,'contactPhoneNumber')}\n                                                                            })}\n                                                                        />*/}\n                                  //\n                                  {errors.contactPhoneNumber && (\n                                    <p>{errors.contactPhoneNumber.message}</p>\n                                  )}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"contactEmail\">Email</Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"contactEmail\"\n                                    id=\"contactEmail\"\n                                    style={{ border: \"1px solid #014d88\" }}\n                                    {...register(\"contactEmail\", {\n                                      onChange: (e) => {\n                                        checkPhoneNumber(e, \"contactEmail\");\n                                      },\n                                    })}\n                                  />\n                                  {errors.contactEmail && (\n                                    <p>{errors.contactEmail.message}</p>\n                                  )}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"contactAddress\">Address</Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"contactAddress\"\n                                    id=\"contactAddress\"\n                                    style={{ border: \"1px solid #014d88\" }}\n                                    {...register(\"contactAddress\")}\n                                  />\n                                  {errors.contactAddress && (\n                                    <p>{errors.contactAddress.message}</p>\n                                  )}\n                                </FormGroup>\n                              </div>\n                            </div>\n\n                            {/*  <div className=\"row\">\n                                                                <div className=\"\">\n                                                                    <MatButton\n                                                                        type=\"button\"\n                                                                        variant=\"contained\"\n                                                                        color=\"primary\"\n                                                                        className={classes.button}\n                                                                        onClick={handleSaveRelationship}\n                                                                        style={{backgroundColor:'#014d88',color:'#fff'}}\n                                                                    >\n                                                                        Add\n                                                                    </MatButton>\n                                                                    <MatButton\n                                                                        type=\"button\"\n                                                                        variant=\"contained\"\n                                                                        color=\"secondary\"\n                                                                        className={classes.button}\n                                                                        onClick={handleCancelSaveRelationship}\n                                                                        style={{backgroundColor:'#992E62',color:'#fff'}}\n                                                                    >\n                                                                        Cancel\n                                                                    </MatButton>\n                                                                </div>\n                                                            </div> */}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  {/*\n                                    <div className=\"row\">\n                                        <MatButton\n                                            type=\"button\"\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            className={classes.button}\n                                            startIcon={<AddIcon />}\n                                            onClick={handleAddRelative}\n                                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\n                                        >\n                                            Add a Relative/Next Of Kin\n                                        </MatButton>\n                                    </div>\n                                    */}\n                </div>\n              </div>\n\n              {saving ? <Spinner /> : \"\"}\n\n              <br />\n              {/*!checkHospitalNumberError &&\n                                <>\n                                    {userDetail ===null ? (\n                                            <MatButton\n                                                type=\"submit\"\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.button}\n                                                startIcon={<SaveIcon />}\n                                                style={{backgroundColor:'#014d88',color:'#fff'}}\n                                            >\n                                                {!saving ? (\n                                                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                                                ) : (\n                                                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\n                                                )}\n                                            </MatButton>\n                                        )\n                                        :\n                                        (\n                                            <MatButton\n                                                type=\"submit\"\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.button}\n                                                startIcon={<SaveIcon />}\n                                                style={{backgroundColor:'#014d88',color:'#fff'}}\n                                            >\n                                                {!saving ? (\n                                                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                                                ) : (\n                                                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\n                                                )}\n                                            </MatButton>\n                                        )\n                                    }\n                                </>\n\n                            }\n\n                            <MatButton\n                                variant=\"contained\"\n                                className={classes.button}\n                                startIcon={<CancelIcon />}\n                                onClick={handleCancel}\n                                style={{backgroundColor:'#992E62',color:'#fff'}}\n                            >\n                                <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\n                            </MatButton> */}\n            </Form>\n          </div>\n        </CardContent>\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default ViewPatient;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PatientDashboard.js",["272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316"],"import React, {useCallback, useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport ButtonMui from \"@material-ui/core/Button\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Col} from \"reactstrap\";\nimport { Step, Label, Segment, Icon } from \"semantic-ui-react\";\nimport PatientCard from './PatientCard'\nimport { useHistory } from \"react-router-dom\";\nimport { Tab } from 'semantic-ui-react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport Box from '@mui/material/Box';\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport axios from \"axios\";\nimport {token, url as baseUrl} from \"../../../api\";\nimport Swal from \"sweetalert2\";\nimport {Controller, useForm} from \"react-hook-form\";\nimport {Button, Card, CardContent, FormControl, Grid, MenuItem, Paper, TextField, Typography} from \"@mui/material\";\nimport {format} from 'date-fns';\nimport { toast} from \"react-toastify\";\nimport MaterialTable from 'material-table';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\nimport MatButton from \"@material-ui/core/Button\";\nimport {TiArrowBack} from \"react-icons/ti\";\nimport Biometrics from \"./Biometrics\";\nimport moment from \"moment\";\nimport DualListBox from \"react-dual-listbox\";\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\nimport _ from 'lodash';\n\nimport { DesktopDateTimePicker } from '@mui/x-date-pickers/DesktopDateTimePicker';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport Stack from '@mui/material/Stack';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        marginBottom: 20,\n        flexGrow: 1,\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n    },\n    icon: {\n        verticalAlign: 'bottom',\n        height: 20,\n        width: 20,\n    },\n    details: {\n        alignItems: 'center',\n    },\n    column: {\n        flexBasis: '20.33%',\n    },\n    helper: {\n        borderLeft: `2px solid ${theme.palette.divider}`,\n        padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\n    },\n    link: {\n        color: theme.palette.primary.main,\n        textDecoration: 'none',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n    checkinModal:{\n        \"& .modal-dialog\":{\n            maxWidth:\"1000px\"\n        },\n        \"& .ui.label\":{\n            backgroundColor:\"#fff\",\n            fontSize:'16px',\n            color:'#014d88',\n            fontWeight:'bold',\n            textAlign:'left'\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    checkInDatePicker:{\n        '& .MuiFormControl-root.MuiTextField-root':{\n            border:'1px solid #eee'\n        }\n    }\n}));\nconst appointmentColumns = [\n    { field: 'id', headerName: 'ID', width: 90 },\n    {\n        field: 'firstName',\n        headerName: 'First name',\n        width: 150,\n        editable: true,\n    },\n    {\n        field: 'lastName',\n        headerName: 'Last name',\n        width: 150,\n        editable: true,\n    },\n    {\n        field: 'age',\n        headerName: 'Age',\n        type: 'number',\n        width: 110,\n        editable: true,\n    },\n\n];\n\nconst appointments = [\n    // { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n\n];\n\n\nlet newDate = new Date()\nfunction PatientDashboard(props) {\n    const userDetail = props.location && props.location.state ? props.location.state.user : null;\n    const [loading, setLoading] = useState('');\n    let history = useHistory();\n    const classes = useStyles();\n    const [checkInDate,setCheckInDate]=useState(new Date());\n    const [checkOutDate,setCheckOutDate]=useState(new Date());\n    const [today, setToday] = useState(new Date().toISOString().substr(0, 10).replace('T', ' '));\n    const patientObj = history.location && history.location.state ? history.location.state.patientObj : {};\n    const permissions = history.location && history.location.state ? history.location.state.permissions : [];\n    const { handleSubmit, control } = useForm();\n    const [modal, setModal] = useState(false);\n    const [allServices, setAllServices] = useState(null);\n    const [checkinStatus, setCheckinStatus]= useState(false)\n    const [modalCheckOut, setModalCheckOut] = useState(false);\n    const [services, setServices]= useState([]);\n    const [selectedServices, setSelectedServices]= useState({\"selected\":[]});\n    const [patientVisits, setPatientVisits]= useState([]);\n    const [patientBiometricStatus, setPatientBiometricStatus]= useState(patientObj.biometricStatus);\n    const [biometricsModuleInstalled,setBiometricsModuleInstalled]=useState(false);\n\n    const [checkOutObj, setCheckOutObj] = useState({\n        personId: \"\",\n        visitStartDate:format(new Date(newDate), 'yyyy-MM-dd hh:mm')\n    })\n    const [checkInObj, setCheckInObj] = useState({\n        serviceIds:\"\",\n        visitDto: {\n            personId: patientObj.id,\n            checkInDate: format(new Date(newDate), 'yyyy-MM-dd hh:mm')\n        }\n    })\n\n    const updatePatientBiometricStatus = (bioStatus) =>{\n        setPatientBiometricStatus(bioStatus);\n    }\n    const loadServices = useCallback(async () => {\n        try {\n            const response = await axios.get(`${baseUrl}patient/post-service`, { headers: {\"Authorization\" : `Bearer ${token}`} });\n            //setServices(response.data);\n            setAllServices(response.data);\n            setServices(\n                Object.entries(response.data).map(([key, value]) => ({\n                    label: value.moduleServiceName,\n                    value: value.moduleServiceCode,\n                }))\n            );\n/*            setSelectedServices(\n                _.uniq(_.map(userDetail.applicationUserOrganisationUnits, 'organisationUnitName'))\n            )*/\n        } catch (e) {\n            await Swal.fire({\n                icon: 'error',\n                title: 'Oops...',\n                text: 'An error occurred fetching services!',\n            });\n        }\n    }, []);\n    const loadPatientVisits = useCallback(async () => {\n        try {\n            const response = await axios.get(`${baseUrl}patient/visit/visit-by-patient/${patientObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\n            setPatientVisits(response.data);\n            response.data.map((visits)=> {\n                if(visits.checkOutDate===null){\n                    setCheckinStatus(true)\n                }\n            })\n\n\n        } catch (e) {\n            await Swal.fire({\n                icon: 'error',\n                title: 'Oops...',\n                text: 'An error occurred fetching services!',\n            });\n        }\n    }, []);\n\n    const checkForBiometricsModule =()=>{\n        axios\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                if(response.data===true){\n                    setBiometricsModuleInstalled(true);\n                }\n            })\n            .catch((error) => {\n                //console.log(error);\n            });\n\n    }\n    const loadUserDetails = () =>{\n        axios.get(`${baseUrl}account`).then((response)=>{\n\n        }).catch((error)=>{\n\n        })\n    }\n\n    useEffect(() => {\n        loadUserDetails();\n        loadServices();\n        loadPatientVisits();\n        checkForBiometricsModule();\n    }, [loadServices, loadPatientVisits]);\n\n    let visitTypesRows = null;\n    if (services && services.length > 0) {\n        visitTypesRows = services.map((service, index) => (\n            <MenuItem key={service.moduleServiceCode} value={service.moduleServiceCode}>{service.moduleServiceName}</MenuItem>\n        ));\n    }\n\n    const onChangeDate = (date) => {\n        console.log(date.target.value)\n        const newDate = moment(new Date(date.target.value)).format(\"yyyy-MM-dd hh:mm\");\n        setCheckInDate(newDate);\n        console.log(newDate);\n    };\n\n\n    const columns = [\n        {\n            field: 'checkInDate',\n            headerName: 'Checked In Date',\n            width: 200,\n            editable: false,\n        },\n        {\n            field: 'checkOutDate',\n            headerName: 'Check Out Date',\n            width: 200,\n            editable: false,\n        },\n        {\n            field: 'service',\n            headerName: 'Service',\n            width: 200,\n            editable: false,\n        },\n        {\n            field: 'status',\n            headerName: 'Status',\n            width: 200,\n            editable: false,\n        }\n    ];\n\n    const panes = [\n        { menuItem: 'Visits', render: () =>\n                <Tab.Pane>\n\n                    <MaterialTable\n                        title=\"\"\n                        columns={[\n                            {\n                                title: \"Check-In Date\",\n                                field: \"checkInDate\", filtering: false,\n                                headerStyle: {\n                                    backgroundColor: \"#039be5\",\n                                    border:'2px solid #fff',\n                                    paddingRight:'30px'\n                                }\n                            },\n                            { title: \"Check-Out Date\", field: \"checkOutDate\", filtering: false  },\n                            { title: \"Service\", field: \"service\", filtering: false  },\n                            { title: \"Status\", field: \"status\", filtering: false },\n                        ]}\n                        isLoading={loading}\n                        data={patientVisits.map((row) => ({\n                            checkInDate: moment(row.checkInDate).format(\"YYYY-MM-DD h:mm a\"),\n                            checkOutDate: row.checkOutDate?moment(row.checkOutDate).format(\"YYYY-MM-DD h:mm a\"):\"Visit Ongoing\",\n                            service:row.service,\n                            status:(<h6 style={{color:row.status ==='COMPLETED' ? 'green' : 'red'}}>{row.status}</h6>),\n\n                        }))}\n\n                        options={{\n                            headerStyle: {\n                                backgroundColor: \"#014d88\",\n                                color: \"#fff\",\n                                fontSize:'16px',\n                                padding:'10px',\n                                fontWeight:'bold'\n                            },\n                            rowStyle: {\n                                color: 'rgba(0,0,0,.87)',\n                                fontFamily:`'poppins', sans-serif`\n                            },\n                            searchFieldStyle: {\n                                width : '200%',\n                                margingLeft: '250px',\n                            },\n                            filtering: false,\n                            exportButton: false,\n                            searchFieldAlignment: 'left',\n                            pageSizeOptions:[10,20,100],\n                            pageSize:10,\n                            debounceInterval: 400\n                        }}\n                    />\n                </Tab.Pane>\n        },\n\n/*        { menuItem: permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ? 'Appointments' : \"\", render: () =>\n                permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ?\n                    <Tab.Pane>\n                        <div style={{ height: 400, width: '100%' }}>\n                            <DataGrid\n                                rows={appointments}\n                                columns={appointmentColumns}\n                                pageSize={5}\n                                rowsPerPageOptions={[5]}\n                                checkboxSelection\n                                disableSelectionOnClick\n                            />\n                        </div>\n                    </Tab.Pane>\n                    :\"\"\n        },*/\n\n                { menuItem: permissions.includes('view_patient_appointment') && biometricsModuleInstalled || permissions.includes(\"all_permission\")  && biometricsModuleInstalled? 'Biometrics' : \"\", render: () =>\n                        permissions.includes('view_patient_appointment') || permissions.includes(\"all_permission\") ?\n                            <Tab.Pane>\n                                <div style={{ minHeight: 400, width: '100%' }}>\n                                    <Biometrics patientId={patientObj.id} updatePatientBiometricStatus={updatePatientBiometricStatus}/>\n                                </div>\n                            </Tab.Pane>\n                            :\"\"\n                }\n\n\n\n    ];\n\n    const handleCheckIn = () => {\n        setModal(true);\n    };\n    const handleCheckOut = () => {\n        setModalCheckOut(true);\n    };\n\n    const onCancelCheckIn = () => {\n        setModal(false);\n    };\n    const onCancelCheckOut = () => {\n        setModalCheckOut(false);\n    };\n    const onDelete = () => {\n\n    };\n/*    const handleInputChangeService = (e) => {\n        setSelectedServices({ ...selectedServices, [e.target.name]: e.target.value });\n    };*/\n    //console.lo(selectedServices)\n\n    const onSubmit = async (data) => {\n        try {\n            const today = new Date();\n            const visitDetails = await axios.get(`${baseUrl}patient/visit/visit-detail/${patientObj.id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\n            const visitDetail = visitDetails.data;\n            const pendingVisit = visitDetail.find(obj => obj.status == \"PENDING\");\n            let visit = null;\n            if (!pendingVisit) {\n                const visitResponse = await axios.post(`${baseUrl}patient/visit`, {\n                    \"personId\": patientObj.id,\n                    \"visitStartDate\": today\n                }, { headers: {\"Authorization\" : `Bearer ${token}`} });\n                visit = visitResponse.data;\n            } else {\n                visit = pendingVisit;\n            }\n            await axios.post(`${baseUrl}patient/encounter`, {\n                \"encounterDate\": today,\n                \"personId\": patientObj.id,\n                \"serviceCode\": data.VisitType,\n                \"status\": \"PENDING\",\n                \"visitId\": visit.id\n            }, { headers: {\"Authorization\" : `Bearer ${token}`} });\n            setModal(false);\n            await Swal.fire({\n                icon: 'success',\n                text: 'CheckedIn successfully',\n                timer: 1500\n            });\n        } catch (e) {\n            await Swal.fire({\n                icon: 'error',\n                title: 'Oops...',\n                text: 'An error occurred while checking in Patient!',\n            });\n        }\n    };\n    const onError = async () => {\n        await Swal.fire({\n            icon: 'error',\n            title: 'Oops...',\n            text: 'An error occurred while checking in Patient!',\n        });\n    };\n\n    let checkInServicesID = [];\n    /**** Submit Button For CheckIN  */\n    const handleSubmitCheckIn = (e) => {\n        e.preventDefault();\n        //Check if selected service object is empty before creating visit and posting.\n        let m = moment(checkInDate, \"yyyy-MM-DD hh:mm\").format('yyyy-MM-DD H:mm');\n        if(selectedServices.selected.length > 0 && moment(m).isValid()){\n            selectedServices.selected.length > 0 && selectedServices.selected.map((service)=> {\n                checkInServicesID.push(_.find(allServices,{moduleServiceCode:service}).id)\n            });\n\n            checkInObj.serviceIds= checkInServicesID\n            //Ensure date time is in 24hr format\n            checkInObj.visitDto.checkInDate = moment(checkInDate, \"yyyy-MM-DD hh:mm\").format('yyyy-MM-DD HH:mm');\n            axios.post(`${baseUrl}patient/visit/checkin`, checkInObj,\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\n\n            )\n                .then(response => {\n                    toast.success(\"Patient Check-In successful\");\n                    setCheckinStatus(true)\n                    onCancelCheckIn()\n                    loadPatientVisits()\n                })\n                .catch(error => {\n                    console.log(error)\n                    toast.error(\"Something went wrong\");\n                    onCancelCheckIn()\n                });\n        }else{\n            toast.error(\"Kindly check the form for a valid date and selected services\");\n        }\n\n    }\n\n    /**** Submit Button Processing  */\n    const handleSubmitCheckOut = (e) => {\n        e.preventDefault();\n        const getVisitID= patientVisits.find((visits)=> visits.status==='PENDING')\n\n        axios.put(`${baseUrl}patient/visit/checkout/${getVisitID.id}`,getVisitID.id,\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\n\n        )\n            .then(response => {\n                toast.success(\"Record save successful\");\n                setCheckinStatus(false)\n                onCancelCheckOut()\n                loadPatientVisits()\n            })\n            .catch(error => {\n                console.log(error)\n                toast.error(\"Something went wrong\");\n                onCancelCheckOut()\n            });\n    }\n    const onServiceSelect = (selectedValues) => {\n        setSelectedServices({\"selected\":selectedValues});\n    };\n\n    return (\n        <div className={classes.root}>\n            <Card>\n                <CardContent>\n\n                    <PatientCard patientObj={patientObj} permissions={permissions} patientBiometricStatus={patientBiometricStatus}/>\n                    <Card style={{marginTop:'10px',boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'}}>\n                        <CardContent>\n                            <div className=\"row\">\n                                <div className=\"mb-3 col-md-3\">\n                                    &nbsp;\n                                </div>\n                                <div className=\"mb-3 col-md-3\">\n                                    &nbsp;\n                                </div>\n                                <div className=\"mb-3 col-md-3\">\n                                    &nbsp;\n                                </div>\n                                <div className=\"mb-3 col-md-3\">\n\n                                    <Link to={\"/\"} >\n                                        <MatButton\n                                            className=\" float-right mr-1\"\n                                            variant=\"contained\"\n                                            floated=\"left\"\n                                            startIcon={<TiArrowBack  />}\n                                            style={{backgroundColor:\"rgb(153, 46, 98)\", color:'#fff', height:'35px'}}\n                                        >\n                                            <span style={{ textTransform: \"capitalize\" }}>Back</span>\n                                        </MatButton>\n                                    </Link>\n\n                                    {permissions.includes('patient_check_in') || permissions.includes(\"all_permission\") ? (\n                                            <>\n                                                {checkinStatus===false ? (\n                                                        <Button\n                                                            variant=\"contained\"\n                                                            style={{ backgroundColor: \"rgb(4, 196, 217)\", fontSize:'14PX', fontWeight:'bold', height:'35px' }}\n                                                            onClick={handleCheckIn}\n                                                            className=\" float-right mr-1\"\n                                                        >\n                                                            <span style={{ textTransform: \"capitalize\" }}>CheckIn</span>\n                                                        </Button>\n                                                    )\n                                                    :\n                                                    \"\"\n                                                }\n                                            </>\n                                        )\n                                        :\"\"\n                                    }\n                                    {checkinStatus===true ? (\n                                            <Button\n                                                variant=\"contained\"\n                                                style={{ backgroundColor: \"green\", fontSize:'14PX', fontWeight:'bold', height:'35px' }}\n                                                onClick={handleCheckOut}\n                                                className=\" float-right mr-1\"\n                                            >\n                                                <span style={{ textTransform: \"capitalize\" }}>Check Out</span>\n                                            </Button>\n                                        )\n                                        :\n                                        \"\"\n                                    }\n\n                                </div>\n                            </div>\n                            <Tab panes={panes} />\n                        </CardContent>\n                    </Card>\n\n\n                </CardContent>\n            </Card>\n            <Modal  size=\"lg\" style={{maxWidth: '900px'}} isOpen={modal} toggle={onCancelCheckIn}  className={classes.checkinModal}>\n                    <ModalHeader toggle={onCancelCheckIn}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#992E62'}}>Select Check-In Service</h5></ModalHeader>\n                    <ModalBody>\n                        <form onSubmit={handleSubmitCheckIn}>\n                            <Paper\n                                style={{\n                                    display: \"grid\",\n                                    gridRowGap: \"20px\",\n                                    padding: \"20px\",\n                                    margin: \"10px 10px\",\n                                }}>\n                                <Grid container spacing={2}>\n                                    <Grid item xs={12}>\n                                        <FormGroup style={{width:'100%'}} className={classes.checkInDatePicker}>\n                                            <LocalizationProvider dateAdapter={AdapterDateFns} >\n                                                <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'18px'}}>Check-In Date *</Label>\n                                                <DesktopDateTimePicker\n                                                    renderInput={(params) =>\n                                                        <TextField\n                                                            {...params}\n\n                                                            sx={{\n                                                                /*label:{ color:'#014d88',fontWeight:'bolder',fontSize:'18px' }*/\n                                                                input:{fontSize:'14px'},\n                                                            }}\n                                                            fullWidth\n                                                        />\n                                                    }\n                                                    value={checkInDate}\n                                                    onChange={(newValue) => {\n                                                        setCheckInDate(newValue);\n                                                    }}\n                                                    maxDate={new Date()}\n                                                    maxTime={new Date()}\n                                                    style={{width:'100%'}}\n                                                />\n                                            </LocalizationProvider>\n                                        </FormGroup>\n                                    </Grid>\n                                    {/*                                <Grid item xs={8}>\n\n                                    <FormControl >\n                                        <Label for=\"dateOfRegistration\">Select service </Label>\n                                        <Autocomplete\n                                            multiple\n                                            id=\"checkboxes-tags-demo\"\n                                            options={services}\n                                            //disableCloseOnSelect\n                                            getOptionLabel={(option) => option.moduleServiceName}\n                                            onChange={(e, i) => {\n                                                console.log(i)\n                                                setSelectedServices({ ...selectedServices, checkInServices: i });\n                                            }}\n                                            renderOption={(props, option, { selected }) => (\n                                                <li {...props}>\n                                                    <Checkbox\n                                                        icon={icon}\n                                                        checkedIcon={checkedIcon}\n                                                        style={{ marginRight: 8 }}\n                                                        checked={selected}\n                                                    />\n                                                    {option.moduleServiceName}\n                                                </li>\n                                            )}\n                                            style={{ width: 400 }}\n                                            renderInput={(params) => (\n                                                <TextField {...params} label=\"Services\" />\n                                            )}\n                                        />\n\n                                    </FormControl>\n                                </Grid>*/}\n                                    <Grid item xs={12}>\n                                        <FormGroup>\n                                            <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'18px'}}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#992E62'}}>Check-In Service *</h5></Label>\n                                            <DualListBox\n                                                options={services}\n                                                onChange={onServiceSelect}\n                                                selected={selectedServices.selected}\n                                            />\n                                        </FormGroup>\n                                    </Grid>\n                                </Grid>\n                                <Grid container spacing={2}>\n                                    <Grid item xs={12}>\n                                        <Button type={\"submit\"} variant=\"contained\" color={\"primary\"}>Submit</Button>\n                                    </Grid>\n                                </Grid>\n                            </Paper>\n                        </form>\n                    </ModalBody>\n            </Modal>\n            {/* Modal for CheckOut Patient */}\n            <Modal isOpen={modalCheckOut} toggle={onCancelCheckOut} className={classes.checkinModal} style={{maxWidth: '900px',height:\"800px\"}}>\n                <ModalHeader toggle={onCancelCheckOut}><h5 style={{fontWeight:\"bold\",fontSize:'30px',color:'#014d88'}}>Check Out </h5></ModalHeader>\n                <ModalBody>\n                    <form >\n                        <Paper\n                            style={{\n                                display: \"grid\",\n                                gridRowGap: \"20px\",\n                                padding: \"20px\",\n                                margin: \"10px 10px\",\n                            }}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <h5 style={{color:'#992E62',fontSize:\"20px\", fontWeight:'bold'}}>Are you sure you want to check-out patient?</h5>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <FormGroup style={{width:'100%'}} className={classes.checkInDatePicker}>\n                                        <LocalizationProvider dateAdapter={AdapterDateFns} >\n                                            <Label for=\"post-services\" style={{color:'#014d88',fontWeight:'bolder',fontSize:'16px'}}>Check-Out Date *</Label>\n                                            <DesktopDateTimePicker\n                                                renderInput={(params) =>\n                                                    <TextField\n                                                        {...params}\n\n                                                        sx={{\n                                                            /*label:{ color:'#014d88',fontWeight:'bolder',fontSize:'18px' }*/\n                                                            input:{fontSize:'14px'},\n                                                        }}\n                                                        fullWidth\n                                                    />\n                                                }\n                                                value={checkOutDate}\n                                                onChange={(newValue) => {\n                                                    setCheckOutDate(newValue);\n                                                }}\n                                                maxDate={new Date()}\n                                                maxTime={new Date()}\n                                                style={{width:'100%'}}\n                                            />\n                                        </LocalizationProvider>\n                                    </FormGroup>\n                                </Grid>\n\n                            </Grid>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <Button type={\"submit\"} onClick={handleSubmitCheckOut} variant=\"contained\" color={\"primary\"}>Yes</Button>\n                                    <Button  onClick={onCancelCheckOut} variant=\"contained\" style={{backgroundColor:'#992E62',color:\"#fff\",marginLeft:\"10px\"}}>Cancel</Button>\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </form>\n                </ModalBody>\n            </Modal>\n            {/* End of Checkout Modal */}\n        </div>\n    );\n}\n\nexport default PatientDashboard;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\biometrics\\index.js",["317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport MatButton from \"@material-ui/core/Button\";\nimport { TiArrowBack } from \"react-icons/ti\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  Button,\n  Card,\n  CardContent,\n  FormControl,\n  Grid,\n  MenuItem,\n  Paper,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PatientsCard from \"../PatientsCard\";\nimport ClientDashboard from \"./index\";\nimport PersonDemographics from \"../PersonDemographics\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport { Tab } from \"semantic-ui-react\";\nimport MaterialTable from \"material-table\";\nimport Biometrics from \"../Biometrics\";\nimport ReCaptureBiometric from \"../ReCaptureBiometric\";\nimport PreviousRecapture from \"../PreviousRecapture\";\nimport moment from \"moment\";\nimport Swal from \"sweetalert2\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    marginBottom: 20,\n    flexGrow: 1,\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: \"bottom\",\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: \"center\",\n  },\n  column: {\n    flexBasis: \"20.33%\",\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n  checkinModal: {\n    \"& .modal-dialog\": {\n      maxWidth: \"1000px\",\n    },\n    \"& .ui.label\": {\n      backgroundColor: \"#fff\",\n      fontSize: \"16px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n      textAlign: \"left\",\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  checkInDatePicker: {\n    \"& .MuiFormControl-root.MuiTextField-root\": {\n      border: \"1px solid #eee\",\n    },\n  },\n}));\n\nfunction Index(props) {\n  const userDetail =\n    props.location && props.location.state ? props.location.state.user : null;\n  const [loading, setLoading] = useState(\"\");\n  let history = useHistory();\n  const classes = useStyles();\n  const patientObj =\n    history.location && history.location.state\n      ? history.location.state.patientObj\n      : {};\n  const permissions =\n    history.location && history.location.state\n      ? history.location.state.permissions\n      : [];\n  const [patientBiometricStatus, setPatientBiometricStatus] = useState(\n    patientObj.biometricStatus\n  );\n  const [biometricsModuleInstalled, setBiometricsModuleInstalled] =\n    useState(false);\n  const [patientVisits, setPatientVisits] = useState([]);\n  const [checkinStatus, setCheckinStatus] = useState(false);\n\n  const updatePatientBiometricStatus = (bioStatus) => {\n    setPatientBiometricStatus(bioStatus);\n  };\n\n  const panes = [\n    // {\n    //   menuItem:\n    //     (permissions.includes(\"view_patient_appointment\") &&\n    //       biometricsModuleInstalled) ||\n    //     (permissions.includes(\"all_permission\") && biometricsModuleInstalled)\n    //       ? \"Biometrics\"\n    //       : \"\",\n    //   render: () =>\n    //     permissions.includes(\"view_patient_appointment\") ||\n    //     permissions.includes(\"all_permission\") ? (\n    //       <Tab.Pane>\n    //         <div style={{ minHeight: 400, width: \"100%\" }}>\n    //           <Biometrics\n    //             patientObj={patientObj}\n    //             age={patientObj.dateOfBirth}\n    //             patientId={patientObj.id}\n    //             updatePatientBiometricStatus={updatePatientBiometricStatus}\n    //           />\n    //         </div>\n    //       </Tab.Pane>\n    //     ) : (\n    //       \"\"\n    //     ),\n    // },\n\n    {\n      menuItem: \"Recapture Biometrics\",\n      render: () => (\n        <Tab.Pane>\n          <div style={{ minHeight: 400, width: \"100%\" }}>\n            <PreviousRecapture\n              patientObj={patientObj}\n              age={patientObj.dateOfBirth}\n              patientId={patientObj.id}\n              updatePatientBiometricStatus={updatePatientBiometricStatus}\n            />\n          </div>\n        </Tab.Pane>\n      ),\n    },\n    // {\n    //   menuItem: \"Recapture\",\n    //   render: () => (\n    //     <Tab.Pane>\n    //       <div style={{ minHeight: 400, width: \"100%\" }}>\n    //         <ReCaptureBiometric\n    //           patientObj={patientObj}\n    //           age={patientObj.dateOfBirth}\n    //           patientId={patientObj.id}\n    //           updatePatientBiometricStatus={updatePatientBiometricStatus}\n    //         />\n    //       </div>\n    //     </Tab.Pane>\n    //   ),\n    // },\n  ];\n\n  const checkForBiometricsModule = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (response.data === true) {\n          setBiometricsModuleInstalled(true);\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    checkForBiometricsModule();\n  }, []);\n  return (\n    <div className={classes.root}>\n      <div\n        className=\"mb-6 col-md-6\"\n        style={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}\n      >\n        <Breadcrumbs aria-label=\"breadcrumb\">\n          <Typography style={{ color: \"#992E62\" }}>Patient</Typography>\n          <Typography style={{ color: \"#014d88\" }}>Dashboard</Typography>\n        </Breadcrumbs>\n      </div>\n      <Card>\n        <CardContent>\n          {/* <PersonDemographics patientObj={patientObj} permissions={permissions} patientBiometricStatus={patientObj.biometricStatus}/> */}\n          <PatientsCard\n            patientObj={patientObj}\n            permissions={permissions}\n            patientBiometricStatus={patientObj.biometricStatus}\n          />\n          <Card style={{ marginTop: \"5px\" }}>\n            <div>\n              <Link to={\"/\"}>\n                <MatButton\n                  className=\" float-right mr-1\"\n                  variant=\"contained\"\n                  floated=\"left\"\n                  startIcon={<TiArrowBack />}\n                  style={{\n                    backgroundColor: \"rgb(153, 46, 98)\",\n                    color: \"#fff\",\n                    height: \"35px\",\n                  }}\n                >\n                  <span style={{ textTransform: \"capitalize\" }}>Back</span>\n                </MatButton>\n              </Link>\n            </div>\n            <CardContent>\n              <Tab panes={panes} />\n            </CardContent>\n          </Card>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default Index;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\index.js",["341","342","343","344","345","346","347","348","349"],"import React, { useEffect, useState } from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport { Card, CardBody } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport { FaUserPlus, FaFingerprint } from \"react-icons/fa\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../api\";\nimport { Tab } from \"semantic-ui-react\";\nimport RecallPatient from \"./RecallPatient\";\nimport PatientBiometrics from \"./PatientBiometrics\";\nimport Pims from \"./Pims\";\nimport PatientList from \"./Home/PatientList\";\nimport BiometricsCapture from \"./Home/Biometrics\";\nimport Typography from \"@mui/material/Typography\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport CheckedInPatients from \"./Home/CheckedInPatients\";\nimport MigrationDQA from \"./MigrationDQA\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& a\": {\n      textDecoration: \"none !important\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\nfunction Index(props) {\n  const classes = useStyles();\n  const [patients, setPatients] = useState([]);\n  const [permissions, setPermissions] = useState([]);\n  const [loading, setLoading] = useState(\"\");\n  const [modal, setModal] = useState(false);\n  const [patient, setPatient] = useState(false);\n  const [patientDetails, setPatientDetails] = useState(null);\n  const [pimsEnrollment, setPimsEnrollment] = useState([]);\n  const [enablePPI, setEnablePPI] = useState(true);\n  const [modalRecall, setModalRecall] = useState(false);\n  const toggleRecall = () => {\n    setPatientDetails(null);\n    setPimsEnrollment([]);\n    setModalRecall(!modalRecall);\n  };\n\n  const toggle = (id) => {\n    const patient = patients.find((obj) => obj.id == id);\n    setPatient(patient);\n    setModal(!modal);\n  };\n  useEffect(() => {\n    userPermission();\n  }, []);\n  //Get list of Finger index\n  const userPermission = () => {\n    axios\n      .get(`${baseUrl}account`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setPermissions(response.data.permissions);\n      })\n      .catch((error) => {});\n  };\n  const enablePPIColumns = () => {\n    setEnablePPI(!enablePPI);\n  };\n  const panes = [\n    {\n      menuItem: \"Clients\",\n      render: () => (\n        <Tab.Pane>\n          <PatientList permissions={permissions} />\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: \"Checked-In\",\n      render: () => (\n        <Tab.Pane>\n          <CheckedInPatients permissions={permissions} />\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: \"Patient Biometrics\",\n      render: () => (\n        <Tab.Pane>\n          <BiometricsCapture permissions={permissions} />\n        </Tab.Pane>\n      ),\n    },\n    // {\n    //   menuItem: \"PIMS\",\n    //   render: () => (\n    //     <Tab.Pane>\n    //       <Pims permissions={permissions} />\n    //     </Tab.Pane>\n    //   ),\n    // },\n    {\n      menuItem: \"Migration DQA\",\n      render: () => (\n        <Tab.Pane>\n          <MigrationDQA permissions={permissions} />\n        </Tab.Pane>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <div className={classes.root}>\n        <ToastContainer autoClose={3000} hideProgressBar />\n        {permissions.length > 0 && (\n          <Card>\n            <CardBody>\n              <div className=\"row mb-12 col-md-12\">\n                <div className=\"mb-6 col-md-6\">\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography style={{ color: \"#992E62\" }}>\n                      Patient\n                    </Typography>\n                    <Typography style={{ color: \"#014d88\" }}>Home</Typography>\n                  </Breadcrumbs>\n                </div>\n                <div className=\"mb-6 col-md-6\">\n                  {permissions.includes(\"view_patient\") ||\n                  permissions.includes(\"all_permission\") ? (\n                    <Link to={\"register-patient\"}>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className=\" float-right mr-1\"\n                        startIcon={<FaUserPlus size=\"25\" />}\n                        style={{ backgroundColor: \"#014d88\" }}\n                        id=\"new-patient\"\n                      >\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            fontWeight: \"bolder\",\n                          }}\n                        >\n                          New Client\n                        </span>\n                      </Button>\n                    </Link>\n                  ) : (\n                    \"\"\n                  )}\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className=\" float-right mr-1\"\n                    startIcon={<FaFingerprint size=\"25\" />}\n                    style={{ backgroundColor: \"#014d88\" }}\n                    onClick={toggleRecall}\n                  >\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        fontWeight: \"bolder\",\n                      }}\n                    >\n                      Patient Recall\n                    </span>\n                  </Button>\n                </div>\n              </div>\n\n              <Tab panes={panes} />\n            </CardBody>\n          </Card>\n        )}\n      </div>\n      <RecallPatient\n        modal={modalRecall}\n        toggle={toggleRecall}\n        patientDetails={patientDetails}\n        setPatientDetails={setPatientDetails}\n        pimsEnrollment={pimsEnrollment}\n        setPimsEnrollment={setPimsEnrollment}\n      />\n    </>\n  );\n}\n\nexport default Index;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\ClientDashboard\\index.js",["350","351","352","353","354","355","356","357","358","359","360","361","362","363","364"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  Button,\n  Card,\n  CardContent,\n  FormControl,\n  Grid,\n  MenuItem,\n  Paper,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PatientCard from \"../PatientCard\";\nimport ClientDashboard from \"./index\";\nimport PersonDemographics from \"../PersonDemographics\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport CheckIn from \"./CheckIn\";\nimport { Tab } from \"semantic-ui-react\";\nimport MaterialTable from \"material-table\";\nimport Biometrics from \"../Biometrics\";\nimport moment from \"moment\";\nimport Swal from \"sweetalert2\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    marginBottom: 20,\n    flexGrow: 1,\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: \"bottom\",\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: \"center\",\n  },\n  column: {\n    flexBasis: \"20.33%\",\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n  checkinModal: {\n    \"& .modal-dialog\": {\n      maxWidth: \"1000px\",\n    },\n    \"& .ui.label\": {\n      backgroundColor: \"#fff\",\n      fontSize: \"16px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n      textAlign: \"left\",\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  checkInDatePicker: {\n    \"& .MuiFormControl-root.MuiTextField-root\": {\n      border: \"1px solid #eee\",\n    },\n  },\n}));\nfunction Index(props) {\n  const userDetail =\n    props.location && props.location.state ? props.location.state.user : null;\n  const [loading, setLoading] = useState(\"\");\n  let history = useHistory();\n  const classes = useStyles();\n  const patientObj =\n    history.location && history.location.state\n      ? history.location.state.patientObj\n      : {};\n  //console.log(\"client  dashboard\", patientObj);\n  const permissions =\n    history.location && history.location.state\n      ? history.location.state.permissions\n      : [];\n  const [patientBiometricStatus, setPatientBiometricStatus] = useState(false);\n\n  const checkBiometricStatus = (id) => {\n    axios\n      .get(`${baseUrl}biometrics/person/${id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (response.data.length > 0) {\n          setPatientBiometricStatus(true);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const [biometricsModuleInstalled, setBiometricsModuleInstalled] =\n    useState(false);\n  const [patientVisits, setPatientVisits] = useState([]);\n  const [checkinStatus, setCheckinStatus] = useState(false);\n\n  const updatePatientBiometricStatus = (bioStatus) => {\n    setPatientBiometricStatus(bioStatus);\n  };\n  const panes = [\n    {\n      menuItem: \"Visits\",\n      render: () => (\n        <Tab.Pane>\n          <MaterialTable\n            title=\"\"\n            columns={[\n              {\n                title: \"Check-In Date\",\n                field: \"checkInDate\",\n                filtering: false,\n                headerStyle: {\n                  backgroundColor: \"#039be5\",\n                  border: \"2px solid #fff\",\n                  paddingRight: \"30px\",\n                },\n              },\n              {\n                title: \"Check-Out Date\",\n                field: \"checkOutDate\",\n                filtering: false,\n              },\n              { title: \"Service\", field: \"service\", filtering: false },\n              { title: \"Status\", field: \"status\", filtering: false },\n            ]}\n            isLoading={loading}\n            data={patientVisits.map((row) => ({\n              checkInDate: moment(row.checkInDate).format(\"YYYY-MM-DD h:mm a\"),\n              checkOutDate: row.checkOutDate\n                ? moment(row.checkOutDate).format(\"YYYY-MM-DD h:mm a\")\n                : \"Visit Ongoing\",\n              service: row.service,\n              status: (\n                <h6\n                  style={{\n                    color: row.status === \"COMPLETED\" ? \"green\" : \"red\",\n                  }}\n                >\n                  {row.status}\n                </h6>\n              ),\n            }))}\n            options={{\n              headerStyle: {\n                backgroundColor: \"#014d88\",\n                color: \"#fff\",\n                fontSize: \"16px\",\n                padding: \"10px\",\n                fontWeight: \"bold\",\n              },\n              rowStyle: {\n                color: \"rgba(0,0,0,.87)\",\n                fontFamily: `'poppins', sans-serif`,\n              },\n              searchFieldStyle: {\n                width: \"200%\",\n                margingLeft: \"250px\",\n              },\n              filtering: false,\n              exportButton: false,\n              searchFieldAlignment: \"left\",\n              pageSizeOptions: [10, 20, 100],\n              pageSize: 10,\n              debounceInterval: 400,\n            }}\n          />\n        </Tab.Pane>\n      ),\n    },\n\n    {\n      menuItem:\n        (permissions.includes(\"view_patient_appointment\") &&\n          biometricsModuleInstalled) ||\n        (permissions.includes(\"all_permission\") && biometricsModuleInstalled)\n          ? \"Biometrics\"\n          : \"\",\n      render: () =>\n        permissions.includes(\"view_patient_appointment\") ||\n        permissions.includes(\"all_permission\") ? (\n          <Tab.Pane>\n            <div style={{ minHeight: 400, width: \"100%\" }}>\n              <Biometrics\n                age={patientObj.dateOfBirth}\n                patientId={patientObj.id}\n                updatePatientBiometricStatus={updatePatientBiometricStatus}\n              />\n            </div>\n          </Tab.Pane>\n        ) : (\n          \"\"\n        ),\n    },\n  ];\n  const checkForBiometricsModule = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (response.data === true) {\n          setBiometricsModuleInstalled(true);\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const loadPatientVisits = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}patient/visit/visit-by-patient/${patientObj.id}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setPatientVisits(response.data);\n      response.data.map((visits) => {\n        if (visits.checkOutDate === null) {\n          setCheckinStatus(true);\n        }\n      });\n    } catch (e) {\n      await Swal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"An error occurred fetching services!\",\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    loadPatientVisits();\n    checkForBiometricsModule();\n    checkBiometricStatus(patientObj.id);\n  }, []);\n  return (\n    <div className={classes.root}>\n      <div\n        className=\"mb-6 col-md-6\"\n        style={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}\n      >\n        <Breadcrumbs aria-label=\"breadcrumb\">\n          <Typography style={{ color: \"#992E62\" }}>Patient</Typography>\n          <Typography style={{ color: \"#014d88\" }}>Dashboard</Typography>\n        </Breadcrumbs>\n      </div>\n      <Card>\n        <CardContent>\n          <PersonDemographics\n            patientObj={patientObj}\n            permissions={permissions}\n            patientBiometricStatus={patientBiometricStatus}\n          />\n          <Card style={{ marginTop: \"5px\" }}>\n            <CardContent>\n              <CheckIn props={props} />\n              <Tab panes={panes} />\n            </CardContent>\n          </Card>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default Index;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\api.js",[],"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Biometrics.js",["365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396"],"import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  Row,\n  Label,\n  Card,\n  CardBody,\n  Col,\n  FormGroup,\n  CardHeader,\n  Input,\n  Badge,\n} from \"reactstrap\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Select from \"react-select\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport MatButton from \"@material-ui/core/Button\";\nimport FingerprintIcon from \"@material-ui/icons/Fingerprint\";\nimport { Button2, Icon, List } from \"semantic-ui-react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../api\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\n\nimport { green, red } from \"@mui/material/colors\";\nimport { Dimmer, Loader, Image, Segment } from \"semantic-ui-react\";\n\nimport Box from \"@mui/material/Box\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Button from \"@mui/material/Button\";\nimport Fab from \"@mui/material/Fab\";\nimport CheckIcon from \"@mui/icons-material/Check\";\n//import SaveIcon from '@mui/icons-material/Save';\n// import LinearProgress from '@mui/material/LinearProgress';\nimport Typography from \"@mui/material/Typography\";\n// import CancelIcon from '@mui/icons-material/Cancel';\n// import ModalImage from \"react-modal-image\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport fingerprintimage from \"../images/fingerprintimage.png\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport UpgradeIcon from \"@mui/icons-material/Upgrade\";\nimport _ from \"lodash\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":\n      {\n        fontFamily: \"FontAwesome\",\n        border: \"0\",\n        verticalAlign: \"middle\",\n        marginLeft: \".25em\",\n        lineHeight: \"1\",\n      },\n    \"& .dropdown-menu .dropdown-item\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      padding: \"0.3rem 1.5rem\",\n      fontWeight: \"bold\",\n    },\n    \"& .mt-4\": {\n      marginTop: \"28px !important\",\n    },\n    \"& .form-control\": {\n      color: \"#992E62\",\n    },\n    \"& .form-control:focus\": {\n      color: \"#014d88\",\n    },\n    \"& .sharp \": {\n      \"min-width\": \"35px\",\n      padding: \"5px\",\n      height: \"35px\",\n      \"min-height\": \"35px\",\n    },\n  },\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  /*    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 350,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n    },\n    input: {\n        display: \"none\",\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"12.8px\",\n    },*/\n}));\n\nlet checkUrl = \"\";\n\nfunction Biometrics(props) {\n  //console.log(props.age);\n  const classes = useStyles();\n  let history = useHistory();\n  const permissions =\n    history.location && history.location.state\n      ? history.location.state.permissions\n      : [];\n  const [biometricDevices, setbiometricDevices] = useState([]);\n  const [capturedFingered, setCapturedFingered] = useState([]);\n  const [prevCapturedFingered, setPrevCapturedFingered] = useState([]);\n  const [objValues, setObjValues] = useState({\n    biometricType: \"FINGERPRINT\",\n    patientId: props.patientId,\n    templateType: \"\",\n    device: \"\",\n    reason: \"\",\n    age: \"\",\n    capturedBiometricsList: [],\n  });\n  const [fingerType, setFingerType] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [pageLoading, setPageLoading] = useState(false);\n  const [showCapture, setshowCapture] = React.useState(false);\n  const [tryAgain, setTryAgain] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const [errors, setErrors] = useState({});\n  const [storedBiometrics, setStoredBiometrics] = useState([]);\n  // const [responseImage, setResponseImage] = useState(\"\")\n\n  const [selectedFingers, setSelectedFingers] = useState([]);\n  const [imageQuality, setImageQuality] = useState(false);\n  const [isNewStatus, setIsNewStatus] = useState(true);\n\n  const calculate_age = (dob) => {\n    const today = new Date();\n    const dateParts = dob.split(\"-\");\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\n    let age_now = today.getFullYear() - birthDate.getFullYear();\n    const m = today.getMonth() - birthDate.getMonth();\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age_now--;\n    }\n    if (age_now === 0) {\n      return m + \" month(s)\";\n    }\n    return age_now;\n  };\n\n  const buttonSx = {\n    ...(success && {\n      bgcolor: green[500],\n      \"&:hover\": {\n        bgcolor: green[700],\n      },\n    }),\n  };\n\n  const getPersonBiometrics = async () => {\n    const fingersCodeset = await axios.get(\n      `${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n\n    axios\n      .get(`${baseUrl}biometrics/person/${props.patientId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then(async (response) => {\n        console.log(\"patient bio\", response.data);\n        if (response.data.length > 0) {\n          setStoredBiometrics(response.data);\n          setPageLoading(true);\n          let personCapturedFingers = _.uniq(\n            _.map(response.data, \"templateType\")\n          );\n          setSelectedFingers(personCapturedFingers);\n          let biometricItems = _.map(fingersCodeset.data, (item) => {\n            return _.extend({}, item, {\n              captured: personCapturedFingers.includes(item.display),\n            });\n          });\n          setFingerType(biometricItems);\n        } else {\n          let biometricItems = _.map(fingersCodeset.data, (item) => {\n            return _.extend({}, item, { captured: false });\n            //return item.captured = personCapturedFingers.includes(item.display)\n          });\n          setFingerType(biometricItems);\n        }\n      })\n      .catch(async (error) => {\n        // console.log(\"getPersonBiometrics error\")\n        // console.log(error)\n\n        let biometricItems = _.map(fingersCodeset.data, (item) => {\n          return _.extend({}, item, { captured: false });\n        });\n        setFingerType(biometricItems);\n        setPageLoading(true);\n      });\n  };\n\n  const clear_storelist = () => {\n    axios\n      .post(\n        `${baseUrl}biometrics/store-list/${props.patientId}`,\n        props.patientId,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        console.log(\"cleared store\");\n      })\n      .catch((error) => {\n        console.log(\"cleared store error\");\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    clear_storelist();\n    getPersonBiometrics();\n    TemplateType();\n    //biometricFingers();\n  }, []);\n  //Get list of KP\n  const TemplateType = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (response.data === true) {\n          axios\n            .get(`${baseUrl}biometrics/devices?active=true`, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              //console.log(response.data.find((x) => x.active === true));\n              setDevices(response.data.find((x) => x.active === true));\n              setbiometricDevices(response.data);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  //Get list of Finger index\n  const biometricFingers = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        console.log(\"er\", response);\n        setFingerType(response.data);\n      })\n      .catch((error) => {});\n  };\n  //check if device is plugged or not\n  const checkDevice = (e) => {\n    const deviceName = e.target.value;\n    const selectedDevice = biometricDevices.find((x) => x.name === deviceName);\n    checkUrl = selectedDevice.url === null ? baseUrl : selectedDevice.url;\n    setObjValues({ ...objValues, device: deviceName });\n    axios\n      .get(`${checkUrl}biometrics/secugen/boot?reader=${deviceName}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (response.data.errorType === \"ERROR\") {\n          toast.error(response.data.errorName + \" is not plug\");\n          //setshowCapture(true)\n        } else {\n          setshowCapture(true);\n        }\n      })\n      .catch((error) => {});\n  };\n  // handle the input changes\n  const handleInputChange = (e) => {\n    setObjValues({\n      ...objValues,\n      [e.target.name]: e.target.value,\n      age: calculate_age(props.age),\n    });\n  };\n  //form validation\n  const validate = () => {\n    let temp = { ...errors };\n    temp.templateType = objValues.templateType ? \"\" : \"This field is required\";\n    //temp.device = objValues.device ? \"\" : \"This field is required\"\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x === \"\");\n  };\n  //to capture  selected index finger\n  const captureFinger = (e) => {\n    if (localStorage.getItem(\"capturedBiometricsList\") !== null) {\n      const capturedBiometricsListObj = JSON.parse(\n        localStorage.getItem(\"capturedBiometricsList\")\n      );\n\n      objValues.capturedBiometricsList = capturedBiometricsListObj;\n      localStorage.removeItem(\"capturedBiometricsList\");\n    }\n\n    e.preventDefault();\n    if (validate()) {\n      setLoading(true);\n\n      axios\n        .post(\n          `${devices.url}?reader=${devices.name}&isNew=${isNewStatus}`,\n          objValues,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        )\n        .then((response) => {\n          setLoading(false);\n          if (response.data.type === \"ERROR\") {\n            setLoading(false);\n            setTryAgain(true);\n            window.setTimeout(() => {\n              setTryAgain(false);\n            }, 5000);\n            toast.error(response.data.message.ERROR);\n            setIsNewStatus(false);\n          } else if (response.data.type === \"SUCCESS\") {\n            if (\n              response.data.mainImageQuality <= 60 &&\n              calculate_age(props.age) <= 6\n            ) {\n              toast.info(\n                \"Image quality captured is poor, Kindly give a reason for capture above.\",\n                { position: toast.POSITION.BOTTOM_CENTER, autoClose: 20000 }\n              );\n              setImageQuality(true);\n            }\n\n            localStorage.setItem(\n              \"capturedBiometricsList\",\n              JSON.stringify(response.data.capturedBiometricsList)\n            );\n\n            const templateType = response.data.templateType;\n            console.log(\"prev\", response.data.capturedBiometricsList);\n            setPrevCapturedFingered(response.data.capturedBiometricsList);\n            setTryAgain(false);\n            setSuccess(true);\n            window.setTimeout(() => {\n              setSuccess(false);\n              setLoading(false);\n            }, 5000);\n            let biometricsEnrollments = response.data;\n            biometricsEnrollments.capturedBiometricsList = _.uniqBy(\n              biometricsEnrollments.capturedBiometricsList,\n              \"templateType\"\n            );\n\n            setCapturedFingered([...capturedFingered, biometricsEnrollments]);\n            //fingerType.splice(templateType, 1);\n            _.find(fingerType, { display: templateType }).captured = true;\n            setFingerType([...fingerType]);\n            //setObjValues({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"});\n            setObjValues({ ...objValues, templateType: \"\" });\n            setIsNewStatus(false);\n          } else {\n            setLoading(false);\n            setTryAgain(true);\n            toast.error(\"Something went wrong capturing biometrics...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        })\n        .catch((error) => {\n          setLoading(false);\n        });\n    }\n  };\n\n  const deleteBiometric = (id, finger) => {\n    axios\n      .delete(`${baseUrl}biometrics/${id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        toast.success(`${finger} deleted successfully`, {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n        _.find(fingerType, { display: finger }).captured = false;\n        setFingerType([...fingerType]);\n        let newStoredBiometrics = _.reject(storedBiometrics, {\n          templateType: finger,\n        });\n        setStoredBiometrics(newStoredBiometrics);\n        clear_storelist();\n        if (newStoredBiometrics.length === 0) {\n          props.updatePatientBiometricStatus(false);\n        }\n      })\n      .catch((error) => {\n        toast.error(\"Something went wrong\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n        console.log(error);\n      });\n  };\n  //Save Biometric capture\n  const saveBiometrics = (e) => {\n    e.preventDefault();\n\n    if (capturedFingered.length >= 1) {\n      const capturedObj = capturedFingered[capturedFingered.length - 1];\n      //console.log({ ...capturedObj, recapture: true });\n      capturedObj.capturedBiometricsList = _.uniqBy(\n        capturedObj.capturedBiometricsList,\n        \"templateType\"\n      );\n\n      // if (capturedObj.deviceName.includes(\"Futronic\")) {\n      //   let fingersObj = [];\n      //   capturedFingered.forEach((obj) => {\n      //     fingersObj.push(obj.capturedBiometricsList[0]);\n      //   });\n\n      //   if (fingersObj.length > 0) {\n      //     axios\n      //       .post(\n      //         `${devices.url.substr(0, 39)}/deduplicate/${props.patientId}`,\n      //         fingersObj,\n      //         {\n      //           headers: { Authorization: `Bearer ${token}` },\n      //         }\n      //       )\n      //       .then((response) => {\n      //         //console.log(\"duplicate\", response.data);\n      //         if (response.data.numberOfMatchedFingers > 0) {\n      //           toast.info(\"Client with finger print already exists\", {\n      //             position: toast.POSITION.TOP_CENTER,\n      //           });\n      //         } else {\n      //           axios\n      //             .post(`${baseUrl}biometrics/templates`, capturedObj, {\n      //               headers: { Authorization: `Bearer ${token}` },\n      //             })\n      //             .then((response) => {\n      //               console.log(\"saved\", response);\n      //               toast.success(\"Biometric saved successfully\", {\n      //                 position: toast.POSITION.BOTTOM_CENTER,\n      //               });\n      //               setCapturedFingered([]);\n      //               getPersonBiometrics();\n      //               props.updatePatientBiometricStatus(true);\n      //             })\n      //             .catch((error) => {\n      //               toast.error(\"Something went wrong saving biometrics\", {\n      //                 position: toast.POSITION.BOTTOM_CENTER,\n      //               });\n      //               console.log(error);\n      //             });\n      //         }\n      //       })\n      //       .catch((err) => {\n      //         console.log(err);\n      //       });\n      //   }\n      // } else {\n      axios\n        .post(`${baseUrl}biometrics/templates`, capturedObj, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          console.log(\"saved\", response);\n          toast.success(\"Biometric save successful\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n          setCapturedFingered([]);\n          getPersonBiometrics();\n          props.updatePatientBiometricStatus(true);\n        })\n        .catch((error) => {\n          toast.error(\"Something went wrong saving biometrics\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n          console.log(error);\n        });\n      // }\n    } else {\n      toast.error(\"You can't save less than 2 finger\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  const deleteTempBiometrics = (x) => {\n    axios\n      .delete(\n        `${baseUrl}biometrics?personId=${x.patientId}&templateType=${x.templateType}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((resp) => {\n        console.log(resp);\n        let deletedRecord = capturedFingered.filter(\n          (data) => data.templateType !== x.templateType\n        );\n        setCapturedFingered(deletedRecord);\n        toast.info(x.templateType + \"captured removed successfully!\");\n      })\n      .catch((error) => {\n        toast.error(\"Something went wrong\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n        console.log(error);\n      });\n    // let deletedRecord = capturedFingered.filter(\n    //   (data) => data.templateType !== x.templateType\n    // );\n    // setCapturedFingered(deletedRecord);\n    // console.log(\"deleted temp\");\n  };\n\n  const getFingerprintsQuality = (imageQuality) => {\n    if (imageQuality > 60 && imageQuality <= 75) {\n      return (\n        <Badge color=\"warning\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    } else if (imageQuality > 75) {\n      return (\n        <Badge color=\"success\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    } else {\n      return (\n        <Badge color=\"error\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <div>\n        {/* temporal update */}\n        {permissions.includes(\"capture_patient_biometrics\") ||\n        permissions.includes(\"all_permission\") ? (\n          <div\n            style={{\n              flex: \"10\",\n              padding: \"5px\",\n              marginLeft: \"5px\",\n              border: \"1px solid rgba(99, 99, 99, 0.2)\",\n              boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n            }}\n          >\n            <Row>\n              <ToastContainer />\n              <Col md={3}>\n                <FormGroup>\n                  <Label\n                    for=\"device\"\n                    style={{\n                      color: \"#014d88\",\n                      fontWeight: \"bold\",\n                      fontSize: \"14px\",\n                    }}\n                  >\n                    {\" \"}\n                    Device{\" \"}\n                  </Label>\n                  <Input\n                    type=\"select\"\n                    name=\"device\"\n                    id=\"device\"\n                    //onChange={checkDevice}\n                    value={objValues.device}\n                    required\n                    disabled\n                  >\n                    {biometricDevices.map(({ id, name, active, url, type }) => (\n                      <option key={id} value={url}>\n                        {type}\n                      </option>\n                    ))}\n                  </Input>\n                  {errors.device !== \"\" ? (\n                    <span className={classes.error}>{errors.device}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </Col>\n\n              <Col md={3}>\n                <FormGroup>\n                  <Label\n                    for=\"device\"\n                    style={{\n                      color: \"#014d88\",\n                      fontWeight: \"bold\",\n                      fontSize: \"14px\",\n                    }}\n                  >\n                    Select Finger\n                  </Label>\n                  <Input\n                    type=\"select\"\n                    name=\"templateType\"\n                    id=\"templateType\"\n                    onChange={handleInputChange}\n                    value={objValues.templateType}\n                    required\n                  >\n                    <option value=\"\">Select Finger </option>\n\n                    {_.filter(fingerType, [\"captured\", false]).map((value) => (\n                      <option key={value.id} value={value.display}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </Input>\n                  {errors.templateType !== \"\" ? (\n                    <span className={classes.error}>{errors.templateType}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </Col>\n\n              {!imageQuality ? (\n                \"\"\n              ) : (\n                <Col md={4}>\n                  <FormGroup>\n                    <Label\n                      for=\"device\"\n                      style={{\n                        color: \"#014d88\",\n                        fontWeight: \"bold\",\n                        fontSize: \"14px\",\n                      }}\n                    >\n                      {\" \"}\n                      Reason for capture{\" \"}\n                    </Label>\n                    <Input\n                      type=\"textarea\"\n                      name=\"reason\"\n                      id=\"reason\"\n                      onChange={handleInputChange}\n                    />\n                  </FormGroup>\n                </Col>\n              )}\n\n              <Col md={2}>\n                <MatButton\n                  type=\"button\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={captureFinger}\n                  className={\"mt-4\"}\n                  style={{ backgroundColor: \"#992E62\" }}\n                  startIcon={<FingerprintIcon />}\n                  disabled={loading}\n                >\n                  Capture Finger\n                </MatButton>\n              </Col>\n              <br />\n            </Row>\n          </div>\n        ) : (\n          \"\"\n        )}\n        <Row>\n          {capturedFingered.length >= 1 ? (\n            <>\n              <Col md={12} style={{ marginTop: \"10px\", paddingBottom: \"20px\" }}>\n                {\n                  /* <List celled horizontal>\n                  {capturedFingered.map((x) => (\n                    <List.Item\n                      style={{\n                        width: \"200px\",\n                        height: \"200px\",\n                        border: \"1px dotted #014d88\",\n                        margin: \"5px\",\n                      }}\n                    >\n                      <List.Header\n                        style={{\n                          paddingLeft: \"0px\",\n                          height: \"0.5rem\",\n\n                          alignItems: \"right\",\n                        }}\n                      >\n                        {getFingerprintsQuality(x.imageQuality)}\n                        <span\n                          onClick={() => {\n                            deleteTempBiometrics(x);\n                          }}\n                        >\n                          <Icon\n                            name=\"cancel\"\n                            color=\"red\"\n                            style={{ float: \"right\" }}\n                          />{\" \"}\n                        </span>\n                      </List.Header>\n                      <List.Content\n                        style={{\n                          width: \"200px\",\n                          height: \"160px\",\n                          display: \"flex\",\n                          justifyContent: \"center\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        {\" \"}\n                        <FingerprintIcon\n                          style={{ color: \"#992E62\", fontSize: 150 }}\n                        />\n                      </List.Content>\n                      <List.Content\n                        style={{\n                          width: \"200px\",\n                          height: \"30px\",\n                          display: \"flex\",\n                          justifyContent: \"center\",\n                          alignItems: \"center\",\n                          fontSize: \"18px\",\n                          color: \"#014d88\",\n                          fontWeight: \"bold\",\n                          fontFamily: '\"poppins\", sans-serif',\n                        }}\n                      >\n                        {x.templateType}\n                      </List.Content>\n                    </List.Item>\n                  ))}\n                </List> */\n                  //console.log(capturedFingered)\n                }\n                <List celled horizontal>\n                  {capturedFingered.map((x) => (\n                    <List.Item\n                      style={{\n                        width: \"200px\",\n                        height: \"200px\",\n                        border: \"1px dotted #014d88\",\n                        margin: \"5px\",\n                      }}\n                    >\n                      <List.Header\n                        style={{\n                          paddingLeft: \"0px\",\n                          height: \"0.5rem\",\n                          alignItems: \"right\",\n                        }}\n                      >\n                        {getFingerprintsQuality(x.mainImageQuality)}\n                        <span\n                          onClick={() => {\n                            deleteTempBiometrics(x);\n                          }}\n                        >\n                          <Icon\n                            name=\"cancel\"\n                            color=\"red\"\n                            style={{ float: \"right\" }}\n                          />{\" \"}\n                        </span>\n                      </List.Header>\n                      <List.Content\n                        style={{\n                          width: \"200px\",\n                          height: \"150px\",\n                          display: \"flex\",\n                          justifyContent: \"center\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        {\" \"}\n                        <FingerprintIcon\n                          style={{ color: \"#992E62\", fontSize: 150 }}\n                        />\n                      </List.Content>\n                      <List.Content\n                        style={{\n                          width: \"200px\",\n                          height: \"30px\",\n                          display: \"flex\",\n                          justifyContent: \"center\",\n                          alignItems: \"center\",\n                          fontSize: \"16px\",\n                          color: \"#014d88\",\n                          fontWeight: \"bold\",\n                          fontFamily: '\"poppins\", sans-serif',\n                        }}\n                      >\n                        {x.templateType}\n                      </List.Content>\n                      <List.Content>\n                        <br />\n                        {x.mainImageQuality < 75 ? (\n                          <MatButton\n                            type=\"button\"\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={() => {\n                              deleteTempBiometrics(x);\n                            }}\n                            startIcon={<RestartAltIcon />}\n                          >\n                            Reset Finger\n                          </MatButton>\n                        ) : (\n                          \" \"\n                        )}\n                      </List.Content>\n                    </List.Item>\n                  ))}\n                </List>\n              </Col>\n              <br />\n              <br />\n              <br />\n              <br />\n              <br />\n              <br />\n              <Col md={12}>\n                {storedBiometrics.length < 10 &&\n                storedBiometrics.length !== 0 ? (\n                  <MatButton\n                    type=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    //disabled={capturedFingered.length < 6 ? true : false}\n                    onClick={saveBiometrics}\n                    // className={classes.button}\n                    startIcon={<SaveIcon />}\n                  >\n                    Save Capture\n                  </MatButton>\n                ) : (\n                  <MatButton\n                    type=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={capturedFingered.length < 6 ? true : false}\n                    onClick={saveBiometrics}\n                    // className={classes.button}\n                    startIcon={<SaveIcon />}\n                  >\n                    Save Capture\n                  </MatButton>\n                )}\n              </Col>\n              <br />\n            </>\n          ) : (\n            \"\"\n          )}\n        </Row>\n      </div>\n      <div style={{ display: \"flex\", width: \"100%\" }}>\n        <div\n          className=\"\"\n          style={{\n            padding: \"5px\",\n            flex: \"10\",\n            boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n            minHeight: \"400px\",\n          }}\n        >\n          {pageLoading && storedBiometrics.length > 0 ? (\n            <div style={{ display: \"flex\", width: \"100%\", flexWrap: \"wrap\" }}>\n              {storedBiometrics.map((biometric, index) => (\n                <div\n                  key={index}\n                  style={{ minHeight: \"120px\", padding: \"5px\", width: \"20%\" }}\n                >\n                  <div className=\"card \" style={{ borderRadius: \"6px\" }}>\n                    <div\n                      className=\"card-header align-items-start\"\n                      style={{ backgroundColor: \"#fff\" }}\n                    >\n                      <div>\n                        <h6 className=\"fs-18 font-w500 mb-3 user-name\">\n                          <Link\n                            to={\"#\"}\n                            style={{\n                              color: \"#014d88\",\n                              fontSize: \"14px\",\n                              fontFamily: `\"poppins\",sans-serif`,\n                            }}\n                          >\n                            {biometric.templateType}\n                          </Link>\n                        </h6>\n                        <div\n                          className=\"fs-9 text-nowrap\"\n                          style={{\n                            fontSize: \"10px\",\n                            color: \"#992E62\",\n                            fontWeight: \"bold\",\n                            fontFamily: `\"poppins\",sans-serif`,\n                          }}\n                        >\n                          <i\n                            className=\"fa fa-calendar-o me-3\"\n                            aria-hidden=\"true\"\n                          ></i>\n                          {moment(biometric.lastModifiedDate).format(\n                            \"YYYY-MM-DD HH:mm\"\n                          )}\n                        </div>\n                      </div>\n\n                      {/*Action button -- Dropdown menu*/}\n                      <Dropdown className=\"dropdown ms-auto\">\n                        <Dropdown.Toggle\n                          as=\"button\"\n                          variant=\"\"\n                          drop=\"up\"\n                          className=\"btn sharp btn-primary \"\n                          id=\"tp-btn\"\n                          style={{\n                            backgroundColor: \"#014d88\",\n                            borderColor: \"#014d88\",\n                            borderRadius: \"5px\",\n                            marginRight: \"-18px\",\n                            marginTop: \"-10px\",\n                          }}\n                        >\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                            width=\"18px\"\n                            height=\"18px\"\n                            viewBox=\"0 0 24 24\"\n                            version=\"1.1\"\n                          >\n                            <g\n                              stroke=\"none\"\n                              strokeWidth=\"1\"\n                              fill=\"none\"\n                              fillRule=\"evenodd\"\n                            >\n                              <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\n                              <circle fill=\"#ffffff\" cx=\"12\" cy=\"5\" r=\"2\" />\n                              <circle fill=\"#ffffff\" cx=\"12\" cy=\"12\" r=\"2\" />\n                              <circle fill=\"#ffffff\" cx=\"12\" cy=\"19\" r=\"2\" />\n                            </g>\n                          </svg>\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu\n                          alignRight={true}\n                          className=\"dropdown-menu-right\"\n                        >\n                          <Dropdown.Item\n                            style={{ color: \"red\" }}\n                            onClick={() =>\n                              deleteBiometric(\n                                biometric.id,\n                                biometric.templateType\n                              )\n                            }\n                          >\n                            <DeleteIcon /> Delete\n                          </Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </div>\n                    <div className=\"card-body p-0 pb-2\">\n                      <ul className=\"list-group list-group-flush\">\n                        <li\n                          className=\"list-group-item\"\n                          style={{\n                            height: \"100px\",\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                          }}\n                        >\n                          <img\n                            src={fingerprintimage}\n                            alt=\"\"\n                            style={{ height: \"80px\" }}\n                          />\n                        </li>\n\n                        <li className=\"list-group-item\">\n                          <Badge\n                            variant=\"info badge-xs light\"\n                            className=\"card-link float-end\"\n                          >\n                            {biometric.imageQuality !== null\n                              ? biometric.imageQuality + \"%\"\n                              : \"N/A\"}{\" \"}\n                            {/*{contact.version}*/}\n                          </Badge>\n                          <span className=\"mb-0 title\">\n                            Status {biometric.iso}\n                          </span>{\" \"}\n                          :\n                          <span className=\"text-black desc-text ms-2\">\n                            <Badge\n                              variant={\n                                biometric.iso === true\n                                  ? \"primary badge-xs\"\n                                  : \"danger badge-xs\"\n                              }\n                            >\n                              <i\n                                className=\"fa fa-check-square me-2 scale4\"\n                                aria-hidden=\"true\"\n                              ></i>{\" \"}\n                            </Badge>\n                          </span>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <>\n              <div className=\"flex-grow-8\">\n                <div className=\"flex-grow-8\">\n                  <Alert severity=\"info\">\n                    <AlertTitle style={{ height: \"400px\" }}>\n                      <strong>No biometrics captured</strong>\n                    </AlertTitle>\n                  </Alert>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n        {/*{permissions.includes('capture_patient_biometrics')|| permissions.includes(\"all_permission\")?*/}\n        {permissions.includes(\"capture_patient_biometrics\") ||\n        permissions.includes(\"all_permission\")\n          ? \"\"\n          : // <div\n            //     style={{\n            //     flex: \"3\",\n            //     padding: \"5px\",\n            //     marginLeft: \"5px\",\n            //     border: \"1px solid rgba(99, 99, 99, 0.2)\",\n            //     boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n            //     }}\n            // >\n            //     <div className=\"col-12\">\n            //         <ToastContainer />\n            //         <Col md={12}>\n            //             <FormGroup>\n            //                 <Label\n            //                     for=\"device\"\n            //                     style={{\n            //                     color: \"#014d88\",\n            //                     fontWeight: \"bold\",\n            //                     fontSize: \"14px\",\n            //                     }}\n            //                 >\n            //                     {\" \"} Device {\" \"}\n            //                 </Label>\n            //                 <Input\n            //                     type=\"select\"\n            //                     name=\"device\"\n            //                     id=\"device\"\n            //                     //onChange={checkDevice}\n            //                     value={objValues.device}\n            //                     required\n            //                     disabled\n            //                 >\n            //                     {biometricDevices.map(({ id, name, active, url, type }) => (\n            //                     <option key={id} value={url}>\n            //                         {type}\n            //                     </option>\n            //                     ))}\n            //                 </Input>\n            //                 {errors.device !== \"\" ? (\n            //                     <span className={classes.error}>{errors.device}</span>\n            //                 ) : (\n            //                     \"\"\n            //                 )}\n            //             </FormGroup>\n            //         </Col>\n\n            //     <div className=\"row col-12\">\n            //         <Col md={12}>\n            //         <FormGroup>\n            //             <Label\n            //             for=\"device\"\n            //             style={{\n            //                 color: \"#014d88\",\n            //                 fontWeight: \"bold\",\n            //                 fontSize: \"14px\",\n            //             }}\n            //             >\n            //             Select Finger\n            //             </Label>\n            //             <Input\n            //             type=\"select\"\n            //             name=\"templateType\"\n            //             id=\"templateType\"\n            //             onChange={handleInputChange}\n            //             value={objValues.templateType}\n            //             required\n            //             >\n            //             <option value=\"\">Select Finger </option>\n\n            //             {_.filter(fingerType, [\"captured\", false]).map(\n            //                 (value) => (\n            //                 <option key={value.id} value={value.display}>\n            //                     {value.display}\n            //                 </option>\n            //                 )\n            //             )}\n            //             </Input>\n            //             {errors.templateType !== \"\" ? (\n            //             <span className={classes.error}>\n            //                 {errors.templateType}\n            //             </span>\n            //             ) : (\n            //             \"\"\n            //             )}\n            //         </FormGroup>\n            //         </Col>\n\n            //         <Col md={12}>\n            //         <MatButton\n            //             type=\"button\"\n            //             variant=\"contained\"\n            //             color=\"primary\"\n            //             onClick={captureFinger}\n            //             className={\"mt-4\"}\n            //             style={{ backgroundColor: \"#992E62\" }}\n            //             startIcon={<FingerprintIcon />}\n            //             disabled={loading}\n            //         >\n            //             Capture Finger\n            //         </MatButton>\n            //         </Col>\n            //         <br />\n            //     </div>\n            //     </div>\n            // </div>\n            \"\"}\n      </div>\n\n      {/*\n            <Form >\n\n                    <Card>\n                         <CardHeader>\n                                    Capture Biometrics\n                                </CardHeader>\n                        <CardBody>\n                            <Row form>\n                                <ToastContainer />\n                                <Col md={4}>\n                                    <FormGroup>\n                                        <Label for='device'>Select Device </Label>\n                                        <Input\n                                            type=\"select\"\n                                            name=\"device\"\n                                            id=\"device\"\n                                            onChange={checkDevice}\n                                            value={objValues.device}\n                                            required\n                                        >\n                                            <option value=\"\">Select Device </option>\n                                            {biometricDevices.map(({ id, name }) => (\n                                                <option key={id} value={name}>\n                                                    {name}\n                                                </option>\n                                            ))}\n\n                                        </Input>\n                                        {errors.device !==\"\" ? (\n                                            <span className={classes.error}>{errors.device}</span>\n                                        ) : \"\" }\n                                    </FormGroup>\n                                </Col>\n                                {showCapture ? (\n                                        <>\n                                            <Col md={4}>\n                                                <FormGroup>\n                                                    <Label for='device'>Select Finger</Label>\n                                                    <Input\n                                                        type=\"select\"\n                                                        name=\"templateType\"\n                                                        id=\"templateType\"\n                                                        onChange={handleInputChange}\n                                                        value={objValues.templateType}\n                                                        required\n                                                    >\n                                                        <option value=\"\">Select Finger </option>\n\n                                                        {fingerType.map((value) => (\n                                                            <option key={value.id} value={value.display}>\n                                                                {value.display}\n                                                            </option>\n                                                        ))}\n                                                    </Input>\n                                                    {errors.templateType !==\"\" ? (\n                                                        <span className={classes.error}>{errors.templateType}</span>\n                                                    ) : \"\" }\n                                                </FormGroup>\n                                            </Col>\n\n\n                                            <Col md={4}>\n\n                                                <MatButton\n                                                    type='button'\n                                                    variant='contained'\n                                                    color='primary'\n                                                    onClick={captureFinger}\n                                                    className={'mt-4'}\n                                                    startIcon={<FingerprintIcon />}\n                                                >\n                                                    Capture Finger\n                                                </MatButton>\n\n                                            </Col>\n                                            <br/>\n\n                                        </>\n                                    )\n                                    :\n                                    \"\"\n                                }\n                                 <img width='500' height='200' src={responseImage}/>\n                                <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n\n                                    {loading && (\n                                        <>\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                                <Box sx={{ m: 1, position: 'relative' }}>\n                                                    <Fab\n                                                        aria-label=\"save\"\n                                                        color=\"secondary\"\n                                                        sx={buttonSx}\n\n                                                    >\n                                                        {success ? <CheckIcon /> : <FingerprintIcon />}\n                                                    </Fab>\n                                                    {loading && (\n                                                        <CircularProgress\n                                                            size={68}\n                                                            sx={{\n                                                                color: green[500],\n                                                                position: 'absolute',\n                                                                top: -6,\n                                                                left: -6,\n                                                                zIndex: 1,\n                                                            }}\n                                                        />\n                                                    )}\n                                                </Box>\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                                    {success ?` your  ${objValues.templateType} Finger captured.` : `Please place your  ${objValues.templateType} Finger on scanner.`}\n                                                </Typography>\n                                            </Box>\n                                        </>\n                                    )\n                                    }\n                                    {tryAgain && (\n                                        <>\n\n\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                                <Box sx={{ m: 1, position: 'relative' }}>\n                                                    <Fab\n                                                        aria-label=\"save\"\n                                                        color=\"secondary\"\n                                                        sx={buttonSx}\n\n                                                    >\n                                                        <FingerprintIcon />\n                                                    </Fab>\n                                                    {tryAgain && (\n                                                        <CircularProgress\n                                                            size={68}\n                                                            sx={{\n                                                                color: red[500],\n                                                                position: 'absolute',\n                                                                top: -6,\n                                                                left: -6,\n                                                                zIndex: 1,\n                                                            }}\n                                                        />\n                                                    )}\n                                                </Box>\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                                    Click to Recapture Again\n                                                </Typography>\n                                            </Box>\n                                        </>\n                                    )\n                                    }\n\n                                </Col>\n\n\n                            </Row>\n\n                            <Row>\n                                {capturedFingered.length >=1 ? (\n                                        <>\n                                            <Col md={12} >\n                                                <h3>Captured Fingerprints</h3>\n                                            </Col>\n                                            <Col md={12} style={{marginTop:\"20px\"}}>\n                                                <List celled horizontal>\n                                                    {capturedFingered.map((x) => (\n                                                        <List.Item style={{width:'200px',height:'200px',display:'flex', justifyContent:'center',alignItems: 'center'}}>\n                                                             <List.Header><Icon name='cancel'  color='red' /> </List.Header>\n                                                            <List.Content> <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}}/>{x.templateType}</List.Content>\n                                                        </List.Item>\n                                                    ))}\n\n                                                </List>\n\n                                            </Col>\n                                             <Col md={6} style={{marginTop:\"20px\"}}>\n                                        <List celled horizontal>\n                                            {[1,2,3].map((x) => (\n                                                <List.Item>\n                                                    <List.Header><Icon name='checkmark' color='green'/> </List.Header>\n                                                    <List.Content > <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}} /> Finger Type</List.Content>\n                                                </List.Item>\n                                            ))}\n\n                                        </List>\n\n                                    </Col>\n                                            <br/><br/><br/><br/><br/><br/>\n                                            <Col md={12} >\n                                                <MatButton\n                                                    type='button'\n                                                    variant='contained'\n                                                    color='primary'\n                                                    onClick={saveBiometrics}\n                                                    // className={classes.button}\n                                                    startIcon={<SaveIcon/>}\n                                                >\n                                                    Save Capture\n                                                </MatButton>\n                                            </Col>\n                                        </>\n                                    )\n                                    :\n                                    \"\"\n                                }\n                            </Row>\n                        </CardBody>\n                    </Card>\n            </Form>\n*/}\n    </div>\n  );\n}\n\nexport default Biometrics;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PreviousRecapture.js",["397","398","399","400","401","402","403","404","405","406","407","408","409"],"import React, { useState, useRef, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport MaterialTable from \"material-table\";\nimport Button from \"@material-ui/core/Button\";\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"../../../api\";\nimport Alert from \"@mui/material/Alert\";\nimport swal from \"sweetalert\";\n\nimport PatientRecapture from \"./PatientRecapture\";\nimport Recapture from \"./Recapture\";\nimport MatButton from \"@material-ui/core/Button\";\nimport FingerprintIcon from \"@mui/icons-material/Fingerprint\";\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\nimport RestoreIcon from \"@mui/icons-material/Restore\";\n\nimport { forwardRef } from \"react\";\n\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport BaselineWarning from \"./BaselineWarning\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst PreviousRecapture = (props) => {\n  let createdDate = props.patientObj.createdDate.split(\"T\")[0];\n  let currentDate = new Date().toISOString().split(\"T\")[0];\n  const [previousCaptureDate, setPreviousCaptureDate] = useState(\"\");\n  const [permissions, setPermissions] = useState([]);\n  const [recapturedFingered, setRecapturedFingered] = useState([]);\n  const [fingerType, setFingerType] = useState([]);\n  const [modal, setModal] = useState(false);\n  const [modal1, setModal1] = useState(false);\n  const [modalNew, setModalNew] = useState(false);\n\n  const [submitStatus, setSubmitStatus] = useState(false);\n  const [capturedFingered, setCapturedFingered] = useState([]);\n\n  const toggle = () => {\n    setModal(!modal);\n    localStorage.removeItem(\"capturedBiometricsList\");\n    setCapturedFingered([]);\n  };\n  const toggle1 = () => setModal1(!modal1);\n  const toggleNew = () => {\n    setModalNew(!modalNew);\n    localStorage.removeItem(\"capturedBiometricsList\");\n    setCapturedFingered([]);\n  };\n\n  const tableRef = useRef(null);\n  const [loading, setLoading] = useState(\"\");\n\n  const [biometrics, setBiometrics] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [baselineVal, setBaselineVal] = useState({});\n  const [replaceDate, setReplacement] = useState(null);\n\n  const userPermission = () => {\n    axios\n      .get(`${baseUrl}account`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setPermissions(response.data.permissions);\n      })\n      .catch((error) => {});\n  };\n\n  const getRecaptureCount = () => {\n    //console.log(\"get recaptures\");\n    axios\n      .get(`${baseUrl}biometrics/grouped/person/${props.patientId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        console.log(response.data);\n        let capturedDate = response.data[0].captureDate;\n        let replacementDate =\n          response.data[response.data.length - 1]?.replaceDate;\n\n        if (replacementDate != null) {\n          setReplacement(replacementDate);\n        }\n\n        setPreviousCaptureDate(capturedDate);\n\n        setRecapturedFingered(response.data);\n        // localStorage.removeItem(\"capturedBiometricsList\");\n      });\n  };\n\n  useEffect(() => {\n    getRecaptureCount();\n    userPermission();\n  }, []);\n\n  const handleChangePage = (page) => {\n    setCurrentPage(page + 1);\n  };\n\n  function actionItems(row) {\n    //console.log(row);\n    axios\n      .get(\n        `${baseUrl}biometrics?personUuid=${row.personUuid}&recapture=${row.recapture}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        toggle();\n        let biometricData = response.data.filter(\n          (data) => data.date === row.captureDate\n        );\n        //console.log(\"gotten\", biometricData);\n        setBiometrics(biometricData);\n      });\n    //.error((err) => console.log(err));\n  }\n\n  const submitReplacedBaselinePrints = () => {\n    toggle1();\n    axios\n      .put(\n        `${baseUrl}biometrics/person?personUuid=${baselineVal?.personUuid}&captureDate=${baselineVal?.captureDate}&recapture=${baselineVal?.recapture}`,\n        null,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        getRecaptureCount();\n      });\n  };\n\n  const replaceBaselinePrints = async (row) => {\n    console.log(`${row.captureDate} ${row.personUuid}`);\n    toggle1();\n    setBaselineVal(row);\n  };\n\n  const is30DaysPassed = (timestamp) => {\n    console.log(timestamp);\n    const startDate = new Date(timestamp);\n    const currentDate = new Date();\n    const timeDifference = currentDate - startDate;\n\n    const daysDifference = timeDifference / (1000 * 60 * 60 * 24);\n\n    if (daysDifference >= 15) {\n      return true;\n    } else {\n      const remainingDays = 15 - daysDifference;\n      console.log(`remaining ${remainingDays} days`);\n      return false;\n    }\n  };\n\n  return (\n    <>\n      <h5>\n        {\" \"}\n        Patient recapture count : <b>{recapturedFingered.length - 1}</b>\n      </h5>\n      {is30DaysPassed(previousCaptureDate) === true ? (\n        // <Link\n        //   to={{\n        //     pathname: \"/biometrics-recapture\",\n        //     state: { patientObj: props, permissions: permissions },\n        //   }}\n        // >\n        <MatButton\n          className=\" float-right mr-1\"\n          variant=\"contained\"\n          floated=\"left\"\n          startIcon={<FingerprintIcon />}\n          style={{\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n            height: \"35px\",\n            float: \"right\",\n            //marginBottom: \"40px\",\n          }}\n          onClick={toggleNew}\n        >\n          <span style={{ textTransform: \"capitalize\" }}>Recapture</span>\n        </MatButton>\n      ) : (\n        // </Link>\n        \"\"\n      )}\n\n      <Alert severity=\"info\" style={{ width: \"90%\" }}>\n        <b style={{ textAlign: \"center\", fontSize: \"16px\" }}>Instruction: </b>\n        1.Maximum of 10 fingers to be captured. 2.Click the recapture button to\n        capture patient's fingers.\n      </Alert>\n      <br />\n\n      <br />\n      <br />\n      <MaterialTable\n        tableRef={tableRef}\n        /*onSearchChange={(e) => {\n          handleSearchChange(e);\n      }}*/\n        icons={tableIcons}\n        title={`Biometrics List`}\n        columns={[\n          {\n            title: \"Captured Date\",\n            field: \"captureDate\",\n            filtering: false,\n            // hidden: enablePPI,\n          },\n          {\n            title: \"Number of Fingers Captured\",\n            field: \"count\",\n            filtering: false,\n          },\n          { title: \"Category\", field: \"data\" },\n          { title: \"Number\", field: \"number\" },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        isLoading={loading}\n        data={\n          recapturedFingered &&\n          recapturedFingered\n            .filter((record) => {\n              return record.archived === 0;\n            })\n            .map((row) => ({\n              captureDate: row.captureDate,\n              count: row.count === null ? 0 : row.count,\n              data: row.recapture >= 1 ? \"Recapture\" : \"Baseline\",\n              number: row.recapture,\n              actions: (\n                <>\n                  <Button\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={() => actionItems(row)}\n                    startIcon={<VisibilityIcon />}\n                  >\n                    View\n                  </Button>{\" \"}\n                  {row.recapture > 0 &&\n                  row.replaceDate === null &&\n                  replaceDate === null ? (\n                    <Button\n                      style={{\n                        backgroundColor: \"rgb(153, 46, 98)\",\n                        color: \"#fff\",\n                      }}\n                      onClick={() => replaceBaselinePrints(row)}\n                      startIcon={<RestoreIcon />}\n                      //disabled={true}\n                    >\n                      Replace\n                    </Button>\n                  ) : (\n                    \"\"\n                  )}\n                </>\n              ),\n            }))\n        }\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n            fontSize: \"16px\",\n            padding: \"10px\",\n            fontWeight: \"bolder\",\n          },\n          searchFieldStyle: {\n            width: \"50%\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n        onChangePage={handleChangePage}\n        //localization={localization}\n      />\n      <PatientRecapture\n        storedBiometrics={biometrics}\n        modal={modal}\n        toggle={toggle}\n      />\n      <Recapture\n        toggle={toggleNew}\n        modal={modalNew}\n        patientId={props.patientId}\n        age={props.age}\n        getRecaptureCount={getRecaptureCount}\n        capturedFingered={capturedFingered}\n        setCapturedFingered={setCapturedFingered}\n      />\n      <BaselineWarning\n        modal={modal1}\n        toggle={toggle1}\n        submitReplacedBaselinePrints={submitReplacedBaselinePrints}\n      />\n    </>\n  );\n};\n\nexport default PreviousRecapture;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Pims.js",["410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442"],"import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Row,\n  Label,\n  Col,\n  FormGroup,\n  Input,\n  Badge,\n} from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport MatButton from \"@material-ui/core/Button\";\nimport FingerprintIcon from \"@material-ui/icons/Fingerprint\";\nimport { Button2, Icon, List } from \"semantic-ui-react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\n\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../api\";\n\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nimport { Link, useHistory } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport fingerprintimage from \"../images/fingerprintimage.png\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport LinearProgress from \"@mui/material/LinearProgress\";\n\nimport _ from \"lodash\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":\n      {\n        fontFamily: \"FontAwesome\",\n        border: \"0\",\n        verticalAlign: \"middle\",\n        marginLeft: \".25em\",\n        lineHeight: \"1\",\n      },\n    \"& .dropdown-menu .dropdown-item\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      padding: \"0.3rem 1.5rem\",\n      fontWeight: \"bold\",\n    },\n    \"& .mt-4\": {\n      marginTop: \"28px !important\",\n    },\n    \"& .form-control\": {\n      color: \"#992E62\",\n    },\n    \"& .form-control:focus\": {\n      color: \"#014d88\",\n    },\n    \"& .sharp \": {\n      \"min-width\": \"35px\",\n      padding: \"5px\",\n      height: \"35px\",\n      \"min-height\": \"35px\",\n    },\n  },\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n}));\n\nconst Pims = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n\n  const [biometricDevices, setbiometricDevices] = useState([]);\n  const [objValues, setObjValues] = useState({\n    biometricType: \"FINGERPRINT\",\n    patientId: props.patientId,\n    templateType: \"\",\n    device: \"SECUGEN\",\n    reason: \"\",\n    age: \"\",\n  });\n  const [fingerType, setFingerType] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [pageLoading, setPageLoading] = useState(false);\n  const [showCapture, setshowCapture] = React.useState(false);\n  const [tryAgain, setTryAgain] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const [errors, setErrors] = useState({});\n  const [storedBiometrics, setStoredBiometrics] = useState([]);\n  // const [responseImage, setResponseImage] = useState(\"\")\n  const [capturedFingered, setCapturedFingered] = useState([]);\n\n  const [imageQuality, setImageQuality] = useState(false);\n  const [isNewStatus, setIsNewStatus] = useState(true);\n\n  const getPersonBiometrics = async () => {\n    const fingersCodeset = await axios.get(\n      `${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n\n    let biometricItems = _.map(fingersCodeset.data, (item) => {\n      return _.extend({}, item, {\n        captured: false,\n      });\n    });\n\n    setFingerType(biometricItems);\n  };\n\n  const clear_storelist = () => {\n    axios\n      .post(\n        `${baseUrl}biometrics/store-list/${props.patientId}`,\n        props.patientId,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        //console.log(\"cleared store\");\n      })\n      .catch((error) => {\n        //console.log(\"cleared store error\");\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    // clear_storelist();\n    getPersonBiometrics();\n    TemplateType();\n  }, []);\n\n  const TemplateType = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (response.data === true) {\n          axios\n            .get(`${baseUrl}biometrics/devices?active=true`, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              //console.log(response.data.find((x) => x.active === true));\n              setDevices(response.data.find((x) => x.active === true));\n              setbiometricDevices(response.data);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const handleInputChange = (e) => {\n    setObjValues({\n      ...objValues,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const validate = () => {\n    let temp = { ...errors };\n    temp.templateType = objValues.templateType ? \"\" : \"This field is required\";\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x === \"\");\n  };\n\n  const captureFinger = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      setLoading(true);\n\n      console.log(objValues);\n\n      axios\n        .post(\n          `${devices.url}?reader=${devices.name}&isNew=${isNewStatus}`,\n          objValues,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        )\n        .then((response) => {\n          setLoading(false);\n\n          if (response.data.type === \"ERROR\") {\n            setLoading(false);\n            setTryAgain(true);\n            window.setTimeout(() => {\n              setTryAgain(false);\n            }, 5000);\n            toast.error(response.data.message.ERROR);\n            setIsNewStatus(false);\n          } else if (response.data.type === \"WARNING\") {\n            const templateType = response.data.templateType;\n\n            setTryAgain(false);\n            setSuccess(true);\n\n            let biometricsEnrollments = response.data;\n            biometricsEnrollments.capturedBiometricsList = _.uniqBy(\n              biometricsEnrollments.capturedBiometricsList,\n              \"templateType\"\n            );\n\n            setCapturedFingered([...capturedFingered, biometricsEnrollments]);\n\n            _.find(fingerType, { display: templateType }).captured = true;\n\n            setFingerType([...fingerType]);\n\n            setObjValues({ ...objValues, templateType: \"\" });\n            setIsNewStatus(false);\n            toast.warning(response.data.message.WARNING);\n          } else if (response.data.type === \"SUCCESS\") {\n            const templateType = response.data.templateType;\n            setTryAgain(false);\n            setSuccess(true);\n\n            let biometricsEnrollments = response.data;\n            biometricsEnrollments.capturedBiometricsList = _.uniqBy(\n              biometricsEnrollments.capturedBiometricsList,\n              \"templateType\"\n            );\n\n            setCapturedFingered([...capturedFingered, biometricsEnrollments]);\n\n            _.find(fingerType, { display: templateType }).captured = true;\n            setFingerType([...fingerType]);\n\n            setObjValues({ ...objValues, templateType: \"\" });\n            setIsNewStatus(false);\n          } else {\n            setLoading(false);\n            setTryAgain(true);\n            toast.error(\"Something went wrong capturing biometrics...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        })\n        .catch((error) => {\n          setLoading(false);\n        });\n    }\n  };\n\n  const saveBiometrics = (e) => {\n    e.preventDefault();\n    if (capturedFingered.length >= 1) {\n      const capturedObj = capturedFingered[capturedFingered.length - 1];\n\n      capturedObj.capturedBiometricsList = _.uniqBy(\n        capturedObj.capturedBiometricsList,\n        \"templateType\"\n      );\n\n      axios\n        .post(`${baseUrl}biometrics/templates`, capturedObj, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          //console.log(\"saved\", response);\n          toast.success(\"Biometric recaptured successfully\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n          setCapturedFingered([]);\n          getPersonBiometrics();\n          // props.updatePatientBiometricStatus(true);\n          props.getRecaptureCount();\n          props.toggle();\n        })\n        .catch((error) => {\n          toast.error(\"Something went wrong saving biometrics\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n          console.log(error.message);\n        });\n    } else {\n      toast.error(\"You can't save less than 2 finger\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  const deleteTempBiometrics = (x) => {\n    axios\n      .delete(\n        `${baseUrl}biometrics?personId=${x.patientId}&templateType=${x.templateType}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((resp) => {\n        _.find(fingerType, { display: x.templateType }).captured = false;\n        setFingerType([...fingerType]);\n        let deletedRecord = capturedFingered.filter(\n          (data) => data.templateType !== x.templateType\n        );\n\n        setCapturedFingered(deletedRecord);\n        toast.info(x.templateType + \" captured removed successfully!\");\n      })\n      .catch((error) => {\n        toast.error(\"Something went wrong\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n        console.log(error);\n      });\n  };\n\n  const getFingerprintsQuality = (imageQuality) => {\n    if (imageQuality > 60 && imageQuality <= 75) {\n      return (\n        <Badge color=\"warning\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    } else if (imageQuality > 75) {\n      return (\n        <Badge color=\"success\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    } else {\n      return (\n        <Badge color=\"error\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    }\n  };\n  return (\n    <div className={classes.root}>\n      <div>\n        <div\n          style={{\n            flex: \"10\",\n            padding: \"5px\",\n            marginLeft: \"5px\",\n            border: \"1px solid rgba(99, 99, 99, 0.2)\",\n            boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n          }}\n        >\n          <Row>\n            <ToastContainer />\n            <Col md={3}>\n              <FormGroup>\n                <Label\n                  for=\"device\"\n                  style={{\n                    color: \"#014d88\",\n                    fontWeight: \"bold\",\n                    fontSize: \"14px\",\n                  }}\n                >\n                  {\" \"}\n                  Device{\" \"}\n                </Label>\n                <Input\n                  type=\"select\"\n                  name=\"device\"\n                  id=\"device\"\n                  //onChange={checkDevice}\n                  value={objValues.device}\n                  required\n                  disabled\n                >\n                  {biometricDevices.map(({ id, name, active, url, type }) => (\n                    <option key={id} value={url}>\n                      {type}\n                    </option>\n                  ))}\n                </Input>\n\n                {errors.device !== \"\" ? (\n                  <span className={classes.error}>{errors.device}</span>\n                ) : (\n                  \"\"\n                )}\n              </FormGroup>\n            </Col>\n\n            <Col md={3}>\n              <FormGroup>\n                <Label\n                  for=\"device\"\n                  style={{\n                    color: \"#014d88\",\n                    fontWeight: \"bold\",\n                    fontSize: \"14px\",\n                  }}\n                >\n                  Select Finger\n                </Label>\n                <Input\n                  type=\"select\"\n                  name=\"templateType\"\n                  id=\"templateType\"\n                  onChange={handleInputChange}\n                  value={objValues.templateType}\n                  required\n                >\n                  <option value=\"\">Select Finger </option>\n\n                  {fingerType &&\n                    _.filter(fingerType, [\"captured\", false]).map((value) => (\n                      <option key={value.id} value={value.display}>\n                        {value.display}\n                      </option>\n                    ))}\n                </Input>\n                {errors.templateType !== \"\" ? (\n                  <span className={classes.error}>{errors.templateType}</span>\n                ) : (\n                  \"\"\n                )}\n              </FormGroup>\n            </Col>\n\n            <Col md={3}>\n              {!loading ? (\n                <>\n                  <MatButton\n                    type=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={captureFinger}\n                    className={\"mt-4\"}\n                    style={{ backgroundColor: \"#992E62\" }}\n                    startIcon={<FingerprintIcon />}\n                    disabled={loading}\n                  >\n                    validate Finger\n                  </MatButton>\n                </>\n              ) : (\n                <>\n                  <MatButton\n                    type=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={\"mt-4\"}\n                    style={{ backgroundColor: \"#992E62\" }}\n                    startIcon={<CircularProgress />}\n                  >\n                    Validating...\n                  </MatButton>\n                </>\n              )}\n            </Col>\n            <br />\n            <Col md={12}>\n              {loading ? (\n                <>\n                  <b>Validating finger...</b>\n                  <LinearProgress />\n                </>\n              ) : (\n                \"\"\n              )}\n            </Col>\n          </Row>\n        </div>\n\n        <Row></Row>\n      </div>\n    </div>\n  );\n};\n\nexport default Pims;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PatientBiometrics.js",["443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474"],"import React, { useState, useEffect } from \"react\";\nimport _ from \"lodash\";\nimport axios from \"axios\";\nimport MatButton from \"@material-ui/core/Button\";\nimport { Icon, List } from \"semantic-ui-react\";\nimport FingerprintIcon from \"@material-ui/icons/Fingerprint\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport leftFinger1 from \"../images/fingers/left_hand_6.png\";\nimport leftFinger2 from \"../images/fingers/left_hand_7.png\";\nimport leftFinger3 from \"../images/fingers/left_hand_8.png\";\nimport leftFinger4 from \"../images/fingers/left_hand_9.png\";\nimport leftFinger5 from \"../images/fingers/left_hand_10.png\";\nimport rightFinger1 from \"../images/fingers/right_hand_1.png\";\nimport rightFinger2 from \"../images/fingers/right_hand_2.png\";\nimport rightFinger3 from \"../images/fingers/right_hand_3.png\";\nimport rightFinger4 from \"../images/fingers/right_hand_4.png\";\nimport rightFinger5 from \"../images/fingers/right_hand_5.png\";\nimport { token, url as baseUrl } from \"../../../api\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport {\n  CardTitle,\n  Row,\n  Label,\n  Card,\n  CardBody,\n  Col,\n  FormGroup,\n  CardHeader,\n  Input,\n  Badge,\n  CardSubtitle,\n} from \"reactstrap\";\n\nconst PatientBiometrics = (props) => {\n  const [loading, setLoading] = useState(false);\n  const [devices, setDevices] = useState([]);\n  const [biometricDevices, setbiometricDevices] = useState([]);\n  const [isNewStatus, setIsNewStatus] = useState(true);\n  const [tryAgain, setTryAgain] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [imageQuality, setImageQuality] = useState(false);\n  const [objValues, setObjValues] = useState({\n    biometricType: \"FINGERPRINT\",\n    patientId: props.patientId,\n    templateType: \"\",\n    device: \"\",\n    reason: \"\",\n    age: \"\",\n  });\n  const [leftFinger1Value, setLeftFinger1Value] = useState({});\n  const [leftFinger2Value, setLeftFinger2Value] = useState({});\n  const [leftFinger3Value, setLeftFinger3Value] = useState({});\n  const [leftFinger4Value, setLeftFinger4Value] = useState({});\n  const [leftFinger5Value, setLeftFinger5Value] = useState({});\n\n  useEffect(() => {\n    TemplateType();\n  }, []);\n\n  const TemplateType = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (response.data === true) {\n          axios\n            .get(`${baseUrl}biometrics/devices?active=true`, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              setDevices(response.data.find((x) => x.active === true));\n              setbiometricDevices(response.data);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const calculate_age = (dob) => {\n    const today = new Date();\n    const dateParts = dob.split(\"-\");\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\n    let age_now = today.getFullYear() - birthDate.getFullYear();\n    const m = today.getMonth() - birthDate.getMonth();\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age_now--;\n    }\n    if (age_now === 0) {\n      return m + \" month(s)\";\n    }\n    return age_now;\n  };\n\n  const getFingerprintsQuality = (imageQuality) => {\n    if (imageQuality > 60 && imageQuality <= 75) {\n      return (\n        <Badge color=\"warning\" style={{ fontSize: \"14px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    } else if (imageQuality > 75) {\n      return (\n        <Badge color=\"success\" style={{ fontSize: \"14px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    } else {\n      return (\n        <Badge color=\"error\" style={{ fontSize: \"14px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    }\n  };\n\n  const captureFinger = (e, templateType) => {\n    e.preventDefault();\n\n    let objValues = {\n      biometricType: \"FINGERPRINT\",\n      patientId: \"000101\",\n      templateType: templateType,\n      device: \"\",\n      reason: \"\",\n      age: \"\",\n    };\n\n    setLoading(true);\n\n    axios\n      .post(\n        `${devices.url}?reader=${devices.name}&isNew=${isNewStatus}`,\n        objValues,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        setLoading(false);\n        console.log(response);\n\n        if (response.data.type === \"ERROR\") {\n          setLoading(false);\n          setTryAgain(true);\n\n          // window.setTimeout(() => {\n          //   setTryAgain(false);\n          // }, 5000);\n\n          toast.error(response.data.message.ERROR);\n          setIsNewStatus(false);\n        } else if (response.data.type === \"SUCCESS\") {\n          const templateType = response.data.templateType;\n          console.log(templateType);\n          if (templateType === \"Left Thumb\") {\n            setLeftFinger1Value(response.data);\n          } else if (templateType === \"Left Index Finger\") {\n            setLeftFinger2Value(response.data);\n          } else if (templateType === \"Left Middle Finger\") {\n            setLeftFinger3Value(response.data);\n          } else if (templateType === \"Left Ring Finger\") {\n            setLeftFinger4Value(response.data);\n          } else if (templateType === \"Left Little Finger\") {\n            setLeftFinger5Value(response.data);\n          }\n          setTryAgain(false);\n          setSuccess(true);\n\n          // window.setTimeout(() => {\n          //   setSuccess(false);\n          //   setLoading(false);\n          // }, 5000);\n\n          setObjValues({ ...objValues, templateType: \"\" });\n          setIsNewStatus(false);\n        } else {\n          setLoading(false);\n          setTryAgain(true);\n          toast.error(\"Something went wrong capturing biometrics...\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        }\n      })\n      .catch((error) => {\n        setLoading(false);\n      });\n  };\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          Biometrics Capture & Recapture{\" \"}\n          <p\n            style={{\n              color: \"#014d88\",\n              fontSize: \"14px\",\n            }}\n          >\n            <b>Device: </b> {devices.type}\n          </p>\n          <MatButton\n            className=\" float-right mr-1\"\n            variant=\"contained\"\n            startIcon={<SaveIcon />}\n            style={{\n              backgroundColor: \"#014d88\",\n              color: \"#fff\",\n              height: \"35px\",\n              float: \"right\",\n              //marginBottom: \"40px\",\n            }}\n            onClick={\"\"}\n          >\n            <span style={{ textTransform: \"capitalize\" }}>\n              Save Captured Finger Prints\n            </span>\n          </MatButton>\n        </CardHeader>\n        <CardBody>\n          <Row>\n            <Col>\n              <Card>\n                <CardBody>\n                  {\n                    _.isEmpty(leftFinger1Value) ? (\n                      \"\"\n                    ) : (\n                      <CardTitle>\n                        {getFingerprintsQuality(leftFinger1Value.imageQuality)}{\" \"}\n                        <span\n                          onClick={() => {\n                            \"\";\n                            // deleteTempBiometrics(x);\n                          }}\n                        >\n                          <Icon\n                            name=\"cancel\"\n                            color=\"red\"\n                            style={{ float: \"right\" }}\n                          />{\" \"}\n                        </span>\n                      </CardTitle>\n                    )\n                    // <CardSubtitle></CardSubtitle>\n                  }\n                  <center>\n                    {_.isEmpty(leftFinger1Value) ? (\n                      <img src={leftFinger1} width={150} height={180} />\n                    ) : (\n                      <img\n                        src={`data:image/bmp;base64,${leftFinger1Value.image}`}\n                        width={150}\n                        height={180}\n                      />\n                    )}\n                  </center>\n                  <center>\n                    <MatButton\n                      type=\"button\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={(event) => captureFinger(event, \"Left Thumb\")}\n                      className={\"mt-4\"}\n                      style={{ backgroundColor: \"#992E62\" }}\n                      startIcon={<FingerprintIcon />}\n                    >\n                      Capture Finger\n                    </MatButton>\n                  </center>\n                </CardBody>\n              </Card>\n            </Col>\n            <Col>\n              <Card>\n                <CardBody>\n                  {_.isEmpty(leftFinger2Value) ? (\n                    \"\"\n                  ) : (\n                    <CardTitle>\n                      {getFingerprintsQuality(80)}{\" \"}\n                      <span\n                        onClick={() => {\n                          \"\";\n                          // deleteTempBiometrics(x);\n                        }}\n                      >\n                        <Icon\n                          name=\"cancel\"\n                          color=\"red\"\n                          style={{ float: \"right\" }}\n                        />{\" \"}\n                      </span>\n                    </CardTitle>\n                  )}\n                  <center>\n                    {_.isEmpty(leftFinger2Value) ? (\n                      <img src={leftFinger2} width={150} height={180} />\n                    ) : (\n                      <img\n                        src={`data:image/bmp;base64,${leftFinger2Value.image}`}\n                        width={150}\n                        height={180}\n                      />\n                    )}\n                  </center>\n                  <center>\n                    <MatButton\n                      type=\"button\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={(event) =>\n                        captureFinger(event, \"Left Index Finger\")\n                      }\n                      className={\"mt-4\"}\n                      style={{ backgroundColor: \"#992E62\" }}\n                      startIcon={<FingerprintIcon />}\n                    >\n                      Capture Finger\n                    </MatButton>\n                  </center>\n                </CardBody>\n              </Card>\n            </Col>\n            <Col>\n              <Card>\n                <CardBody>\n                  {_.isEmpty(leftFinger3Value) ? (\n                    \"\"\n                  ) : (\n                    <CardTitle>\n                      {getFingerprintsQuality(80)}{\" \"}\n                      <span\n                        onClick={() => {\n                          \"\";\n                          // deleteTempBiometrics(x);\n                        }}\n                      >\n                        <Icon\n                          name=\"cancel\"\n                          color=\"red\"\n                          style={{ float: \"right\" }}\n                        />{\" \"}\n                      </span>\n                    </CardTitle>\n                  )}\n                  <center>\n                    {_.isEmpty(leftFinger3Value) ? (\n                      <img src={leftFinger3} width={150} height={180} />\n                    ) : (\n                      <img\n                        src={`data:image/bmp;base64,${leftFinger3Value.image}`}\n                        width={150}\n                        height={180}\n                      />\n                    )}\n                  </center>\n                  <center>\n                    <MatButton\n                      type=\"button\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={(event) =>\n                        captureFinger(event, \"Left Middle Finger\")\n                      }\n                      className={\"mt-4\"}\n                      style={{ backgroundColor: \"#992E62\" }}\n                      startIcon={<FingerprintIcon />}\n                    >\n                      Capture Finger\n                    </MatButton>\n                  </center>\n                </CardBody>\n              </Card>\n            </Col>\n            <Col>\n              <Card>\n                <CardBody>\n                  {_.isEmpty(leftFinger4Value) ? (\n                    \"\"\n                  ) : (\n                    <CardTitle>\n                      {getFingerprintsQuality(80)}{\" \"}\n                      <span\n                        onClick={() => {\n                          \"\";\n                          // deleteTempBiometrics(x);\n                        }}\n                      >\n                        <Icon\n                          name=\"cancel\"\n                          color=\"red\"\n                          style={{ float: \"right\" }}\n                        />{\" \"}\n                      </span>\n                    </CardTitle>\n                  )}\n                  <center>\n                    {_.isEmpty(leftFinger4Value) ? (\n                      <img src={leftFinger4} width={150} height={180} />\n                    ) : (\n                      <img\n                        src={`data:image/bmp;base64,${leftFinger4Value.image}`}\n                        width={150}\n                        height={180}\n                      />\n                    )}\n                  </center>\n                  <center>\n                    <MatButton\n                      type=\"button\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={(event) =>\n                        captureFinger(event, \"Left Ring Finger\")\n                      }\n                      className={\"mt-4\"}\n                      style={{ backgroundColor: \"#992E62\" }}\n                      startIcon={<FingerprintIcon />}\n                    >\n                      Capture Finger\n                    </MatButton>\n                  </center>\n                </CardBody>\n              </Card>\n            </Col>\n            <Col>\n              <Card>\n                <CardBody>\n                  {_.isEmpty(leftFinger5Value) ? (\n                    \"\"\n                  ) : (\n                    <CardTitle>\n                      {getFingerprintsQuality(80)}{\" \"}\n                      <span\n                        onClick={() => {\n                          \"\";\n                          // deleteTempBiometrics(x);\n                        }}\n                      >\n                        <Icon\n                          name=\"cancel\"\n                          color=\"red\"\n                          style={{ float: \"right\" }}\n                        />{\" \"}\n                      </span>\n                    </CardTitle>\n                  )}\n                  <center>\n                    {_.isEmpty(leftFinger5Value) ? (\n                      <img src={leftFinger5} width={150} height={180} />\n                    ) : (\n                      <img\n                        src={`data:image/bmp;base64,${leftFinger5Value.image}`}\n                        width={150}\n                        height={180}\n                      />\n                    )}\n                  </center>\n                  <center>\n                    <MatButton\n                      type=\"button\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={(event) =>\n                        captureFinger(event, \"Left Little Finger\")\n                      }\n                      className={\"mt-4\"}\n                      style={{ backgroundColor: \"#992E62\" }}\n                      startIcon={<FingerprintIcon />}\n                    >\n                      Capture Finger\n                    </MatButton>\n                  </center>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          <br />\n          <Row></Row>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default PatientBiometrics;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Home\\Biometrics.js",["475","476","477","478","479","480","481","482"],"import React, { useState, useRef } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"../../../../api\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport Button from \"@material-ui/core/Button\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { FaEye } from \"react-icons/fa\";\nimport { MdPerson } from \"react-icons/md\";\n\nimport \"@reach/menu-button/styles.css\";\nimport { ToastContainer } from \"react-toastify\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"../patient.css\";\nimport SplitActionButton from \"../SplitActionButton\";\nimport TextField from \"@mui/material/TextField\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport BiometricsList from \"./BiometricsList\";\nimport NotCaptured from \"./NotCaptured\";\nimport NoRecapture from \"./NoRecapture\";\n\nimport { forwardRef } from \"react\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& a\": {\n      textDecoration: \"none !important\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst Biometrics = (props) => {\n  const tableRef = useRef(null);\n  const classes = useStyles();\n  const [patients, setPatients] = useState([]);\n  const [permissions, setPermissions] = useState(props.permissions);\n  const [loading, setLoading] = useState(\"\");\n  const [modal, setModal] = useState(false);\n  const [patient, setPatient] = useState(false);\n  const [enablePPI, setEnablePPI] = useState(true);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [status, setStatus] = useState(1);\n  const toggle = (id) => {\n    const patient = patients.find((obj) => obj.id == id);\n    setPatient(patient);\n    setModal(!modal);\n  };\n\n  function actionItems(row) {\n    return [\n      {\n        name: \"View\",\n        type: \"link\",\n        icon: <FaEye size=\"22\" />,\n        to: {\n          pathname: \"/patient-biometrics\",\n          state: { patientObj: row, permissions: permissions },\n        },\n      },\n      {\n        ...(permissions.includes(\"view_patient\") ||\n          (permissions.includes(\"all_permission\") && {\n            name: \"Dashboard\",\n            type: \"link\",\n            icon: <MdPerson size=\"20\" color=\"rgb(4, 196, 217)\" />,\n            to: {\n              pathname: \"/patient-biometrics\",\n              state: { patientObj: row, permissions: permissions },\n            },\n          })),\n      },\n    ];\n  }\n  const handleRemoteData = (query) =>\n    new Promise((resolve, reject) => {\n      axios\n        .get(\n          `${baseUrl}patient/getall-patients-with-biometric?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        )\n        .then((response) => response)\n        .then((result) => {\n          resolve({\n            data: result.data.records.map((row) => ({\n              name: [row.firstName, row.otherName, row.surname]\n                .filter(Boolean)\n                .join(\", \"),\n              id: getHospitalNumber(row.identifier),\n              sex:\n                row.sex.toLowerCase().charAt(0).toUpperCase() +\n                row.sex.slice(1).toLowerCase(),\n              dateOfBirth: row.dateOfBirth,\n              age:\n                row.dateOfBirth === 0 ||\n                row.dateOfBirth === undefined ||\n                row.dateOfBirth === null ||\n                row.dateOfBirth === \"\"\n                  ? 0\n                  : calculateAge(row.dateOfBirth),\n              actions: (\n                <div>\n                  {permissions.includes(\"view_patient\") ||\n                  permissions.includes(\"all_permission\") ? (\n                    <SplitActionButton actions={actionItems(row)} />\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              ),\n            })),\n            page: query.page,\n            totalCount: result.data.totalRecords,\n          });\n        });\n    });\n\n  const onDelete = async (id) => {\n    try {\n      if (id) {\n        const response = await axios.delete(`${baseUrl}patient/${id}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        window.location.reload();\n      }\n    } catch (e) {}\n  };\n\n  const onCancelDelete = () => {\n    setModal(false);\n  };\n\n  const calculateAge = (dob) => {\n    const today = new Date();\n    const birthDate = new Date(dob);\n\n    let ageYears = today.getFullYear() - birthDate.getFullYear();\n    const monthDifference = today.getMonth() - birthDate.getMonth();\n\n    if (\n      ageYears <= 0 &&\n      monthDifference < 0 &&\n      today.getDate() < birthDate.getDate()\n    ) {\n      ageYears--;\n    }\n\n    if (ageYears === 0) {\n      return monthDifference === 0\n        ? \"Less than a month\"\n        : `${monthDifference} month(s)`;\n    }\n\n    return ageYears === 1 ? \"1 year\" : `${ageYears} years`;\n  };\n\n  const getHospitalNumber = (identifier) => {\n    const hospitalNumber = identifier.identifier.find(\n      (obj) => obj.type == \"HospitalNumber\"\n    );\n    return hospitalNumber ? hospitalNumber.value : \"\";\n  };\n\n  const enablePPIColumns = () => {\n    setEnablePPI(!enablePPI);\n  };\n  const PPISelect = () => (\n    <div>\n      {permissions.includes(\"view_patient\") ||\n      permissions.includes(\"all_permission\") ? (\n        <FormGroup className=\" float-right mr-1\">\n          <FormControlLabel\n            control={\n              <Checkbox\n                onChange={enablePPIColumns}\n                checked={!enablePPI}\n                style={{ color: \"#014d88\", fontWeight: \"bold\" }}\n              />\n            }\n            label=\"Show PII\"\n            style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n          />\n        </FormGroup>\n      ) : (\n        <h5 style={{ color: \"#3d4465\", fontWeight: \"bold\" }}>Patients</h5>\n      )}\n    </div>\n  );\n\n  const handleChangePage = (page) => {\n    setCurrentPage(page + 1);\n  };\n\n  const handleChangeStatus = (e) => {\n    let count = e.target.value;\n    if (count === \"1\") {\n      setStatus(1);\n    } else if (count === \"2\") {\n      setStatus(2);\n    } else if (count === \"3\") {\n      setStatus(3);\n    } else if (count === \"4\") {\n      setStatus(4);\n    } else {\n      setStatus(1);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <ToastContainer autoClose={3000} hideProgressBar />\n      <TextField\n        id=\"biometrics\"\n        select\n        label=\"Select\"\n        defaultValue=\"1\"\n        helperText=\"Select patient biometric status\"\n        onChange={(e) => handleChangeStatus(e)}\n      >\n        <MenuItem key=\"1\" value=\"1\">\n          With Biometrics\n        </MenuItem>\n        <MenuItem key=\"2\" value=\"2\">\n          Incomplete Biometrics\n        </MenuItem>\n        <MenuItem key=\"3\" value=\"3\">\n          No Biometrics Captured\n        </MenuItem>\n        <MenuItem key=\"4\" value=\"4\">\n          No Biometrics Re-captured\n        </MenuItem>\n      </TextField>\n      {status === 1 ? (\n        <>\n          <h3>Patients with biometrics</h3>\n          <MaterialTable\n            tableRef={tableRef}\n            /*onSearchChange={(e) => {\n                    handleSearchChange(e);\n                }}*/\n            icons={tableIcons}\n            title={<PPISelect />}\n            columns={[\n              {\n                title: \"Name\",\n                field: \"name\",\n                filtering: false,\n                hidden: enablePPI,\n              },\n              { title: \"Hosp. Number\", field: \"id\", filtering: false },\n              { title: \"Sex\", field: \"sex\", filtering: false },\n              {\n                title: \"Date Of Birth\",\n                field: \"dateOfBirth\",\n                filtering: false,\n              },\n              { title: \"Age\", field: \"age\", filtering: false },\n              /*{ title: \"Address\", field: \"address\", filtering: false },*/\n              /*{ title: \"Status\", field: \"status\", filtering: false },*/\n              { title: \"Actions\", field: \"actions\", filtering: false },\n            ]}\n            isLoading={loading}\n            data={handleRemoteData}\n            options={{\n              headerStyle: {\n                backgroundColor: \"#014d88\",\n                color: \"#fff\",\n                fontSize: \"16px\",\n                padding: \"10px\",\n                fontWeight: \"bolder\",\n              },\n              searchFieldStyle: {\n                width: \"50%\",\n              },\n              filtering: false,\n              exportButton: false,\n              searchFieldAlignment: \"left\",\n              pageSizeOptions: [10, 20, 100],\n              pageSize: 10,\n              debounceInterval: 400,\n            }}\n            onChangePage={handleChangePage}\n            //localization={localization}\n          />\n        </>\n      ) : status === 2 ? (\n        <BiometricsList permissions={props.permissions} />\n      ) : status === 3 ? (\n        <NotCaptured permissions={props.permissions} />\n      ) : status === 4 ? (\n        <NoRecapture permissions={props.permissions} />\n      ) : (\n        \"\"\n      )}\n\n      <Modal isOpen={modal} toggle={onCancelDelete}>\n        <ModalHeader toggle={onCancelDelete}>Delete Patient</ModalHeader>\n        <ModalBody>\n          Are you sure to delete this record?{\" \"}\n          {patient\n            ? patient.surname +\n              \", \" +\n              patient.firstname +\n              \" \" +\n              patient.otherName\n            : \"\"}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            type=\"button\"\n            onClick={(e) => onDelete(patient.id)}\n          >\n            Yes\n          </Button>{\" \"}\n          <Button\n            color=\"secondary\"\n            type=\"button\"\n            onClick={(e) => onCancelDelete()}\n          >\n            No\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Biometrics;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Home\\PatientList.js",["483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515"],"import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"../../../../api\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Card, CardBody } from \"reactstrap\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  Input,\n  Label,\n  Button,\n} from \"reactstrap\";\n// import Button from \"@material-ui/core/Button\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { FaEye, FaUserPlus } from \"react-icons/fa\";\nimport {\n  MdDashboard,\n  MdDeleteForever,\n  MdModeEdit,\n  MdPerson,\n} from \"react-icons/md\";\nimport { Menu, MenuList, MenuButton, MenuItem } from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport { ToastContainer } from \"react-toastify\";\n//import { Label } from \"semantic-ui-react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"../patient.css\";\nimport SplitActionButton from \"../SplitActionButton\";\n\nimport { forwardRef } from \"react\";\n//import { Button} from \"react-bootstrap\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport Swal from \"sweetalert2\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& a\": {\n      textDecoration: \"none !important\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst PatientList = (props) => {\n  localStorage.setItem(\"menu\", JSON.stringify(0));\n  const tableRef = useRef(null);\n  const classes = useStyles();\n  const [patients, setPatients] = useState([]);\n  const [permissions, setPermissions] = useState(props.permissions);\n  const [loading, setLoading] = useState(\"\");\n  const [modal, setModal] = useState(false);\n  const [patient, setPatient] = useState(false);\n  const [enablePPI, setEnablePPI] = useState(true);\n  const [searchParams, setSearchParams] = useState(\"*\");\n  const [totalPages, setTotalPages] = useState(0);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const [reason, setReason] = useState({});\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [currentPage, setCurrentPage] = useState(1);\n  const history = useHistory();\n  const toggle = (id) => {\n    //        const patient = patients.find(obj => obj.id == id);\n    //        setPatient(patient);\n    localStorage.setItem(\"patientID\", JSON.stringify(id));\n    setModal(!modal);\n  };\n\n  const handleDelete = () => {\n    const patientId = localStorage.getItem(\"patientID\");\n    console.log(patientId, reason.reason);\n    axios\n      .delete(`${baseUrl}patient/${patientId}/${reason.reason}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        localStorage.removeItem(\"patientID\");\n        Swal.fire({\n          icon: \"success\",\n          text: \"Patient Deleted Successfully\",\n          timer: 1500,\n        });\n\n        setModal(false);\n        history.push(\"/\");\n      })\n      .catch((error) => {\n        Swal.fire({\n          icon: \"error\",\n          title: \"Oops...\",\n          text: \"An error occurred while deleting!!!\",\n        });\n      });\n  };\n\n  function actionItems(row) {\n    return [\n      {\n        name: \"View\",\n        type: \"link\",\n        icon: <FaEye size=\"22\" />,\n        to: {\n          pathname: \"/view-patient\",\n          state: { patientId: row.id, permissions: permissions },\n        },\n      },\n      {\n        ...(permissions.includes(\"view_patient\") ||\n          (permissions.includes(\"all_permission\") && {\n            name: \"Dashboard\",\n            type: \"link\",\n            icon: <MdPerson size=\"20\" color=\"rgb(4, 196, 217)\" />,\n            to: {\n              pathname: \"/patient-dashboard\",\n              state: { patientObj: row, permissions: permissions },\n            },\n          })),\n      },\n      {\n        ...(permissions.includes(\"edit_patient\") ||\n          (permissions.includes(\"all_permission\") && {\n            name: \"Edit\",\n            type: \"link\",\n            icon: <MdModeEdit size=\"20\" color=\"rgb(4, 196, 217)\" />,\n            to: {\n              pathname: \"/register-patient\",\n              state: { patientId: row.id, permissions: permissions },\n            },\n          })),\n      },\n      {\n        ...(permissions.includes(\"delete_patient\") ||\n          (permissions.includes(\"all_permission\") && {\n            name: \"Delete\",\n            type: \"link\",\n            icon: <MdDeleteForever size=\"20\" color=\"rgb(4, 196, 217)\" />,\n            deleteAction: () => {\n              toggle(row.id);\n            },\n            to: {\n              pathname: \"/#\",\n              state: { patientObj: row, permissions: permissions },\n            },\n          })),\n      },\n    ];\n  }\n  const handleRemoteData = (query) =>\n    new Promise((resolve, reject) => {\n      axios\n        .get(\n          `${baseUrl}patient?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        )\n        .then((response) => response)\n        .then((result) => {\n          if (result.data === \"\") {\n            resolve({\n              data: [],\n              page: 0,\n              totalCount: 0,\n            });\n          } else {\n            resolve({\n              data: result.data.records.map((row) => ({\n                name: [row.firstName, row.otherName, row.surname]\n                  .filter(Boolean)\n                  .join(\", \"),\n                id: getHospitalNumber(row.identifier),\n                sex:\n                  row.sex?.toLowerCase()?.charAt(0)?.toUpperCase() +\n                  row.sex?.slice(1)?.toLowerCase(),\n                dateOfBirth: row.dateOfBirth,\n                age:\n                  row.dateOfBirth === 0 ||\n                  row.dateOfBirth === undefined ||\n                  row.dateOfBirth === null ||\n                  row.dateOfBirth === \"\"\n                    ? 0\n                    : calculateAge(row.dateOfBirth),\n                actions: (\n                  <div>\n                    {permissions.includes(\"view_patient\") ||\n                    permissions.includes(\"all_permission\") ? (\n                      <SplitActionButton actions={actionItems(row)} />\n                    ) : (\n                      \"\"\n                    )}\n                  </div>\n                ),\n              })),\n              page: query.page,\n              totalCount: result.data.totalRecords,\n            });\n          }\n        });\n    });\n\n  const onDelete = async (id) => {\n    try {\n      if (id) {\n        const response = await axios.delete(`${baseUrl}patient/${id}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        window.location.reload();\n      }\n    } catch (e) {}\n  };\n\n  const onCancelDelete = () => {\n    setModal(false);\n  };\n\n  const calculateAge = (dob) => {\n    const today = new Date();\n    const birthDate = new Date(dob);\n\n    let ageYears = today.getFullYear() - birthDate.getFullYear();\n    const monthDifference = today.getMonth() - birthDate.getMonth();\n\n    if (\n      ageYears <= 0 &&\n      monthDifference < 0 &&\n      today.getDate() < birthDate.getDate()\n    ) {\n      ageYears--;\n    }\n\n    if (ageYears === 0) {\n      return monthDifference === 0\n        ? \"Less than a month\"\n        : `${monthDifference} month(s)`;\n    }\n\n    return ageYears === 1 ? \"1 year\" : `${ageYears} years`;\n  };\n\n  const getHospitalNumber = (identifier) => {\n    const hospitalNumber = identifier?.identifier?.find(\n      (obj) => obj.type == \"HospitalNumber\"\n    );\n    return hospitalNumber ? hospitalNumber.value : \"\";\n  };\n\n  const getAddress = (address) => {\n    const city =\n      address && address?.address && address?.address?.length > 0\n        ? address?.address[0]?.city\n        : null;\n    return city;\n  };\n\n  const getGender = (gender) => {\n    return gender.display;\n  };\n\n  const enablePPIColumns = () => {\n    setEnablePPI(!enablePPI);\n  };\n  const PPISelect = () => (\n    <div>\n      {permissions.includes(\"view_patient\") ||\n      permissions.includes(\"all_permission\") ? (\n        <FormGroup className=\" float-right mr-1\">\n          <FormControlLabel\n            control={\n              <Checkbox\n                onChange={enablePPIColumns}\n                checked={!enablePPI}\n                style={{ color: \"#014d88\", fontWeight: \"bold\" }}\n              />\n            }\n            label=\"Show PII\"\n            style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n          />\n        </FormGroup>\n      ) : (\n        <h5 style={{ color: \"#3d4465\", fontWeight: \"bold\" }}>Patients</h5>\n      )}\n    </div>\n  );\n\n  const handleChangePage = (page) => {\n    setCurrentPage(page + 1);\n  };\n  const localization = {\n    pagination: {\n      labelDisplayedRows: `${currentPage} - 10 of 2022`,\n    },\n  };\n\n  const handleInputChangeBasic = (e) => {\n    setReason({ [e.target.name]: e.target.value });\n  };\n\n  return (\n    <div className={classes.root}>\n      <ToastContainer autoClose={3000} hideProgressBar />\n      <MaterialTable\n        tableRef={tableRef}\n        /*onSearchChange={(e) => {\n                    handleSearchChange(e);\n                }}*/\n        icons={tableIcons}\n        title={<PPISelect />}\n        columns={[\n          {\n            title: \"Name\",\n            field: \"name\",\n            filtering: false,\n            hidden: enablePPI,\n          },\n          { title: \"Hosp. Number\", field: \"id\", filtering: false },\n          { title: \"Sex\", field: \"sex\", filtering: false },\n          { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\n          { title: \"Age\", field: \"age\", filtering: false },\n          /*{ title: \"Address\", field: \"address\", filtering: false },*/\n          /*{ title: \"Status\", field: \"status\", filtering: false },*/\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        isLoading={loading}\n        data={handleRemoteData}\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n            fontSize: \"16px\",\n            padding: \"10px\",\n            fontWeight: \"bolder\",\n          },\n          searchFieldStyle: {\n            width: \"50%\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n          sorting: true,\n        }}\n        onChangePage={handleChangePage}\n        //localization={localization}\n      />\n      <Modal isOpen={modal} toggle={onCancelDelete}>\n        <ModalHeader toggle={onCancelDelete}>Delete Patient</ModalHeader>\n        <ModalBody>\n          Are you sure you want to delete this record?{\" \"}\n          {patient\n            ? patient.surname +\n              \", \" +\n              patient.firstname +\n              \" \" +\n              patient.otherName\n            : \"\"}{\" \"}\n          <Form>\n            <br />\n            <div className=\"row\">\n              <div className=\"form-group mb-3 col-md-12\">\n                <Label for=\"reason\">\n                  Kindly provide a reason\n                  <span style={{ color: \"red\" }}> *</span>\n                </Label>\n                <Input\n                  className=\"form-control\"\n                  type=\"textarea\"\n                  name=\"reason\"\n                  id=\"reason\"\n                  onChange={handleInputChangeBasic}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                  required\n                />\n              </div>\n            </div>\n            <Button color=\"danger\" type=\"button\" onClick={handleDelete}>\n              Yes\n            </Button>{\" \"}\n            <Button\n              color=\"primary\"\n              type=\"button\"\n              onClick={(e) => onCancelDelete()}\n            >\n              No\n            </Button>\n          </Form>\n        </ModalBody>\n        <ModalFooter></ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nexport default PatientList;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Home\\CheckedInPatients.js",["516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547"],"import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"../../../../api\";\nimport { Link } from \"react-router-dom\";\nimport { Card, CardBody } from \"reactstrap\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport Button from \"@material-ui/core/Button\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { FaEye, FaUserPlus } from \"react-icons/fa\";\nimport {\n  MdDashboard,\n  MdDeleteForever,\n  MdModeEdit,\n  MdPerson,\n} from \"react-icons/md\";\nimport { Menu, MenuList, MenuButton, MenuItem } from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport { ToastContainer } from \"react-toastify\";\nimport { Label } from \"semantic-ui-react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"../patient.css\";\nimport SplitActionButton from \"../SplitActionButton\";\n\nimport { forwardRef } from \"react\";\n//import { Button} from \"react-bootstrap\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& a\": {\n      textDecoration: \"none !important\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst CheckedInPatients = (props) => {\n  const tableRef = useRef(null);\n  const classes = useStyles();\n  const [patients, setPatients] = useState([]);\n  const [permissions, setPermissions] = useState(props.permissions);\n  const [loading, setLoading] = useState(\"\");\n  const [modal, setModal] = useState(false);\n  const [patient, setPatient] = useState(false);\n  const [enablePPI, setEnablePPI] = useState(true);\n  const [searchParams, setSearchParams] = useState(\"*\");\n  const [totalPages, setTotalPages] = useState(0);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [currentPage, setCurrentPage] = useState(1);\n  const toggle = (id) => {\n    const patient = patients.find((obj) => obj.id == id);\n    setPatient(patient);\n    setModal(!modal);\n  };\n\n  function actionItems(row) {\n    return [\n      {\n        name: \"View\",\n        type: \"link\",\n        icon: <FaEye size=\"22\" />,\n        to: {\n          pathname: \"/register-patient\",\n          state: { patientId: row.id, permissions: permissions },\n        },\n      },\n      {\n        ...(permissions.includes(\"view_patient\") ||\n          (permissions.includes(\"all_permission\") && {\n            name: \"Dashboard\",\n            type: \"link\",\n            icon: <MdPerson size=\"20\" color=\"rgb(4, 196, 217)\" />,\n            to: {\n              pathname: \"/patient-dashboard\",\n              state: { patientObj: row, permissions: permissions },\n            },\n          })),\n      },\n      {\n        ...(permissions.includes(\"edit_patient\") ||\n          (permissions.includes(\"all_permission\") && {\n            name: \"Edit\",\n            type: \"link\",\n            icon: <MdModeEdit size=\"20\" color=\"rgb(4, 196, 217)\" />,\n            to: {\n              pathname: \"/register-patient\",\n              state: { patientId: row.id, permissions: permissions },\n            },\n          })),\n      },\n      {\n        ...(permissions.includes(\"delete_patient\") ||\n          (permissions.includes(\"all_permission\") && {\n            name: \"Delete\",\n            type: \"link\",\n            icon: <MdDeleteForever size=\"20\" color=\"rgb(4, 196, 217)\" />,\n            to: {\n              pathname: \"/#\",\n              state: { patientObj: row, permissions: permissions },\n            },\n          })),\n      },\n    ];\n  }\n  const handleRemoteData = (query) =>\n    new Promise((resolve, reject) => {\n      axios\n        .get(\n          `${baseUrl}patient/checked-in?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        )\n        .then((response) => response)\n        .then((result) => {\n          resolve({\n            data: result.data.records.map((row) => ({\n              name: [row.firstName, row.otherName, row.surname]\n                .filter(Boolean)\n                .join(\", \"),\n              id: getHospitalNumber(row.identifier),\n              sex:\n                row.sex?.toLowerCase()?.charAt(0)?.toUpperCase() +\n                row.sex?.slice(1)?.toLowerCase(),\n              dateOfBirth: row.dateOfBirth,\n              age:\n                row.dateOfBirth === 0 ||\n                row.dateOfBirth === undefined ||\n                row.dateOfBirth === null ||\n                row.dateOfBirth === \"\"\n                  ? 0\n                  : calculateAge(row.dateOfBirth),\n              //visit_date: row.visit_date,\n              actions: (\n                <div>\n                  {permissions.includes(\"view_patient\") ||\n                  permissions.includes(\"all_permission\") ? (\n                    <SplitActionButton actions={actionItems(row)} />\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              ),\n            })),\n            page: query.page,\n            totalCount: result.data.totalRecords,\n          });\n        });\n    });\n\n  const onDelete = async (id) => {\n    try {\n      if (id) {\n        const response = await axios.delete(`${baseUrl}patient/${id}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        window.location.reload();\n      }\n    } catch (e) {}\n  };\n\n  const onCancelDelete = () => {\n    setModal(false);\n  };\n\n  const calculateAge = (dob) => {\n    const today = new Date();\n    const birthDate = new Date(dob);\n\n    let ageYears = today.getFullYear() - birthDate.getFullYear();\n    const monthDifference = today.getMonth() - birthDate.getMonth();\n\n    if (\n      ageYears <= 0 &&\n      monthDifference < 0 &&\n      today.getDate() < birthDate.getDate()\n    ) {\n      ageYears--;\n    }\n\n    if (ageYears === 0) {\n      return monthDifference === 0\n        ? \"Less than a month\"\n        : `${monthDifference} month(s)`;\n    }\n\n    return ageYears === 1 ? \"1 year\" : `${ageYears} years`;\n  };\n\n  const getHospitalNumber = (identifier) => {\n    const hospitalNumber = identifier.identifier.find(\n      (obj) => obj.type == \"HospitalNumber\"\n    );\n    return hospitalNumber ? hospitalNumber.value : \"\";\n  };\n\n  const getAddress = (address) => {\n    const city =\n      address && address.address && address.address.length > 0\n        ? address.address[0].city\n        : null;\n    return city;\n  };\n\n  const getGender = (gender) => {\n    return gender.display;\n  };\n\n  const enablePPIColumns = () => {\n    setEnablePPI(!enablePPI);\n  };\n  const PPISelect = () => (\n    <div>\n      {permissions.includes(\"view_patient\") ||\n      permissions.includes(\"all_permission\") ? (\n        <FormGroup className=\" float-right mr-1\">\n          <FormControlLabel\n            control={\n              <Checkbox\n                onChange={enablePPIColumns}\n                checked={!enablePPI}\n                style={{ color: \"#014d88\", fontWeight: \"bold\" }}\n              />\n            }\n            label=\"Show PII\"\n            style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n          />\n        </FormGroup>\n      ) : (\n        <h5 style={{ color: \"#3d4465\", fontWeight: \"bold\" }}>Patients</h5>\n      )}\n    </div>\n  );\n\n  const handleChangePage = (page) => {\n    setCurrentPage(page + 1);\n  };\n  const localization = {\n    pagination: {\n      labelDisplayedRows: `Page: ${currentPage}`,\n    },\n  };\n\n  return (\n    <div className={classes.root}>\n      <ToastContainer autoClose={3000} hideProgressBar />\n      <MaterialTable\n        tableRef={tableRef}\n        /*onSearchChange={(e) => {\n                    handleSearchChange(e);\n                }}*/\n        icons={tableIcons}\n        title={<PPISelect />}\n        columns={[\n          {\n            title: \"Name\",\n            field: \"name\",\n            filtering: false,\n            hidden: enablePPI,\n          },\n          { title: \"Hosp. Number\", field: \"id\", filtering: false },\n          { title: \"Sex\", field: \"sex\", filtering: false },\n          { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\n          { title: \"Age\", field: \"age\", filtering: false },\n          //   { title: \"Visit Date\", field: \"visit_date\", filtering: false },\n          /*{ title: \"Status\", field: \"status\", filtering: false },*/\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        isLoading={loading}\n        data={handleRemoteData}\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n            fontSize: \"16px\",\n            padding: \"10px\",\n            fontWeight: \"bolder\",\n          },\n          searchFieldStyle: {\n            width: \"50%\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n        onChangePage={handleChangePage}\n        //localization={localization}\n      />\n      <Modal isOpen={modal} toggle={onCancelDelete}>\n        <ModalHeader toggle={onCancelDelete}>Delete Patient</ModalHeader>\n        <ModalBody>\n          Are you sure to delete this record?{\" \"}\n          {patient\n            ? patient.surname +\n              \", \" +\n              patient.firstname +\n              \" \" +\n              patient.otherName\n            : \"\"}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            type=\"button\"\n            onClick={(e) => onDelete(patient.id)}\n          >\n            Yes\n          </Button>{\" \"}\n          <Button\n            color=\"secondary\"\n            type=\"button\"\n            onClick={(e) => onCancelDelete()}\n          >\n            No\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nexport default CheckedInPatients;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PatientCard.js",["548","549","550","551","552","553","554","555","556","557"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport {\n  Accordion,\n  AccordionActions,\n  AccordionDetails,\n  AccordionSummary,\n} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { Button, Label } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Col, Row, Modal } from \"reactstrap\";\nimport CaptureBiometric from \"./CaptureBiometric\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../api\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\n\nconst styles = (theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: \"bottom\",\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: \"center\",\n  },\n  column: {\n    flexBasis: \"20.33%\",\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n});\n\nfunction PatientCard(props) {\n  //console.log(props);\n  const { classes } = props;\n  const patientObj = props.patientObj ? props.patientObj : {};\n\n  const permissions = props.permissions ? props.permissions : [];\n  const [modal, setModal] = useState(false); //Modal to collect sample\n  const [patientBiometricStatus, setPatientBiometricStatus] = useState(\n    props.patientBiometricStatus\n  );\n  const toggleModal = () => setModal(!modal);\n\n  const [biometricStatus, setBiometricStatus] = useState(false);\n  const [devices, setDevices] = useState([]);\n  useEffect(() => {\n    setPatientBiometricStatus(props.patientBiometricStatus);\n    TemplateType();\n  }, [props.patientBiometricStatus]);\n  //Get list of KP\n  const TemplateType = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response);\n        setBiometricStatus(response.data);\n        if (response.data === true) {\n          axios\n            .get(`${baseUrl}biometrics/devices`, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              setDevices(response.data);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const getHospitalNumber = (identifier) => {\n    const hospitalNumber = identifier.identifier.find(\n      (obj) => obj.type == \"HospitalNumber\"\n    );\n    return hospitalNumber ? hospitalNumber.value : \"\";\n  };\n\n  const calculateAge = (dob) => {\n    const today = new Date();\n    const birthDate = new Date(dob);\n\n    let ageYears = today.getFullYear() - birthDate.getFullYear();\n    const monthDifference = today.getMonth() - birthDate.getMonth();\n\n    if (\n      ageYears <= 0 &&\n      monthDifference < 0 &&\n      today.getDate() < birthDate.getDate()\n    ) {\n      ageYears--;\n    }\n\n    if (ageYears === 0) {\n      return monthDifference === 0\n        ? \"Less than a month\"\n        : `${monthDifference} month(s)`;\n    }\n\n    return ageYears === 1 ? \"1 year\" : `${ageYears} years`;\n  };\n\n  const getPhone = (contactPoint) => {\n    const phoneContact = contactPoint.contactPoint.find(\n      (obj) => obj.type == \"phone\"\n    );\n    return phoneContact ? phoneContact.value : \"\";\n  };\n\n  const getAddress = (address) => {\n    const city =\n      address && address.address && address.address.length > 0\n        ? `${address.address[0].line[0]}, ${address.address[0].city}`\n        : null;\n    return city;\n  };\n\n  const handleBiometricCapture = (id) => {\n    let patientObjID = id;\n    setModal(!modal);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Typography style={{ color: \"#992E62\" }}>Patient</Typography>\n        <Typography style={{ color: \"#014d88\" }}>Dashboard</Typography>\n      </Breadcrumbs>\n      <Accordion defaultExpanded>\n        <AccordionSummary>\n          <Row>\n            <Col md={11}>\n              <Row className={\"mt-1\"}>\n                <Col md={12} className={classes.root2}>\n                  <b style={{ fontSize: \"25px\", color: \"rgb(153, 46, 98)\" }}>\n                    {patientObj.surname +\n                      \", \" +\n                      patientObj.firstName +\n                      \" \" +\n                      patientObj.otherName !==\n                    null\n                      ? patientObj.otherName\n                      : \" \"}\n                  </b>\n                </Col>\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Hospital Number :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>\n                      {getHospitalNumber(patientObj.identifier)}\n                    </b>\n                  </span>\n                </Col>\n\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    Date Of Birth :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>{patientObj.dateOfBirth}</b>\n                  </span>\n                </Col>\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Age :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>\n                      {calculateAge(patientObj.dateOfBirth)}\n                    </b>\n                  </span>\n                </Col>\n                <Col md={4} style={{ marginTop: \"10px\" }}>\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Sex :{\" \"}\n                    <b\n                      style={{\n                        color: \"#0B72AA\",\n                        fontFamily: `'poppins', sans-serif`,\n                        fontWeight: \"bolder\",\n                      }}\n                    >\n                      {patientObj.sex}\n                    </b>\n                  </span>\n                </Col>\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Phone Number :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>\n                      {getPhone(patientObj.contactPoint)}\n                    </b>\n                  </span>\n                </Col>\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Address :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>\n                      {getAddress(patientObj.address)}{\" \"}\n                    </b>\n                  </span>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </AccordionSummary>\n        <AccordionDetails className={classes.details}>\n          {biometricStatus === true ? (\n            <>\n              <div>\n                <Typography variant=\"caption\">\n                  <Label\n                    style={{ height: \"30px\", fontSize: \"14px\" }}\n                    color={patientBiometricStatus === true ? \"green\" : \"red\"}\n                    size={\"large\"}\n                  >\n                    Biometric Status\n                    <Label.Detail>\n                      {patientBiometricStatus === true\n                        ? \"Captured\"\n                        : \"Not Captured\"}\n                    </Label.Detail>\n                  </Label>\n                  {patientBiometricStatus !== true ? (\n                    <>\n                      {permissions.includes(\"patient_check_in\") ||\n                      permissions.includes(\"all_permission\") ? (\n                        <>\n                          <Label\n                            style={{ height: \"30px\", fontSize: \"14px\" }}\n                            as=\"a\"\n                            color=\"teal\"\n                            onClick={() =>\n                              handleBiometricCapture(patientObj.id)\n                            }\n                            tag\n                          >\n                            Capture Now\n                          </Label>\n                        </>\n                      ) : (\n                        \"\"\n                      )}\n                    </>\n                  ) : (\n                    \"\"\n                  )}\n                </Typography>\n              </div>\n            </>\n          ) : (\n            <>\n              <div>\n                <Typography variant=\"caption\">\n                  <Label\n                    color={\"red\"}\n                    style={{ height: \"30px\", fontSize: \"14px\" }}\n                  >\n                    Biometrics Module Not Install\n                  </Label>\n                </Typography>\n              </div>\n            </>\n          )}\n        </AccordionDetails>\n      </Accordion>\n      {/*\n            <CaptureBiometric  modalstatus={modal} togglestatus={toggleModal} patientId={patientObj.id} biometricDevices={devices} setPatientBiometricStatus={setPatientBiometricStatus} />\n*/}\n    </div>\n  );\n}\n\nPatientCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PatientCard);\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\BaselineWarning.js",[],"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Recapture.js",["558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583"],"import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Row,\n  Label,\n  Col,\n  FormGroup,\n  Input,\n  Badge,\n} from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport MatButton from \"@material-ui/core/Button\";\nimport FingerprintIcon from \"@material-ui/icons/Fingerprint\";\nimport { Button2, Icon, List } from \"semantic-ui-react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\n\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../api\";\n\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nimport { Link, useHistory } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport fingerprintimage from \"../images/fingerprintimage.png\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport LinearProgress from \"@mui/material/LinearProgress\";\n\nimport _ from \"lodash\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":\n      {\n        fontFamily: \"FontAwesome\",\n        border: \"0\",\n        verticalAlign: \"middle\",\n        marginLeft: \".25em\",\n        lineHeight: \"1\",\n      },\n    \"& .dropdown-menu .dropdown-item\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      padding: \"0.3rem 1.5rem\",\n      fontWeight: \"bold\",\n    },\n    \"& .mt-4\": {\n      marginTop: \"28px !important\",\n    },\n    \"& .form-control\": {\n      color: \"#992E62\",\n    },\n    \"& .form-control:focus\": {\n      color: \"#014d88\",\n    },\n    \"& .sharp \": {\n      \"min-width\": \"35px\",\n      padding: \"5px\",\n      height: \"35px\",\n      \"min-height\": \"35px\",\n    },\n  },\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n}));\n\nconst Recapture = (props) => {\n  //console.log(\"patient Id\", props.patientId);\n  const classes = useStyles();\n  let history = useHistory();\n  const permissions =\n    history.location && history.location.state\n      ? history.location.state.permissions\n      : [];\n  const [biometricDevices, setbiometricDevices] = useState([]);\n  const [objValues, setObjValues] = useState({\n    biometricType: \"FINGERPRINT\",\n    patientId: props.patientId,\n    templateType: \"\",\n    device: \"SECUGEN\",\n    reason: \"\",\n    age: \"\",\n    capturedBiometricsList: [],\n    deduplication: {\n      patientId: \"\",\n      deduplicationDate: null,\n      matchCount: 0,\n      unMatchCount: 0,\n      baselineFingerCount: 0,\n      recaptureFingerCount: 0,\n      perfectMatchCount: 0,\n      imperfectMatchCount: 0,\n      details: null,\n    },\n  });\n  const [fingerType, setFingerType] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [pageLoading, setPageLoading] = useState(false);\n  const [showCapture, setshowCapture] = React.useState(false);\n  const [tryAgain, setTryAgain] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const [errors, setErrors] = useState({});\n  const [storedBiometrics, setStoredBiometrics] = useState([]);\n  const [responseImage, setResponseImage] = useState(\"\");\n  const [capturedFingered, setCapturedFingered] = useState([]);\n  const [capturedFingeredObj, setCapturedFingeredObj] = useState([]);\n  const [recapturedFingered, setRecapturedFingered] = useState([]);\n  const [selectedDeduplication, setSelectedDeduplication] = useState([]);\n  const [imageQuality, setImageQuality] = useState(false);\n  const [isNewStatus, setIsNewStatus] = useState(false);\n\n  const calculate_age = (dob) => {\n    console.log(dob);\n    const today = new Date();\n    const dateParts = dob.split(\"-\");\n    const birthDate = new Date(dob);\n    let age_now = today.getFullYear() - birthDate.getFullYear();\n\n    return age_now;\n  };\n\n  const getPersonBiometrics = async () => {\n    const fingersCodeset = await axios.get(\n      `${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n\n    axios\n      .get(`${baseUrl}biometrics/person/${props.patientId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then(async (response) => {\n        if (response.data.length > 0) {\n          setStoredBiometrics(response.data);\n\n          setPageLoading(true);\n\n          let personCapturedFingers = _.uniq(\n            _.map(response.data, \"templateType\")\n          );\n\n          //console.log(personCapturedFingers);\n          //setSelectedFingers(personCapturedFingers);\n\n          let biometricItems = _.map(fingersCodeset.data, (item) => {\n            return _.extend({}, item, {\n              captured: false,\n            });\n          });\n\n          setFingerType(biometricItems);\n        } else {\n          let biometricItems = _.map(fingersCodeset.data, (item) => {\n            return _.extend({}, item, { captured: false });\n            //return item.captured = personCapturedFingers.includes(item.display)\n          });\n          setFingerType(biometricItems);\n        }\n      })\n      .catch(async (error) => {\n        console.log(\"getPersonBiometrics error\");\n        console.log(error);\n\n        let biometricItems = _.map(fingersCodeset.data, (item) => {\n          return _.extend({}, item, { captured: false });\n        });\n        setFingerType(biometricItems);\n        setPageLoading(true);\n      });\n  };\n\n  const clear_storelist = () => {\n    axios\n      .post(\n        `${baseUrl}biometrics/store-list/${props.patientId}`,\n        props.patientId,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        //console.log(\"cleared store\");\n      })\n      .catch((error) => {\n        //console.log(\"cleared store error\");\n        console.log(error);\n      });\n  };\n\n  const getRecaptureCount = () => {\n    axios\n      .get(`${baseUrl}biometrics/grouped/person/${props.patientId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setRecapturedFingered(response.data);\n      });\n  };\n\n  useEffect(() => {\n    clear_storelist();\n    getPersonBiometrics();\n    TemplateType();\n    getRecaptureCount();\n  }, []);\n\n  const TemplateType = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (response.data === true) {\n          axios\n            .get(`${baseUrl}biometrics/devices?active=true`, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              //console.log(response.data.find((x) => x.active === true));\n              setDevices(response.data.find((x) => x.active === true));\n              setbiometricDevices(response.data);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const handleInputChange = (e) => {\n    setObjValues({\n      ...objValues,\n      [e.target.name]: e.target.value,\n      age: calculate_age(props.age),\n    });\n  };\n\n  const validate = () => {\n    let temp = { ...errors };\n    temp.templateType = objValues.templateType ? \"\" : \"This field is required\";\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x === \"\");\n  };\n\n  const captureFinger = (e) => {\n    e.preventDefault();\n    if (localStorage.getItem(\"capturedBiometricsList\") !== null) {\n      const capturedBiometricsListObj = JSON.parse(\n        localStorage.getItem(\"capturedBiometricsList\")\n      );\n      setCapturedFingeredObj(capturedBiometricsListObj);\n      objValues.capturedBiometricsList = capturedBiometricsListObj;\n      localStorage.removeItem(\"capturedBiometricsList\");\n    } else {\n      //console.log(\"capturedBiometricsList\", capturedFingeredObj);\n      objValues.capturedBiometricsList = capturedFingeredObj;\n      setObjValues({\n        ...objValues,\n        capturedBiometricsList: capturedFingeredObj,\n      });\n    }\n\n    if (localStorage.getItem(\"deduplicates\") !== null) {\n      const deduplicatesObj = JSON.parse(localStorage.getItem(\"deduplicates\"));\n      setSelectedDeduplication(deduplicatesObj);\n      objValues.deduplication = deduplicatesObj;\n      setObjValues({ ...objValues, deduplication: deduplicatesObj });\n\n      localStorage.removeItem(\"deduplicates\");\n    } else {\n      let deduplicationObj = {\n        patientId: \"\",\n        deduplicationDate: null,\n        matchCount: 0,\n        unMatchCount: 0,\n        baselineFingerCount: 0,\n        recaptureFingerCount: 0,\n        perfectMatchCount: 0,\n        imperfectMatchCount: 0,\n        details: null,\n      };\n      //console.log(\"deduplication\", selectedDeduplication);\n      objValues.deduplication = deduplicationObj;\n      setObjValues({ ...objValues, deduplication: deduplicationObj });\n    }\n\n    if (validate()) {\n      setLoading(true);\n\n      axios\n        .post(\n          `${devices.url}?reader=${\n            devices.name\n          }&isNew=${isNewStatus}&recapture=${true}&identify=${false}`,\n          objValues,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        )\n        .then((response) => {\n          setLoading(false);\n\n          if (response.data.type === \"ERROR\") {\n            setLoading(false);\n            setTryAgain(true);\n\n            toast.error(response.data.message.ERROR);\n\n            //console.log(\"captured BiometricsList error\", capturedFingeredObj);\n            objValues.capturedBiometricsList = capturedFingeredObj;\n            setObjValues({\n              ...objValues,\n              capturedBiometricsList: capturedFingeredObj,\n            });\n\n            setIsNewStatus(false);\n          } else if (response.data.type === \"WARNING\") {\n            //Imperfect Match\n            if (response.data.match === true) {\n              toast.info(response.data.message.RECAPTURE_MESSAGE, {\n                autoClose: 10000,\n              });\n            } else if (response.data.match === false) {\n              toast.error(response.data.message.RECAPTURE_MESSAGE, {\n                autoClose: 10000,\n              });\n            }\n\n            if (\n              response.data.imageQuality <= 60 &&\n              calculate_age(props.age) <= 6\n            ) {\n              toast.info(\n                \"Image quality captured is poor, Kindly give a reason for capture above.\",\n                { position: toast.POSITION.BOTTOM_CENTER, autoClose: 20000 }\n              );\n              setImageQuality(true);\n            }\n\n            const templateType = response.data.templateType;\n\n            setTryAgain(false);\n            setSuccess(true);\n\n            let biometricsEnrollments = response.data;\n            biometricsEnrollments.capturedBiometricsList = _.uniqBy(\n              biometricsEnrollments.capturedBiometricsList,\n              \"templateType\"\n            );\n\n            props.setCapturedFingered([\n              ...props.capturedFingered,\n              biometricsEnrollments,\n            ]);\n\n            _.find(fingerType, { display: templateType }).captured = true;\n\n            setFingerType([...fingerType]);\n\n            setObjValues({ ...objValues, templateType: \"\" });\n            setIsNewStatus(false);\n            //toast.info(response.data.message.match);\n          } else if (\n            response.data.type === \"SUCCESS\" ||\n            response.data.match === false\n          ) {\n            if (\n              response.data.imageQuality <= 60 &&\n              calculate_age(props.age) <= 6\n            ) {\n              toast.info(\n                \"Image quality captured is poor, Kindly give a reason for capture above.\",\n                { position: toast.POSITION.BOTTOM_CENTER, autoClose: 20000 }\n              );\n              setImageQuality(true);\n            }\n\n            localStorage.setItem(\n              \"capturedBiometricsList\",\n              JSON.stringify(response.data.capturedBiometricsList)\n            );\n\n            localStorage.setItem(\n              \"deduplicates\",\n              JSON.stringify(response.data.deduplication)\n            );\n\n            const templateType = response.data.templateType;\n            setTryAgain(false);\n            setSuccess(true);\n\n            if (response.data.match === true) {\n              toast.success(response.data.message.RECAPTURE_MESSAGE, {\n                autoClose: 10000,\n              });\n            }\n\n            if (response.data.match === false) {\n              toast.error(response.data.message.RECAPTURE_MESSAGE, {\n                autoClose: 10000,\n              });\n            }\n\n            let biometricsEnrollments = response.data;\n\n            biometricsEnrollments.capturedBiometricsList = _.uniqBy(\n              biometricsEnrollments.capturedBiometricsList,\n              \"templateType\"\n            );\n\n            props.setCapturedFingered([\n              ...props.capturedFingered,\n              biometricsEnrollments,\n            ]);\n\n            _.find(fingerType, { display: templateType }).captured = true;\n            setFingerType([...fingerType]);\n\n            setObjValues({ ...objValues, templateType: \"\" });\n            setIsNewStatus(false);\n            //toast.success(response.data.message.match);\n          } else {\n            setLoading(false);\n            setTryAgain(true);\n            toast.error(\"Something went wrong capturing biometrics...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        })\n        .catch((error) => {\n          setLoading(false);\n        });\n    }\n  };\n\n  const saveBiometrics = (e) => {\n    e.preventDefault();\n\n    if (props.capturedFingered.length >= 1) {\n      const capturedObj =\n        props.capturedFingered[props.capturedFingered.length - 1];\n\n      capturedObj.capturedBiometricsList = _.uniqBy(\n        capturedObj.capturedBiometricsList,\n        \"templateType\"\n      );\n\n      if (capturedObj.deviceName.includes(\"Futronic\")) {\n        let fingersObj = [];\n        props.capturedFingered.forEach((obj) => {\n          fingersObj.push(obj.capturedBiometricsList[0]);\n        });\n\n        if (fingersObj.length > 0) {\n          axios\n            .post(`${baseUrl}biometrics/templates`, capturedObj, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              console.log(\"saved\", response);\n              toast.success(\"Biometric saved successfully\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n              props.setCapturedFingered([]);\n              getPersonBiometrics();\n              //props.updatePatientBiometricStatus(true);\n              props.getRecaptureCount();\n              props.toggle();\n            })\n            .catch((error) => {\n              toast.error(\"Something went wrong saving biometrics recapture\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n              console.log(error + \"1\");\n            });\n        }\n      } else {\n        axios\n          .post(`${baseUrl}biometrics/templates`, capturedObj, {\n            headers: { Authorization: `Bearer ${token}` },\n          })\n          .then((response) => {\n            //console.log(\"saved\", response);\n            toast.success(\"Biometric recaptured successfully\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            props.setCapturedFingered([]);\n            getPersonBiometrics();\n\n            props.getRecaptureCount();\n            props.toggle();\n          })\n          .catch((error) => {\n            toast.error(\"Something went wrong saving biometrics recapture\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            console.log(error + \"2\");\n          });\n      }\n    } else {\n      toast.error(\"You can't save less than 2 finger\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  const deleteTempBiometrics = (x) => {\n    axios\n      .delete(\n        `${baseUrl}biometrics?personId=${x.patientId}&templateType=${x.templateType}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((resp) => {\n        _.find(fingerType, { display: x.templateType }).captured = false;\n        setFingerType([...fingerType]);\n        let deletedRecord = props.capturedFingered.filter(\n          (data) => data.templateType !== x.templateType\n        );\n\n        props.setCapturedFingered(deletedRecord);\n        toast.info(x.templateType + \" captured removed successfully!\");\n      })\n      .catch((error) => {\n        toast.error(\"Something went wrong\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n        console.log(error);\n      });\n  };\n\n  const getFingerprintsQuality = (imageQuality) => {\n    if (imageQuality > 60 && imageQuality <= 75) {\n      return (\n        <Badge color=\"warning\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    } else if (imageQuality > 75) {\n      return (\n        <Badge color=\"success\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    } else {\n      return (\n        <Badge color=\"error\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        isOpen={props.modal}\n        toggle={props.toggle}\n        style={{ display: \"flex\", maxWidth: \"100%\", maxHeight: \"100%\" }}\n        fullscreen=\"true\"\n      >\n        <ModalHeader toggle={props.toggle}>Recapture Fingerprints</ModalHeader>\n        {/* <ModalBody></ModalBody> */}\n        <ModalFooter>\n          <div className={classes.root}>\n            <div>\n              {permissions.includes(\"capture_patient_biometrics\") ||\n              permissions.includes(\"all_permission\") ? (\n                <div\n                  style={{\n                    flex: \"10\",\n                    padding: \"5px\",\n                    marginLeft: \"5px\",\n                    border: \"1px solid rgba(99, 99, 99, 0.2)\",\n                    boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n                  }}\n                >\n                  {/* <Row>\n                    <Col>\n                      <br />\n                      <p>\n                        {\" \"}\n                        Patient captured count :{\" \"}\n                        <b>{recapturedFingered.length}</b>\n                      </p>\n                      <br />\n                    </Col>\n                  </Row> */}\n                  <Row>\n                    <p>\n                      {\" \"}\n                      Patient recapture count :{\" \"}\n                      <b>{recapturedFingered.length - 1}</b>\n                    </p>\n                    <ToastContainer />\n                    <Col md={3}>\n                      <FormGroup>\n                        <Label\n                          for=\"device\"\n                          style={{\n                            color: \"#014d88\",\n                            fontWeight: \"bold\",\n                            fontSize: \"14px\",\n                          }}\n                        >\n                          {\" \"}\n                          Device{\" \"}\n                        </Label>\n                        <Input\n                          type=\"select\"\n                          name=\"device\"\n                          id=\"device\"\n                          //onChange={checkDevice}\n                          value={objValues.device}\n                          required\n                          disabled\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          {biometricDevices.map(\n                            ({ id, name, active, url, type }) => (\n                              <option key={id} value={url}>\n                                {type}\n                              </option>\n                            )\n                          )}\n                        </Input>\n\n                        {errors.device !== \"\" ? (\n                          <span className={classes.error}>{errors.device}</span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </Col>\n\n                    <Col md={3}>\n                      <FormGroup>\n                        <Label\n                          for=\"device\"\n                          style={{\n                            color: \"#014d88\",\n                            fontWeight: \"bold\",\n                            fontSize: \"14px\",\n                          }}\n                        >\n                          Select Finger\n                        </Label>\n                        <Input\n                          type=\"select\"\n                          name=\"templateType\"\n                          id=\"templateType\"\n                          onChange={handleInputChange}\n                          value={objValues.templateType}\n                          required\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value=\"\">Select Finger </option>\n\n                          {fingerType &&\n                            _.filter(fingerType, [\"captured\", false]).map(\n                              (value) => (\n                                <option key={value.id} value={value.display}>\n                                  {value.display}\n                                </option>\n                              )\n                            )}\n                        </Input>\n                        {errors.templateType !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.templateType}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </Col>\n\n                    {props.capturedFingered.length >= 6 &&\n                    props.capturedFingered.length < 10 ? (\n                      <Col md={4}>\n                        <FormGroup>\n                          <Label\n                            for=\"device\"\n                            style={{\n                              color: \"#014d88\",\n                              fontWeight: \"bold\",\n                              fontSize: \"14px\",\n                            }}\n                          >\n                            {\" \"}\n                            Reason for recapturing less than 10 fingers{\" \"}\n                          </Label>\n                          <Input\n                            type=\"textarea\"\n                            name=\"reason\"\n                            id=\"reason\"\n                            onChange={handleInputChange}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                        </FormGroup>\n                      </Col>\n                    ) : (\n                      \"\"\n                    )}\n\n                    <Col md={2}>\n                      {!loading ? (\n                        <>\n                          <MatButton\n                            type=\"button\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={captureFinger}\n                            className={\"mt-4\"}\n                            style={{ backgroundColor: \"#992E62\" }}\n                            startIcon={<FingerprintIcon />}\n                            disabled={loading}\n                          >\n                            Capture Finger\n                          </MatButton>\n                        </>\n                      ) : (\n                        <>\n                          <MatButton\n                            type=\"button\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={\"mt-4\"}\n                            style={{ backgroundColor: \"#992E62\" }}\n                            startIcon={<CircularProgress />}\n                          >\n                            Capturing...\n                          </MatButton>\n                        </>\n                      )}\n                    </Col>\n                    <br />\n                    <Col md={12}>\n                      {loading ? (\n                        <>\n                          <b>Capturing finger...</b>\n                          <LinearProgress />\n                        </>\n                      ) : (\n                        \"\"\n                      )}\n                    </Col>\n                  </Row>\n                </div>\n              ) : (\n                \"\"\n              )}\n\n              <Row>\n                {props.capturedFingered.length >= 1 ? (\n                  <>\n                    <Col\n                      md={12}\n                      style={{ marginTop: \"10px\", paddingBottom: \"20px\" }}\n                    >\n                      <List celled horizontal>\n                        {props.capturedFingered.map((x) => (\n                          <List.Item\n                            style={{\n                              width: \"200px\",\n                              height: \"200px\",\n                              border: \"1px dotted #014d88\",\n                              margin: \"5px\",\n                            }}\n                          >\n                            <List.Header\n                              style={{\n                                paddingLeft: \"0px\",\n                                height: \"0.5rem\",\n\n                                alignItems: \"right\",\n                              }}\n                            >\n                              {getFingerprintsQuality(x.mainImageQuality)}\n                              <span\n                                onClick={() => {\n                                  deleteTempBiometrics(x);\n                                }}\n                              >\n                                <Icon\n                                  name=\"cancel\"\n                                  color=\"red\"\n                                  style={{ float: \"right\" }}\n                                />{\" \"}\n                              </span>\n                            </List.Header>\n                            <List.Content\n                              style={{\n                                width: \"200px\",\n                                height: \"150px\",\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                                alignItems: \"center\",\n                              }}\n                            >\n                              {\" \"}\n                              <FingerprintIcon\n                                style={{ color: \"#992E62\", fontSize: 150 }}\n                              />\n                            </List.Content>\n                            <List.Content\n                              style={{\n                                width: \"200px\",\n                                height: \"30px\",\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                                alignItems: \"center\",\n                                fontSize: \"16px\",\n                                color: \"#014d88\",\n                                fontWeight: \"bold\",\n                                fontFamily: '\"poppins\", sans-serif',\n                              }}\n                            >\n                              {x.templateType}\n                            </List.Content>\n                            <List.Content>\n                              <br />\n                              {x.mainImageQuality < 75 ? (\n                                <MatButton\n                                  type=\"button\"\n                                  variant=\"contained\"\n                                  color=\"secondary\"\n                                  onClick={() => {\n                                    deleteTempBiometrics(x);\n                                  }}\n                                  startIcon={<RestartAltIcon />}\n                                >\n                                  Reset recapture\n                                </MatButton>\n                              ) : (\n                                \" \"\n                              )}\n                            </List.Content>\n                          </List.Item>\n                        ))}\n                      </List>\n                    </Col>\n                    <br />\n                    <br />\n                    <br />\n                    <br />\n                    <br />\n                    <br />\n                    <Col md={12}>\n                      <br />\n\n                      <MatButton\n                        type=\"button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={\n                          props.capturedFingered.length < 6 ? true : false\n                        }\n                        onClick={saveBiometrics}\n                        startIcon={<SaveIcon />}\n                      >\n                        Save Capture\n                      </MatButton>\n                    </Col>\n                    <br />\n                  </>\n                ) : (\n                  \"\"\n                )}\n              </Row>\n            </div>\n          </div>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n};\n\nexport default Recapture;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PatientRecapture.js",["584","585","586"],"import React from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport { Dropdown, Badge } from \"react-bootstrap\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport moment from \"moment\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport fingerprintimage from \"../images/fingerprintimage.png\";\n\nconst PatientRecapture = (props) => {\n  //console.log(\"details\", props.storedBiometrics);\n\n  return (\n    <>\n      <Modal\n        isOpen={props.modal}\n        toggle={props.toggle}\n        style={{ display: \"flex\", maxWidth: \"85%\", maxHeight: \"80%\" }}\n        fullscreen=\"true\"\n      >\n        <ModalHeader toggle={props.toggle}>\n          {props.storedBiometrics[0]?.recapture === 0\n            ? \"Baseline Fingerprints\"\n            : \"Previous Recaptured Fingerprints\"}\n        </ModalHeader>\n        <ModalBody>\n          <div>\n            <div\n              className=\"\"\n              style={{\n                padding: \"5px\",\n                flex: \"10\",\n                boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n                minHeight: \"400px\",\n              }}\n            >\n              {props.storedBiometrics.length > 0 ? (\n                <div\n                  style={{ display: \"flex\", width: \"100%\", flexWrap: \"wrap\" }}\n                >\n                  {props.storedBiometrics.map((biometric, index) => (\n                    <div\n                      key={index}\n                      style={{\n                        minHeight: \"120px\",\n                        padding: \"5px\",\n                        width: \"20%\",\n                      }}\n                    >\n                      <div className=\"card \" style={{ borderRadius: \"6px\" }}>\n                        <div\n                          className=\"card-header align-items-start\"\n                          style={{ backgroundColor: \"#fff\" }}\n                        >\n                          <div>\n                            <h6 className=\"fs-18 font-w500 mb-3 user-name\">\n                              <Link\n                                to={\"#\"}\n                                style={{\n                                  color: \"#014d88\",\n                                  fontSize: \"14px\",\n                                  fontFamily: `\"poppins\",sans-serif`,\n                                }}\n                              >\n                                {biometric.templateType}\n                              </Link>\n                            </h6>\n                            <div\n                              className=\"fs-9 text-nowrap\"\n                              style={{\n                                fontSize: \"10px\",\n                                color: \"#992E62\",\n                                fontWeight: \"bold\",\n                                fontFamily: `\"poppins\",sans-serif`,\n                              }}\n                            >\n                              <i\n                                className=\"fa fa-calendar-o me-3\"\n                                aria-hidden=\"true\"\n                              ></i>\n                              {moment(biometric.lastModifiedDate).format(\n                                \"YYYY-MM-DD HH:mm\"\n                              )}\n                            </div>\n                          </div>\n\n                          {/*Action button -- Dropdown menu*/}\n                          {/* <Dropdown className=\"dropdown ms-auto\">\n                            <Dropdown.Toggle\n                              as=\"button\"\n                              variant=\"\"\n                              drop=\"up\"\n                              className=\"btn sharp btn-primary \"\n                              id=\"tp-btn\"\n                              style={{\n                                backgroundColor: \"#014d88\",\n                                borderColor: \"#014d88\",\n                                borderRadius: \"5px\",\n                                marginRight: \"-18px\",\n                                marginTop: \"-10px\",\n                              }}\n                            >\n                              <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                                width=\"18px\"\n                                height=\"18px\"\n                                viewBox=\"0 0 24 24\"\n                                version=\"1.1\"\n                              >\n                                <g\n                                  stroke=\"none\"\n                                  strokeWidth=\"1\"\n                                  fill=\"none\"\n                                  fillRule=\"evenodd\"\n                                >\n                                  <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\n                                  <circle fill=\"#ffffff\" cx=\"12\" cy=\"5\" r=\"2\" />\n                                  <circle\n                                    fill=\"#ffffff\"\n                                    cx=\"12\"\n                                    cy=\"12\"\n                                    r=\"2\"\n                                  />\n                                  <circle\n                                    fill=\"#ffffff\"\n                                    cx=\"12\"\n                                    cy=\"19\"\n                                    r=\"2\"\n                                  />\n                                </g>\n                              </svg>\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu\n                              alignRight={true}\n                              className=\"dropdown-menu-right\"\n                            >\n                              <Dropdown.Item\n                                style={{ color: \"red\" }}\n                                onClick={() =>\n                                  deleteBiometric(\n                                    biometric.id,\n                                    biometric.templateType\n                                  )\n                                }\n                              >\n                                <DeleteIcon /> Delete\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown> */}\n                        </div>\n                        <div className=\"card-body p-0 pb-2\">\n                          <ul className=\"list-group list-group-flush\">\n                            <li\n                              className=\"list-group-item\"\n                              style={{\n                                height: \"100px\",\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                              }}\n                            >\n                              <img\n                                src={fingerprintimage}\n                                alt=\"\"\n                                style={{ height: \"80px\" }}\n                              />\n                            </li>\n\n                            <li className=\"list-group-item\">\n                              <Badge\n                                variant=\"info badge-xs light\"\n                                className=\"card-link float-end\"\n                              >\n                                {biometric.imageQuality !== null\n                                  ? biometric.imageQuality + \"%\"\n                                  : \"N/A\"}{\" \"}\n                                {/*{contact.version}*/}\n                              </Badge>\n                              <span className=\"mb-0 title\">\n                                Fingerprint Quality {biometric.iso}\n                              </span>{\" \"}\n                              :\n                              {/* <span className=\"text-black desc-text ms-2\">\n                                <Badge\n                                  variant={\n                                    biometric.iso === true\n                                      ? \"primary badge-xs\"\n                                      : \"danger badge-xs\"\n                                  }\n                                >\n                                  <i\n                                    className=\"fa fa-check-square me-2 scale4\"\n                                    aria-hidden=\"true\"\n                                  ></i>{\" \"}\n                                </Badge>\n                              </span> */}\n                            </li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <>\n                  <div className=\"flex-grow-8\">\n                    <div className=\"flex-grow-8\">\n                      <Alert severity=\"info\">\n                        <AlertTitle style={{ height: \"400px\" }}>\n                          <strong>No biometrics captured</strong>\n                        </AlertTitle>\n                      </Alert>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          {/* <Button color=\"primary\" onClick={props.toggle}>\n            Do Something\n          </Button>{\" \"}\n          <Button color=\"secondary\" onClick={props.toggle}>\n            Cancel\n          </Button> */}\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n};\n\nexport default PatientRecapture;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\RecallPatient.js",["587","588","589","590","591","592","593","594","595","596","597"],"import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  Table,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Row,\n  Label,\n  Col,\n  FormGroup,\n  Input,\n  Badge,\n} from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { FaEye, FaUserPlus } from \"react-icons/fa\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport MatButton from \"@material-ui/core/Button\";\nimport FingerprintIcon from \"@material-ui/icons/Fingerprint\";\nimport { Button2, Icon, List } from \"semantic-ui-react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport Alert from \"@mui/material/Alert\";\n\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../api\";\n\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport LinearProgress from \"@mui/material/LinearProgress\";\n\nimport _ from \"lodash\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":\n      {\n        fontFamily: \"FontAwesome\",\n        border: \"0\",\n        verticalAlign: \"middle\",\n        marginLeft: \".25em\",\n        lineHeight: \"1\",\n      },\n    \"& .dropdown-menu .dropdown-item\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      padding: \"0.3rem 1.5rem\",\n      fontWeight: \"bold\",\n    },\n    \"& .mt-4\": {\n      marginTop: \"28px !important\",\n    },\n    \"& .form-control\": {\n      color: \"#992E62\",\n    },\n    \"& .form-control:focus\": {\n      color: \"#014d88\",\n    },\n    \"& .sharp \": {\n      \"min-width\": \"35px\",\n      padding: \"5px\",\n      height: \"35px\",\n      \"min-height\": \"35px\",\n    },\n  },\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n}));\n\nconst RecallPatient = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n\n  const [biometricDevices, setbiometricDevices] = useState([]);\n  const [objValues, setObjValues] = useState({\n    biometricType: \"FINGERPRINT\",\n    patientId: \"\",\n    templateType: \"\",\n    device: \"SECUGEN\",\n    index: \"\",\n    age: \"\",\n  });\n  const [fingerType, setFingerType] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [permissions, setPermissions] = useState({});\n  const [tryAgain, setTryAgain] = useState(false);\n  const [successPims, setSuccessPims] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const [fingerIndex, setFingerIndex] = useState(\"\");\n\n  const [isNewStatus, setIsNewStatus] = useState(true);\n  const [checkedVal, setCheckedVal] = useState(false);\n  const [facilities, setFacilities] = useState([]);\n\n  const getPersonBiometrics = async () => {\n    const fingersCodeset = await axios.get(\n      `${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n\n    let biometricItems = _.map(fingersCodeset.data, (item) => {\n      return _.extend({}, item, {\n        captured: false,\n      });\n    });\n\n    setFingerType(biometricItems);\n  };\n\n  const Facilities = () => {\n    axios\n      .get(`${baseUrl}account`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setFacilities(response.data.applicationUserOrganisationUnits);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const userPermission = () => {\n    axios\n      .get(`${baseUrl}account`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setPermissions(response.data.permissions);\n      })\n      .catch((error) => {});\n  };\n\n  useEffect(() => {\n    userPermission();\n    Facilities();\n    getPersonBiometrics();\n    TemplateType();\n  }, []);\n\n  const TemplateType = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (response.data === true) {\n          axios\n            .get(`${baseUrl}biometrics/devices?active=true`, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              //console.log(response.data.find((x) => x.active === true));\n              setDevices(response.data.find((x) => x.active === true));\n              setbiometricDevices(response.data);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const handleInputChange = (e) => {\n    if (e.target.value === \"Left Index Finger\") {\n      setFingerIndex(3);\n    } else if (e.target.value === \"Left Little Finger\") {\n      setFingerIndex(0);\n    } else if (e.target.value === \"Left Middle Finger\") {\n      setFingerIndex(2);\n    } else if (e.target.value === \"Left Ring Finger\") {\n      setFingerIndex(1);\n    } else if (e.target.value === \"Left Thumb\") {\n      setFingerIndex(4);\n    } else if (e.target.value === \"Right Index Finger\") {\n      setFingerIndex(6);\n    } else if (e.target.value === \"Right Little Finger\") {\n      setFingerIndex(9);\n    } else if (e.target.value === \"Right Middle Finger\") {\n      setFingerIndex(7);\n    } else if (e.target.value === \"Right Ring Finger\") {\n      setFingerIndex(8);\n    } else if (e.target.value === \"Right Thumb\") {\n      setFingerIndex(5);\n    }\n\n    setObjValues({\n      ...objValues,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const validate = () => {\n    let temp = { ...errors };\n    //temp.templateType = objValues.templateType ? \"\" : \"This field is required\";\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x === \"\");\n  };\n\n  const getPatient = (patientId) => {\n    axios\n      .get(`${baseUrl}patient/${patientId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        props.setPatientDetails(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const captureFinger = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      setLoading(true);\n      props.setPatientDetails(null);\n      axios\n        .post(\n          `${devices.url}?reader=${\n            devices.name\n          }&isNew=${\"false\"}&recapture=${\"false\"}&identify=true&identificationType=${\n            !checkedVal ? \"LOCAL\" : \"PIMS\"\n          }&personUuid=${props.personUuid ? props.personUuid : \"\"}`,\n          objValues,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        )\n        .then((response) => {\n          setLoading(false);\n\n          if (response.data.type === \"ERROR\") {\n            setLoading(false);\n            setTryAgain(true);\n            toast.error(response.data.message.ERROR);\n            setIsNewStatus(false);\n          } else if (response.data.type === \"WARNING\") {\n            const templateType = response.data.templateType;\n            toast.warning(response.data.message.WARNING);\n          } else if (response.data.type === \"SUCCESS\") {\n            let capturedFinger = response.data;\n\n            let facilityId = facilities[0].organisationUnitId;\n\n            if (checkedVal === true) {\n              setSuccessPims(true);\n              props.setPimsEnrollment([]);\n              let pimsData = {\n                facilityId: facilityId,\n                finger: capturedFinger.template,\n                index: fingerIndex,\n              };\n              // console.log(checkedVal);\n              axios\n                .post(`${baseUrl}pims/verify/${facilityId}`, pimsData, {\n                  headers: { Authorization: `Bearer ${token}` },\n                })\n                .then((response) => {\n                  setSuccessPims(false);\n                  setCheckedVal(false);\n                  if (response.data.code === 5) {\n                    props.setPimsEnrollment(response.data.enrollments);\n                    toast.info(`PIMS MESSAGE: ${response.data.message}`, {\n                      position: toast.POSITION.TOP_CENTER,\n                      autoClose: 10000,\n                    });\n                  }\n                })\n                .catch((error) => {\n                  setSuccessPims(false);\n                  console.log(error);\n                });\n            } else {\n              if (\n                capturedFinger.clientIdentificationDTO.messageType ===\n                \"SUCCESS_NO_MATCH_FOUND\"\n              ) {\n                toast.info(capturedFinger.clientIdentificationDTO.message, {\n                  position: toast.POSITION.TOP_CENTER,\n                  autoClose: 10000,\n                });\n              } else {\n                getPatient(capturedFinger.clientIdentificationDTO.id);\n\n                toast.success(capturedFinger.clientIdentificationDTO.message, {\n                  position: toast.POSITION.TOP_CENTER,\n                  autoClose: 10000,\n                });\n              }\n            }\n          } else {\n            setLoading(false);\n            setTryAgain(true);\n            toast.error(\"Something went wrong capturing biometrics...\", {\n              position: toast.POSITION.TOP_CENTER,\n            });\n          }\n        })\n        .catch((error) => {\n          setLoading(false);\n        });\n    }\n  };\n\n  const handleChange = (e) => {\n    console.log(e);\n    setCheckedVal(!checkedVal);\n  };\n\n  return (\n    <>\n      <Modal\n        isOpen={props.modal}\n        toggle={props.toggle}\n        style={{ display: \"flex\", maxWidth: \"100%\", maxHeight: \"100%\" }}\n        fullscreen=\"true\"\n      >\n        <ModalHeader toggle={props.toggle}>\n          Recall patient using biometrics\n        </ModalHeader>\n        {/* <ModalBody></ModalBody> */}\n        <ModalFooter>\n          <div className={classes.root}>\n            <div>\n              <div\n                style={{\n                  flex: \"10\",\n                  padding: \"5px\",\n                  marginLeft: \"5px\",\n                  border: \"1px solid rgba(99, 99, 99, 0.2)\",\n                  boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n                }}\n              >\n                <Row>\n                  <ToastContainer />\n\n                  <Col md={12}>\n                    <Alert severity=\"info\">\n                      <b style={{ textAlign: \"center\", fontSize: \"16px\" }}>\n                        Place the client's finger on the scanner and click the\n                        scan finger button!\n                      </b>\n                    </Alert>\n                    <br />\n                  </Col>\n                  {/* <Col md={1}>\n                    <FormGroup>\n                      <Label\n                        style={{\n                          color: \"#014d88\",\n                          fontWeight: \"bold\",\n                          fontSize: \"14px\",\n                        }}\n                      >\n                        Facility*\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"organisationUnitId\"\n                        id=\"organisationUnitId\"\n                        value={objValues.organisationUnitId}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        hidden\n                      >\n                        {facilities.map((value) => (\n                          <option\n                            key={value.id}\n                            value={value.organisationUnitId}\n                          >\n                            {value.organisationUnitName}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </Col> */}\n                  <Col md={3}>\n                    <FormGroup>\n                      <Label\n                        for=\"device\"\n                        style={{\n                          color: \"#014d88\",\n                          fontWeight: \"bold\",\n                          fontSize: \"14px\",\n                        }}\n                      >\n                        {\" \"}\n                        Device{\" \"}\n                      </Label>\n                      <Input\n                        type=\"select\"\n                        name=\"device\"\n                        id=\"device\"\n                        //onChange={checkDevice}\n                        value={objValues.device}\n                        required\n                        disabled\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        {biometricDevices.map(\n                          ({ id, name, active, url, type }) => (\n                            <option key={id} value={url}>\n                              {type}\n                            </option>\n                          )\n                        )}\n                      </Input>\n\n                      {errors.device !== \"\" ? (\n                        <span className={classes.error}>{errors.device}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </Col>\n\n                  <Col md={3}>\n                    <FormGroup>\n                      <Label\n                        for=\"device\"\n                        style={{\n                          color: \"#014d88\",\n                          fontWeight: \"bold\",\n                          fontSize: \"14px\",\n                        }}\n                      >\n                        Select Finger\n                      </Label>\n                      <Input\n                        type=\"select\"\n                        name=\"templateType\"\n                        id=\"templateType\"\n                        onChange={handleInputChange}\n                        value={objValues.templateType}\n                        required\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value=\"\">Select Finger </option>\n\n                        {fingerType &&\n                          _.filter(fingerType, [\"captured\", false]).map(\n                            (value) => (\n                              <option key={value.id} value={value.display}>\n                                {value.display}\n                              </option>\n                            )\n                          )}\n                      </Input>\n                      {errors.templateType !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.templateType}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </Col>\n\n                  <Col md={3}>\n                    <Label\n                      check\n                      style={{\n                        color: \"#014d88\",\n                        fontWeight: \"bold\",\n                        fontSize: \"18px\",\n                      }}\n                    >\n                      PIMS\n                    </Label>\n                    <br />\n                    <Input\n                      type=\"checkbox\"\n                      checked={checkedVal}\n                      onChange={handleChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                  </Col>\n\n                  <Col md={3}>\n                    {!loading ? (\n                      <>\n                        <MatButton\n                          type=\"button\"\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={captureFinger}\n                          className={\"mt-4\"}\n                          style={{ backgroundColor: \"#992E62\" }}\n                          startIcon={<FingerprintIcon />}\n                          disabled={loading}\n                        >\n                          Scan Finger\n                        </MatButton>\n                      </>\n                    ) : (\n                      <>\n                        <MatButton\n                          type=\"button\"\n                          variant=\"contained\"\n                          color=\"primary\"\n                          className={\"mt-4\"}\n                          style={{ backgroundColor: \"#992E62\" }}\n                          startIcon={<CircularProgress />}\n                          disabled={loading}\n                        >\n                          Validating...\n                        </MatButton>\n                      </>\n                    )}\n                  </Col>\n                  <br />\n                  <Col md={12}>\n                    {checkedVal && loading ? (\n                      <>\n                        <b>Scanning finger...</b>\n                        <LinearProgress />\n                      </>\n                    ) : (\n                      \"\"\n                    )}\n                  </Col>\n                  <Col md={12}>\n                    {successPims ? (\n                      <>\n                        <b>Awaiting finger validation from pims server...</b>\n                        <LinearProgress />\n                      </>\n                    ) : (\n                      \"\"\n                    )}\n                  </Col>\n                </Row>\n              </div>\n              <br />\n              <Row>\n                <Col md={12}>\n                  <Table striped bordered hover>\n                    <tbody>\n                      {props.patientDetails !== null &&\n                      props.pimsEnrollment.length === 0 ? (\n                        <tr>\n                          <td>\n                            <b>Registration Date: </b>\n                            {props.patientDetails.dateOfRegistration}\n                          </td>\n                          <td>\n                            <b>Hospital No: </b>\n                            {\n                              props.patientDetails?.identifier?.identifier[0]\n                                ?.value\n                            }\n                          </td>\n                          <td>{props.patientDetails.firstName}</td>\n                          <td>{props.patientDetails.surname}</td>\n                          <td>{props.patientDetails.sex}</td>\n\n                          <td>\n                            Biometrics{\" \"}\n                            {props.patientDetails.biometricStatus === true ? (\n                              <Badge color=\"success\"> Captured</Badge>\n                            ) : (\n                              <Badge color=\"danger\">Not Captured</Badge>\n                            )}\n                          </td>\n                          <td>\n                            <Link\n                              to={{\n                                pathname: \"/patient-dashboard\",\n                                state: {\n                                  patientObj: props.patientDetails,\n                                  permissions: permissions,\n                                },\n                              }}\n                            >\n                              <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className=\" float-right mr-1\"\n                                startIcon={<FaEye size=\"25\" />}\n                                style={{ backgroundColor: \"#014d88\" }}\n                              >\n                                <span\n                                  style={{\n                                    textTransform: \"capitalize\",\n                                    fontWeight: \"bolder\",\n                                  }}\n                                >\n                                  Patient Records\n                                </span>\n                              </Button>\n                            </Link>\n                          </td>\n                        </tr>\n                      ) : (\n                        props.pimsEnrollment &&\n                        props.pimsEnrollment.map((pims) => (\n                          <tr>\n                            <td>\n                              <b>Art Start Date: </b>\n                              {pims.artStartDate}\n                            </td>\n                            <td>\n                              <b>Patient ID: </b>\n                              {pims.patientIdentifier}\n                            </td>\n                            <td>\n                              <b>Facility Id: </b>\n                              {pims.facilityId}\n                            </td>\n                            <td>\n                              <b>Facility Name: </b>\n                              {pims.facilityName}\n                            </td>\n                            <td>\n                              <b>DOB: </b>\n                              {pims.dateOfBirth}\n                            </td>\n                            <td>\n                              <b>Sex: </b>\n                              {pims.sex}\n                            </td>\n                            <td>\n                              <b>State: </b>\n                              {pims.stateName}\n                            </td>\n                            <td>\n                              <b>LGA: </b>\n                              {pims.lgaName}\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </Table>\n                </Col>\n              </Row>\n            </div>\n          </div>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n};\n\nexport default RecallPatient;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\MigrationDQA\\index.js",["598","599","600","601"],"import React, {useEffect, useState} from 'react';\nimport {Tab} from \"semantic-ui-react\";\nimport PatientList from \"../Home/PatientList\";\nimport {ToastContainer} from \"react-toastify\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport DuplicateHospitalNumbers from \"./DuplicateHospitalNumbers\";\nimport axios from \"axios\";\nimport {token, url as baseUrl} from \"../../../../api\";\nimport {Link} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport {FaUserPlus} from \"react-icons/fa\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        '& a':{\n            textDecoration:'none !important'\n        }\n    },\n    input: {\n        display: 'none'\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"11px\",\n    },\n    success: {\n        color: \"#4BB543 \",\n        fontSize: \"11px\",\n    },\n}));\nfunction Index(props) {\n    const classes = useStyles();\n    const [permissions, setPermissions] = useState([]);\n    useEffect(() => {\n        userPermission();\n    }, []);\n    //Get list of Finger index\n    const userPermission =()=>{\n        axios\n            .get(`${baseUrl}account`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setPermissions(response.data.permissions);\n\n            })\n            .catch((error) => {\n            });\n\n    }\n    const panes = [\n        { menuItem: 'Duplicate Hospital Numbers', render: () =>\n                <Tab.Pane>\n                    <DuplicateHospitalNumbers permissions={permissions}/>\n                </Tab.Pane>\n        }\n    ];\n    return (\n        <div className={classes.root}>\n            <ToastContainer autoClose={3000} hideProgressBar />\n            {permissions.includes('view_patient') || permissions.includes(\"all_permission\") ? (\n                <Tab panes={panes} />\n            ):\"\"\n            }\n\n        </div>\n    );\n}\n\nexport default Index;","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\ClientDashboard\\CheckIn\\index.js",["602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport MatButton from \"@material-ui/core/Button\";\nimport { TiArrowBack } from \"react-icons/ti\";\nimport { Button, Grid, MenuItem, Paper, TextField } from \"@mui/material\";\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\nimport { Label } from \"semantic-ui-react\";\nimport { DesktopDateTimePicker } from \"@mui/x-date-pickers/DesktopDateTimePicker\";\nimport DualListBox from \"react-dual-listbox\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../../api\";\nimport { toast } from \"react-toastify\";\nimport _ from \"lodash\";\nimport Swal from \"sweetalert2\";\nimport { useForm } from \"react-hook-form\";\nimport { format } from \"date-fns\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport moment from \"moment\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport RecallPatient from \"../../RecallPatient\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    marginBottom: 20,\n    flexGrow: 1,\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: \"bottom\",\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: \"center\",\n  },\n  column: {\n    flexBasis: \"20.33%\",\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n  checkinModal: {\n    \"& .modal-dialog\": {\n      maxWidth: \"1000px\",\n    },\n    \"& .ui.label\": {\n      backgroundColor: \"#fff\",\n      fontSize: \"16px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n      textAlign: \"left\",\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  checkInDatePicker: {\n    \"& .MuiFormControl-root.MuiTextField-root\": {\n      border: \"1px solid #eee\",\n    },\n  },\n}));\nlet newDate = new Date();\nfunction Index(props) {\n\n  const [patientDetails, setPatientDetails] = useState(null);\n  const [pimsEnrollment, setPimsEnrollment] = useState([]);\n  const [enablePPI, setEnablePPI] = useState(true);\n  const [modalRecall, setModalRecall] = useState(false);\n  const toggleRecall = () => {\n    setPatientDetails(null);\n    setPimsEnrollment([]);\n    setModalRecall(!modalRecall);\n  };\n\n  const userDetail =\n    props.location && props.location.state ? props.location.state.user : null;\n  const [loading, setLoading] = useState(\"\");\n  let history = useHistory();\n  const classes = useStyles();\n  const [checkInDate, setCheckInDate] = useState(new Date());\n  const [checkOutDate, setCheckOutDate] = useState(new Date());\n  const [today, setToday] = useState(\n    new Date().toISOString().substr(0, 10).replace(\"T\", \" \")\n  );\n  const patientObj =\n    history.location && history.location.state\n      ? history.location.state.patientObj\n      : {};\n  ///console.log(\"check in\", patientObj)\n  const permissions =\n    history.location && history.location.state\n      ? history.location.state.permissions\n      : [];\n  const { handleSubmit, control } = useForm();\n  const [modal, setModal] = useState(false);\n  const [allServices, setAllServices] = useState(null);\n  const [checkinStatus, setCheckinStatus] = useState(false);\n  const [modalCheckOut, setModalCheckOut] = useState(false);\n  const [services, setServices] = useState([]);\n  const [selectedServices, setSelectedServices] = useState({ selected: [] });\n  const [patientVisits, setPatientVisits] = useState([]);\n  const [patientBiometricStatus, setPatientBiometricStatus] = useState(\n    patientObj.biometricStatus\n  );\n  const [biometricsModuleInstalled, setBiometricsModuleInstalled] =\n    useState(false);\n\n  const [checkOutObj, setCheckOutObj] = useState({\n    personId: \"\",\n    visitStartDate: format(new Date(newDate), \"yyyy-MM-dd hh:mm\"),\n  });\n  const [checkInObj, setCheckInObj] = useState({\n    serviceIds: \"\",\n    visitDto: {\n      personId: patientObj.id,\n      checkInDate: format(new Date(newDate), \"yyyy-MM-dd hh:mm\"),\n    },\n  });\n  const loadServices = useCallback(async () => {\n    try {\n      const response = await axios.get(`${baseUrl}patient/post-service`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      //setServices(response.data);\n      setAllServices(response.data);\n      setServices(\n        Object.entries(response.data).map(([key, value]) => ({\n          label: value.moduleServiceName,\n          value: value.moduleServiceCode,\n        }))\n      );\n      /*            setSelectedServices(\n                            _.uniq(_.map(userDetail.applicationUserOrganisationUnits, 'organisationUnitName'))\n                        )*/\n    } catch (e) {\n      await Swal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"An error occurred fetching services!\",\n      });\n    }\n  }, []);\n  const loadPatientVisits = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}patient/visit/visit-by-patient/${patientObj.id}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setPatientVisits(response.data);\n      response.data.map((visits) => {\n        if (visits.checkOutDate === null) {\n          setCheckinStatus(true);\n        }\n      });\n    } catch (e) {\n      await Swal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"An error occurred fetching services!\",\n      });\n    }\n  }, []);\n  let visitTypesRows = null;\n  if (services && services.length > 0) {\n    visitTypesRows = services.map((service, index) => (\n      <MenuItem\n        key={service.moduleServiceCode}\n        value={service.moduleServiceCode}\n      >\n        {service.moduleServiceName}\n      </MenuItem>\n    ));\n  }\n\n  const onChangeDate = (date) => {\n    console.log(date.target.value);\n    const newDate = moment(new Date(date.target.value)).format(\n      \"yyyy-MM-dd hh:mm\"\n    );\n    setCheckInDate(newDate);\n    console.log(newDate);\n  };\n  const handleCheckIn = () => {\n    setModal(true);\n  };\n  const handleCheckOut = () => {\n    setModalCheckOut(true);\n  };\n\n  const onCancelCheckIn = () => {\n    setModal(false);\n  };\n  const onCancelCheckOut = () => {\n    setModalCheckOut(false);\n  };\n  const onDelete = () => {};\n  const onSubmit = async (data) => {\n    try {\n      const today = new Date();\n      const visitDetails = await axios.get(\n        `${baseUrl}patient/visit/visit-detail/${patientObj.id}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      const visitDetail = visitDetails.data;\n      const pendingVisit = visitDetail.find((obj) => obj.status == \"PENDING\");\n      let visit = null;\n      if (!pendingVisit) {\n        const visitResponse = await axios.post(\n          `${baseUrl}patient/visit`,\n          {\n            personId: patientObj.id,\n            visitStartDate: today,\n          },\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n        visit = visitResponse.data;\n      } else {\n        visit = pendingVisit;\n      }\n      await axios.post(\n        `${baseUrl}patient/encounter`,\n        {\n          encounterDate: today,\n          personId: patientObj.id,\n          serviceCode: data.VisitType,\n          status: \"PENDING\",\n          visitId: visit.id,\n        },\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setModal(false);\n      await Swal.fire({\n        icon: \"success\",\n        text: \"CheckedIn successfully\",\n        timer: 1500,\n      });\n    } catch (e) {\n      await Swal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"An error occurred while checking in Patient!\",\n      });\n    }\n  };\n  const onError = async () => {\n    await Swal.fire({\n      icon: \"error\",\n      title: \"Oops...\",\n      text: \"An error occurred while checking in Patient!\",\n    });\n  };\n  let checkInServicesID = [];\n  /**** Submit Button For CheckIN  */\n  const handleSubmitCheckIn = (e) => {\n    e.preventDefault();\n    //Check if selected service object is empty before creating visit and posting.\n    let m = moment(checkInDate, \"yyyy-MM-DD hh:mm\").format(\"yyyy-MM-DD H:mm\");\n    if (selectedServices.selected.length > 0 && moment(m).isValid()) {\n      selectedServices.selected.length > 0 &&\n        selectedServices.selected.map((service) => {\n          checkInServicesID.push(\n            _.find(allServices, { moduleServiceCode: service }).id\n          );\n        });\n\n      checkInObj.serviceIds = checkInServicesID;\n      //Ensure date time is in 24hr format\n      checkInObj.visitDto.checkInDate = moment(\n        checkInDate,\n        \"yyyy-MM-DD hh:mm\"\n      ).format(\"yyyy-MM-DD HH:mm\");\n      axios\n        .post(`${baseUrl}patient/visit/checkin`, checkInObj, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          console.log(\"checkIn\", response);\n          toast.success(\"Patient Check-In successful\");\n          setCheckinStatus(true);\n          onCancelCheckIn();\n          loadPatientVisits();\n        })\n        .catch((error) => {\n          console.log(error);\n          toast.error(\"Something went wrong\");\n          onCancelCheckIn();\n        });\n    } else {\n      toast.error(\n        \"Kindly check the form for a valid date and selected services\"\n      );\n    }\n  };\n  /**** Submit Button Processing  */\n  const handleSubmitCheckOut = (e) => {\n    e.preventDefault();\n    const getVisitID = patientVisits.find(\n      (visits) => visits.status === \"PENDING\"\n    );\n\n    axios\n      .put(`${baseUrl}patient/visit/checkout/${getVisitID.id}`, getVisitID.id, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        toast.success(\"Record save successful\");\n        setCheckinStatus(false);\n        onCancelCheckOut();\n        loadPatientVisits();\n      })\n      .catch((error) => {\n        console.log(error);\n        toast.error(\"Something went wrong\");\n        onCancelCheckOut();\n      });\n  };\n  const onServiceSelect = (selectedValues) => {\n    setSelectedServices({ selected: selectedValues });\n  };\n  useEffect(() => {\n    loadServices();\n    loadPatientVisits();\n  }, [loadServices, loadPatientVisits]);\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"mb-3 col-md-3\">&nbsp;</div>\n        <div className=\"mb-3 col-md-3\">&nbsp;</div>\n        <div className=\"mb-3 col-md-3\">&nbsp;</div>\n        <div className=\"mb-3 col-md-3\">\n          <Link to={\"/\"}>\n            <MatButton\n              className=\" float-right mr-1\"\n              variant=\"contained\"\n              floated=\"left\"\n              startIcon={<TiArrowBack />}\n              style={{\n                backgroundColor: \"rgb(153, 46, 98)\",\n                color: \"#fff\",\n                height: \"35px\",\n              }}\n            >\n              <span style={{ textTransform: \"capitalize\" }}>Back</span>\n            </MatButton>\n          </Link>\n\n          {permissions.includes(\"patient_check_in\") ||\n          permissions.includes(\"all_permission\") ? (\n            <>\n              {checkinStatus === false ? (\n                <Button\n                  variant=\"contained\"\n                  style={{\n                    backgroundColor: \"rgb(4, 196, 217)\",\n                    fontSize: \"14PX\",\n                    fontWeight: \"bold\",\n                    height: \"35px\",\n                  }}\n                  onClick={handleCheckIn}\n                  className=\" float-right mr-1\"\n                >\n                  <span style={{ textTransform: \"capitalize\" }}>CheckIn</span>\n                </Button>\n              ) : (\n                \"\"\n              )}\n            </>\n          ) : (\n            \"\"\n          )}\n          {checkinStatus === true ? (\n            <Button\n              variant=\"contained\"\n              style={{\n                backgroundColor: \"green\",\n                fontSize: \"14PX\",\n                fontWeight: \"bold\",\n                height: \"35px\",\n              }}\n              onClick={handleCheckOut}\n              className=\" float-right mr-1\"\n            >\n              <span style={{ textTransform: \"capitalize\" }}>Check Out</span>\n            </Button>\n          ) : (\n            \"\"\n          )}\n\n          <Link >\n              <MatButton\n                  className=\" float-right mr-1\"\n                  variant=\"contained\"\n                  floated=\"left\"\n                  startIcon={<FontAwesomeIcon icon=\"fa-solid fa-fingerprint\" />}\n                  style={{backgroundColor:\"rgb(153, 46, 98)\", color:'#fff', height:'35px'}}\n                  onClick={toggleRecall}\n              >\n                  <span style={{ textTransform: \"capitalize\" }}>Identify</span>\n              </MatButton>\n          </Link>\n        </div>\n      </div>\n      <Modal\n        size=\"lg\"\n        style={{ maxWidth: \"900px\" }}\n        isOpen={modal}\n        toggle={onCancelCheckIn}\n        className={classes.checkinModal}\n      >\n        <ModalHeader toggle={onCancelCheckIn}>\n          <h5\n            style={{ fontWeight: \"bold\", fontSize: \"30px\", color: \"#992E62\" }}\n          >\n            Select Check-In Service\n          </h5>\n        </ModalHeader>\n        <ModalBody>\n          <form onSubmit={handleSubmitCheckIn}>\n            <Paper\n              style={{\n                display: \"grid\",\n                gridRowGap: \"20px\",\n                padding: \"20px\",\n                margin: \"10px 10px\",\n              }}\n            >\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <FormGroup\n                    style={{ width: \"100%\" }}\n                    className={classes.checkInDatePicker}\n                  >\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                      <Label\n                        for=\"post-services\"\n                        style={{\n                          color: \"#014d88\",\n                          fontWeight: \"bolder\",\n                          fontSize: \"18px\",\n                        }}\n                      >\n                        Check-In Date *\n                      </Label>\n                      <DesktopDateTimePicker\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            sx={{\n                              /*label:{ color:'#014d88',fontWeight:'bolder',fontSize:'18px' }*/\n                              input: { fontSize: \"14px\" },\n                            }}\n                            fullWidth\n                          />\n                        )}\n                        value={checkInDate}\n                        onChange={(newValue) => {\n                          setCheckInDate(newValue);\n                        }}\n                        maxDate={new Date()}\n                        maxTime={new Date()}\n                        style={{ width: \"100%\" }}\n                      />\n                    </LocalizationProvider>\n                  </FormGroup>\n                </Grid>\n                {/*                                <Grid item xs={8}>\n\n                                    <FormControl >\n                                        <Label for=\"dateOfRegistration\">Select service </Label>\n                                        <Autocomplete\n                                            multiple\n                                            id=\"checkboxes-tags-demo\"\n                                            options={services}\n                                            //disableCloseOnSelect\n                                            getOptionLabel={(option) => option.moduleServiceName}\n                                            onChange={(e, i) => {\n                                                console.log(i)\n                                                setSelectedServices({ ...selectedServices, checkInServices: i });\n                                            }}\n                                            renderOption={(props, option, { selected }) => (\n                                                <li {...props}>\n                                                    <Checkbox\n                                                        icon={icon}\n                                                        checkedIcon={checkedIcon}\n                                                        style={{ marginRight: 8 }}\n                                                        checked={selected}\n                                                    />\n                                                    {option.moduleServiceName}\n                                                </li>\n                                            )}\n                                            style={{ width: 400 }}\n                                            renderInput={(params) => (\n                                                <TextField {...params} label=\"Services\" />\n                                            )}\n                                        />\n\n                                    </FormControl>\n                                </Grid>*/}\n                <Grid item xs={12}>\n                  <FormGroup>\n                    <Label\n                      for=\"post-services\"\n                      style={{\n                        color: \"#014d88\",\n                        fontWeight: \"bolder\",\n                        fontSize: \"18px\",\n                      }}\n                    >\n                      <h5\n                        style={{\n                          fontWeight: \"bold\",\n                          fontSize: \"30px\",\n                          color: \"#992E62\",\n                        }}\n                      >\n                        Check-In Service *\n                      </h5>\n                    </Label>\n                    <DualListBox\n                      options={services}\n                      onChange={onServiceSelect}\n                      selected={selectedServices.selected}\n                    />\n                  </FormGroup>\n                </Grid>\n              </Grid>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <Button type={\"submit\"} variant=\"contained\" color={\"primary\"}>\n                    Submit\n                  </Button>\n                </Grid>\n              </Grid>\n            </Paper>\n          </form>\n        </ModalBody>\n      </Modal>\n      {/* Modal for CheckOut Patient */}\n      <Modal\n        isOpen={modalCheckOut}\n        toggle={onCancelCheckOut}\n        className={classes.checkinModal}\n        style={{ maxWidth: \"900px\", height: \"800px\" }}\n      >\n        <ModalHeader toggle={onCancelCheckOut}>\n          <h5\n            style={{ fontWeight: \"bold\", fontSize: \"30px\", color: \"#014d88\" }}\n          >\n            Check Out{\" \"}\n          </h5>\n        </ModalHeader>\n        <ModalBody>\n          <form>\n            <Paper\n              style={{\n                display: \"grid\",\n                gridRowGap: \"20px\",\n                padding: \"20px\",\n                margin: \"10px 10px\",\n              }}\n            >\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <h5\n                    style={{\n                      color: \"#992E62\",\n                      fontSize: \"20px\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    Are you sure you want to check-out patient?\n                  </h5>\n                </Grid>\n                <Grid item xs={12}>\n                  <FormGroup\n                    style={{ width: \"100%\" }}\n                    className={classes.checkInDatePicker}\n                  >\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                      <Label\n                        for=\"post-services\"\n                        style={{\n                          color: \"#014d88\",\n                          fontWeight: \"bolder\",\n                          fontSize: \"16px\",\n                        }}\n                      >\n                        Check-Out Date *\n                      </Label>\n                      <DesktopDateTimePicker\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            sx={{\n                              /*label:{ color:'#014d88',fontWeight:'bolder',fontSize:'18px' }*/\n                              input: { fontSize: \"14px\" },\n                            }}\n                            fullWidth\n                          />\n                        )}\n                        value={checkOutDate}\n                        onChange={(newValue) => {\n                          setCheckOutDate(newValue);\n                        }}\n                        maxDate={new Date()}\n                        maxTime={new Date()}\n                        style={{ width: \"100%\" }}\n                      />\n                    </LocalizationProvider>\n                  </FormGroup>\n                </Grid>\n              </Grid>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <Button\n                    type={\"submit\"}\n                    onClick={handleSubmitCheckOut}\n                    variant=\"contained\"\n                    color={\"primary\"}\n                  >\n                    Yes\n                  </Button>\n                  <Button\n                    onClick={onCancelCheckOut}\n                    variant=\"contained\"\n                    style={{\n                      backgroundColor: \"#992E62\",\n                      color: \"#fff\",\n                      marginLeft: \"10px\",\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                </Grid>\n              </Grid>\n            </Paper>\n          </form>\n        </ModalBody>\n      </Modal>\n      {/* End of Checkout Modal */}\n\n      <RecallPatient\n        modal={modalRecall}\n        toggle={toggleRecall}\n        patientDetails={patientDetails}\n        setPatientDetails={setPatientDetails}\n        pimsEnrollment={pimsEnrollment}\n        setPimsEnrollment={setPimsEnrollment}\n        personUuid={patientObj.uuid}\n      />\n    </>\n    \n  );\n}\n\nexport default Index;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\SplitActionButton.js",["627","628","629","630","631","632","633","634"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grow from '@mui/material/Grow';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport MenuItem from '@mui/material/MenuItem';\nimport MenuList from '@mui/material/MenuList';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ContentCut from '@mui/icons-material/ContentCut';\nimport Typography from '@mui/material/Typography';\nimport {FaEye, FaCaretDown } from \"react-icons/fa\";\nimport Divider from '@mui/material/Divider';\nimport {useRef} from \"react\";\nimport { Link } from 'react-router-dom'\n\n\n\nconst options = ['Delete', 'Edit'];\n\n\n\nexport default function SplitActionButton(props) {\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = useRef(null);\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\n\n    const handleClick = () => {\n        console.info(`You clicked ${options[selectedIndex]}`);\n    };\n\n    const handleMenuItemClick = () => {\n        setOpen(false);\n    };\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <React.Fragment>\n            <ButtonGroup variant=\"contained\" ref={anchorRef} style={{backgroundColor:'rgb(153, 46, 98)', height:'30px',width:'150px'}} >\n                <Link to={props.actions[0].to} style={{borderRight:'20px solid #fff !important'}}>\n                    <Button size=\"small\" onClick={handleClick} variant=\"contained\" startIcon={props.actions[0].icon} style={{backgroundColor:'rgb(153, 46, 98)'}}>\n                        <Typography variant=\"h7\" style={{fontWeight:'bolder'}}>{props.actions[0].name}</Typography>\n                    </Button>\n                </Link>\n\n                <Divider orientation=\"vertical\" flexItem style={{borderRight:'20px solid #fff !important', backgroundColor:'#fff',width:'1px', height:'26px',marginTop:'2px'}}>\n                    1\n                </Divider>\n                <Button\n                    size=\"medium\"\n                    aria-controls={open ? 'split-button-menu' : undefined}\n                    aria-expanded={open ? 'true' : undefined}\n                    aria-label=\"select merge strategy\"\n                    aria-haspopup=\"menu\"\n                    onClick={handleToggle}\n                    style={{backgroundColor:'rgb(153, 46, 98)'}}\n                >\n                    <FaCaretDown size='24' />\n                </Button>\n            </ButtonGroup>\n            <Popper\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n                style={{ zIndex:'10000' }}\n            >\n                {({ TransitionProps, placement }) => (\n                    <Grow\n                        {...TransitionProps}\n                        style={{\n                            transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\n                            zIndex:'1000'\n                        }}\n                    >\n                        {/*width: 130,*/}\n                        <Paper sx={{ minWidth:'130px', maxWidth: '150px', marginTop:'2px', zIndex:'1000' }}>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MenuList id=\"split-button-menu\" autoFocusItem>\n                                    {props.actions.slice(1).map((option, index) => (\n                                        <MenuItem\n                                            key={Math.random()}\n                                        >\n                                            <Link\n                                                to={option.to}\n                                                onClick={option.deleteAction}\n                                            >\n                                                {option.icon}<span style={{color: 'rgb(153, 46, 98)', fontWeight:'bolder', fontSize:'12px'}}>{option.name}</span>\n                                            </Link>\n                                        </MenuItem>\n                                    ))}\n                                </MenuList>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Grow>\n                )}\n            </Popper>\n        </React.Fragment>\n    );\n}\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PersonDemographics\\index.js",["635","636","637","638","639","640","641","642","643","644"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport { useLocation } from \"react-router-dom\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n} from \"@material-ui/core\";\nimport { Col, Row } from \"reactstrap\";\nimport { Label } from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\n\nconst styles = (theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: \"bottom\",\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: \"center\",\n  },\n  column: {\n    flexBasis: \"20.33%\",\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n});\nfunction Index(props) {\n  const { classes } = props;\n  const location = useLocation();\n\n  const patientData = location.state;\n\n  const patientObj =\n    Object.keys(props.patientObj).length > 0 ? props.patientObj : patientData;\n\n  const permissions = props.permissions ? props.permissions : [];\n  const [modal, setModal] = useState(false);\n  const [patientBiometricStatus, setPatientBiometricStatus] = useState(\n    props.patientBiometricStatus\n  );\n  const toggleModal = () => setModal(!modal);\n\n  const [biometricStatus, setBiometricStatus] = useState(false);\n  const [biometricCount, setBiometricCount] = useState([]);\n  const [devices, setDevices] = useState([]);\n  useEffect(() => {\n    setPatientBiometricStatus(props.patientBiometricStatus);\n    TemplateType();\n    BiometricCount();\n  }, [props.patientBiometricStatus]);\n  //Get list of KP\n  const TemplateType = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setBiometricStatus(response.data);\n        if (response.data === true) {\n          axios\n            .get(`${baseUrl}biometrics/devices`, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              setDevices(response.data);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const BiometricCount = () => {\n    axios\n      .get(`${baseUrl}biometrics/person/${patientObj.uuid}/biometric-count`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        console.log(response.data)\n          setBiometricCount(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n\n  const getHospitalNumber = (identifier) => {\n    const hospitalNumber = identifier?.identifier?.find(\n      (obj) => obj.type == \"HospitalNumber\"\n    );\n    return hospitalNumber ? hospitalNumber.value : \"\";\n  };\n\n  const calculateAge = (dob) => {\n    const today = new Date();\n    const birthDate = new Date(dob);\n\n    let ageYears = today.getFullYear() - birthDate.getFullYear();\n    const monthDifference = today.getMonth() - birthDate.getMonth();\n\n    if (\n      ageYears <= 0 &&\n      monthDifference < 0 &&\n      today.getDate() < birthDate.getDate()\n    ) {\n      ageYears--;\n    }\n\n    if (ageYears === 0) {\n      return monthDifference === 0\n        ? \"Less than a month\"\n        : `${monthDifference} month(s)`;\n    }\n\n    return ageYears === 1 ? \"1 year\" : `${ageYears} years`;\n  };\n\n  const getPhone = (contactPoint) => {\n    const phoneContact = contactPoint?.contactPoint?.find(\n      (obj) => obj.type == \"phone\"\n    );\n    return phoneContact ? phoneContact.value : \"\";\n  };\n\n  const getAddress = (address) => {\n    const city =\n      address && address.address && address.address.length > 0\n        ? `${address.address[0].line[0]}, ${address.address[0].city}`\n        : null;\n    return city;\n  };\n\n  const handleBiometricCapture = (id) => {\n    let patientObjID = id;\n    setModal(!modal);\n  };\n  return (\n    <div className={classes.root}>\n      <Accordion defaultExpanded>\n        <AccordionSummary>\n          <Row>\n            <Col md={11}>\n              <Row className={\"mt-1\"}>\n                <Col md={12} className={classes.root2}>\n                  <b style={{ fontSize: \"25px\", color: \"rgb(153, 46, 98)\" }}>\n                    {patientObj.surname + \", \" + patientObj.firstName}\n                  </b>\n                </Col>\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Hospital Number :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>\n                      {getHospitalNumber(patientObj.identifier)}\n                    </b>\n                  </span>\n                </Col>\n\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    Date Of Birth :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>{patientObj.dateOfBirth}</b>\n                  </span>\n                </Col>\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Age :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>\n                      {calculateAge(patientObj.dateOfBirth)}\n                    </b>\n                  </span>\n                </Col>\n                <Col md={4} style={{ marginTop: \"10px\" }}>\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Sex :{\" \"}\n                    <b\n                      style={{\n                        color: \"#0B72AA\",\n                        fontFamily: `'poppins', sans-serif`,\n                        fontWeight: \"bolder\",\n                      }}\n                    >\n                      {patientObj.sex}\n                    </b>\n                  </span>\n                </Col>\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Phone Number :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>\n                      {getPhone(patientObj?.contactPoint)}\n                    </b>\n                  </span>\n                </Col>\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Address :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>\n                      {getAddress(patientObj.address)}{\" \"}\n                    </b>\n                  </span>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </AccordionSummary>\n        <AccordionDetails className={classes.details}>\n          <div>\n          {biometricStatus === true ? (\n            <>\n              <div>\n                <Typography variant=\"caption\">\n                  <Label\n                    style={{ height: \"30px\", fontSize: \"14px\" }}\n                    color={patientBiometricStatus === true ? \"green\" : \"red\"}\n                    size={\"large\"}\n                  >\n                    Biometrics{\" \"}\n                    {patientBiometricStatus === true\n                      ? \"Captured\"\n                      : \"Not Captured\"}\n                  </Label>\n                </Typography>\n              </div>\n            </>\n          ) : (\n            <>\n              <div>\n                <Typography variant=\"caption\">\n                  <Label\n                    color={\"red\"}\n                    style={{ height: \"30px\", fontSize: \"14px\" }}\n                  >\n                    Biometrics Module Not Install\n                  </Label>\n                </Typography>\n              </div>\n            </>\n          )}\n          </div>\n          <div>\n          <Paper\n            sx={{\n              display: 'flex',\n              justifyContent: 'center',\n              flexWrap: 'wrap',\n              listStyle: 'none',\n              p: 0.5,\n              m: 0,\n            }}\n            component=\"ul\"\n          >\n\n\n      {biometricCount.map((item, index) => (\n        <Chip\n          key={index}\n          label={'R' + item.recapture +' - '+ item.count}\n          sx={{\n            fontSize: '16px',\n            padding: '5px',\n            backgroundColor: item.count < 6 ? 'maroon' : '',\n            color: item.count < 6 ? 'white' : ''\n\n          }}\n        />\n      ))}\n\n          </Paper>\n        </div>\n      </AccordionDetails>\n    </Accordion>\n      {/*\n            <CaptureBiometric  modalstatus={modal} togglestatus={toggleModal} patientId={patientObj.id} biometricDevices={devices} setPatientBiometricStatus={setPatientBiometricStatus} />\n*/}\n    </div>\n  );\n}\n\nIndex.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nfunction numberToWord(number) {\n  const units = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n  const teens = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];\n  const tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];\n\n  if (number === 0) return 'zero';\n  if (number < 0) return 'minus ' + numberToWord(-number);\n\n  let words = '';\n\n  if (number >= 1000) {\n      words += numberToWord(Math.floor(number / 1000)) + ' thousand ';\n      number %= 1000;\n  }\n\n  if (number >= 100) {\n      words += units[Math.floor(number / 100)] + ' hundred ';\n      number %= 100;\n  }\n\n  if (number >= 20) {\n      words += tens[Math.floor(number / 10)] + ' ';\n      number %= 10;\n  }\n\n  if (number >= 10) {\n      words += teens[number - 10];\n      number = 0;\n  }\n\n  if (number > 0) {\n      words += units[number];\n  }\n\n  return words.trim();\n}\n\nexport default withStyles(styles)(Index);\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\CaptureBiometric.js",["645","646","647","648","649","650","651","652","653","654","655","656","657","658","659","660"],"import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  Row,\n  Label,\n  Card,\n  CardBody,\n  Col,\n  FormGroup,\n  CardHeader,\n  Input,\n} from \"reactstrap\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Select from \"react-select\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport MatButton from \"@material-ui/core/Button\";\nimport FingerprintIcon from \"@material-ui/icons/Fingerprint\";\nimport { Button2, Icon, List } from \"semantic-ui-react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../api\";\n\nimport { green, red } from \"@mui/material/colors\";\nimport { Dimmer, Loader, Image, Segment } from \"semantic-ui-react\";\n\nimport Box from \"@mui/material/Box\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Button from \"@mui/material/Button\";\nimport Fab from \"@mui/material/Fab\";\nimport CheckIcon from \"@mui/icons-material/Check\";\n//import SaveIcon from '@mui/icons-material/Save';\n// import LinearProgress from '@mui/material/LinearProgress';\nimport Typography from \"@mui/material/Typography\";\n// import CancelIcon from '@mui/icons-material/Cancel';\n// import ModalImage from \"react-modal-image\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nlet checkUrl = \"\";\n\nconst CaptureBiometric = (props) => {\n  const classes = useStyles();\n  const biometricDevices = props.biometricDevices;\n  //Get the default device\n  const selectedDevice = biometricDevices.find((x) => x.active === \"true\");\n  console.log(biometricDevices);\n  checkUrl = selectedDevice.url === null ? baseUrl : selectedDevice.url;\n\n  const [objValues, setObjValues] = useState({\n    biometricType: \"FINGERPRINT\",\n    patientId: props.patientId,\n    templateType: \"\",\n    device: \"\",\n  });\n  const [fingerType, setFingerType] = useState([]);\n  const [devices, setDevices] = useState(props.biometricDevices);\n  const [loading, setLoading] = React.useState(false);\n  const [showCapture, setshowCapture] = React.useState(false);\n  const [tryAgain, setTryAgain] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const [errors, setErrors] = useState({});\n  // const [responseImage, setResponseImage] = useState(\"\")\n  const [capturedFingered, setCapturedFingered] = useState([]);\n  //console.log(biometricDevices)\n  const buttonSx = {\n    ...(success && {\n      bgcolor: green[500],\n      \"&:hover\": {\n        bgcolor: green[700],\n      },\n    }),\n  };\n\n  useEffect(() => {\n    TemplateType();\n    if (objValues.device === \"\") {\n      setshowCapture(false);\n    }\n  }, []);\n  //Get list of Finger index\n  const TemplateType = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFingerType(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  //check if device is plugged or not\n  const checkDevice = (e) => {\n    const deviceName = e.target.value;\n    const selectedDevice = biometricDevices.find((x) => x.name === deviceName);\n    checkUrl = selectedDevice.url === null ? baseUrl : selectedDevice.url;\n    console.log(checkUrl);\n    setObjValues({ ...objValues, device: deviceName });\n    axios\n      // .get(`${checkUrl}biometrics/secugen/boot?reader=${deviceName}`,\n      .get(`${checkUrl}`, { headers: { Authorization: `Bearer ${token}` } })\n      .then((response) => {\n        if (response.data.errorType === \"ERROR\") {\n          toast.error(response.data.errorName + \" is not plug\");\n          //setshowCapture(true)\n        } else {\n          setshowCapture(true);\n        }\n      })\n      .catch((error) => {});\n  };\n  // handle the input changes\n\n  const handleInputChange = (e) => {\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  //form validation\n  const validate = () => {\n    let temp = { ...errors };\n    temp.templateType = objValues.templateType ? \"\" : \"This field is required\";\n    temp.device = objValues.device ? \"\" : \"This field is required\";\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  //to capture  selected index finger\n  const captureFinger = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      // axios.post(`${checkUrl}biometrics/secugen/enrollment?reader=SG_DEV_AUTO`,objValues,\n      axios\n        .post(`${checkUrl}`, objValues, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setLoading(true);\n          if (response.data.type === \"ERROR\") {\n            setLoading(false);\n            setTryAgain(true);\n            window.setTimeout(() => {\n              setTryAgain(false);\n            }, 5000);\n            toast.error(response.data.message.ERROR);\n          } else {\n            const templateType = response.data.templateType;\n            setTryAgain(false);\n            setSuccess(true);\n            window.setTimeout(() => {\n              setSuccess(false);\n              setLoading(false);\n            }, 5000);\n\n            setCapturedFingered([...capturedFingered, response.data]);\n            fingerType.splice(templateType, 1);\n            setFingerType([...fingerType]);\n          }\n          //toast.success(\"Record save successful\");\n        })\n        .catch((error) => {});\n    }\n  };\n\n  //Save Biometric capture\n  const saveBiometrics = (e) => {\n    e.preventDefault();\n\n    if (capturedFingered.length > 1) {\n      const capturedObj = capturedFingered[capturedFingered.length - 1];\n\n      axios\n        .post(`${baseUrl}biometrics/templates`, capturedObj, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Biometric save successful\");\n          setCapturedFingered([]);\n          props.setPatientBiometricStatus(true);\n          props.togglestatus();\n        })\n        .catch((error) => {\n          toast.error(\"Something went wrong\");\n        });\n    } else {\n      toast.error(\"You can't save less than 2 finger\");\n    }\n  };\n\n  // console.log(capturedFingered)\n\n  return (\n    <div>\n      <Card>\n        <CardBody>\n          <Modal\n            isOpen={props.modalstatus}\n            toggle={props.togglestatus}\n            className={props.className}\n            size=\"lg\"\n          >\n            <Form>\n              <ModalHeader toggle={props.togglestatus}>\n                capture Biometric\n              </ModalHeader>\n              <ModalBody>\n                <Card>\n                  {/* <CardHeader>\n                                    Capture Biometrics\n                                </CardHeader> */}\n                  <CardBody>\n                    <Row form>\n                      <ToastContainer />\n                      <Col md={4}>\n                        <FormGroup>\n                          <Label for=\"device\">Select Device </Label>\n                          <Input\n                            type=\"select\"\n                            name=\"device\"\n                            id=\"device\"\n                            //onChange={checkDevice}\n                            value={objValues.device}\n                            required\n                            disabled\n                          >\n                            <option value=\"\">Select Device </option>\n                            {biometricDevices.map(({ id, name }) => (\n                              <option key={id} value={name}>\n                                {name}\n                              </option>\n                            ))}\n                          </Input>\n                          {errors.device !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.device}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </Col>\n                      {showCapture ? (\n                        <>\n                          <Col md={4}>\n                            <FormGroup>\n                              <Label for=\"device\">Select Finger</Label>\n                              <Input\n                                type=\"select\"\n                                name=\"templateType\"\n                                id=\"templateType\"\n                                onChange={handleInputChange}\n                                value={objValues.templateType}\n                                required\n                              >\n                                <option value=\"\">Select Finger </option>\n\n                                {fingerType.map((value) => (\n                                  <option key={value.id} value={value.display}>\n                                    {value.display}\n                                  </option>\n                                ))}\n                              </Input>\n                              {errors.templateType !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.templateType}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </Col>\n\n                          <Col md={4}>\n                            <MatButton\n                              type=\"button\"\n                              variant=\"contained\"\n                              color=\"primary\"\n                              onClick={captureFinger}\n                              className={\"mt-4\"}\n                              startIcon={<FingerprintIcon />}\n                            >\n                              Capture Finger\n                            </MatButton>\n                          </Col>\n                          <br />\n                        </>\n                      ) : (\n                        \"\"\n                      )}\n                      {/* <img width='500' height='200' src={responseImage}/> */}\n                      <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                        {loading && (\n                          <>\n                            <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n                              <Box sx={{ m: 1, position: \"relative\" }}>\n                                <Fab\n                                  aria-label=\"save\"\n                                  color=\"secondary\"\n                                  sx={buttonSx}\n                                >\n                                  {success ? (\n                                    <CheckIcon />\n                                  ) : (\n                                    <FingerprintIcon />\n                                  )}\n                                </Fab>\n                                {loading && (\n                                  <CircularProgress\n                                    size={68}\n                                    sx={{\n                                      color: green[500],\n                                      position: \"absolute\",\n                                      top: -6,\n                                      left: -6,\n                                      zIndex: 1,\n                                    }}\n                                  />\n                                )}\n                              </Box>\n                              <Typography\n                                variant=\"h6\"\n                                gutterBottom\n                                component=\"div\"\n                              >\n                                {success\n                                  ? ` your  ${objValues.templateType} Finger captured.`\n                                  : `Please place your  ${objValues.templateType} Finger on scanner.`}\n                              </Typography>\n                            </Box>\n                          </>\n                        )}\n                        {tryAgain && (\n                          <>\n                            <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n                              <Box sx={{ m: 1, position: \"relative\" }}>\n                                <Fab\n                                  aria-label=\"save\"\n                                  color=\"secondary\"\n                                  sx={buttonSx}\n                                >\n                                  <FingerprintIcon />\n                                </Fab>\n                                {tryAgain && (\n                                  <CircularProgress\n                                    size={68}\n                                    sx={{\n                                      color: red[500],\n                                      position: \"absolute\",\n                                      top: -6,\n                                      left: -6,\n                                      zIndex: 1,\n                                    }}\n                                  />\n                                )}\n                              </Box>\n                              <Typography\n                                variant=\"h6\"\n                                gutterBottom\n                                component=\"div\"\n                              >\n                                Click to Recapture Again\n                              </Typography>\n                            </Box>\n                          </>\n                        )}\n                        {/*  */}\n                      </Col>\n                    </Row>\n\n                    <Row>\n                      {capturedFingered.length >= 1 ? (\n                        <>\n                          <Col md={12}>\n                            <h3>Captured Fingerprints</h3>\n                          </Col>\n                          <Col md={12} style={{ marginTop: \"20px\" }}>\n                            <List celled horizontal>\n                              {capturedFingered.map((x) => (\n                                <List.Item>\n                                  {/* <List.Header><Icon name='cancel'  color='red' /> </List.Header> */}\n                                  <List.Content>\n                                    {\" \"}\n                                    <FingerprintIcon\n                                      style={{ color: \"#2E7D32\", fontSize: 40 }}\n                                    />\n                                    {x.templateType}\n                                  </List.Content>\n                                </List.Item>\n                              ))}\n                            </List>\n                          </Col>\n                          {/* <Col md={6} style={{marginTop:\"20px\"}}>\n                                        <List celled horizontal>\n                                            {[1,2,3].map((x) => (\n                                                <List.Item>\n                                                    <List.Header><Icon name='checkmark' color='green'/> </List.Header>\n                                                    <List.Content > <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}} /> Finger Type</List.Content>\n                                                </List.Item>\n                                            ))}\n\n                                        </List>\n\n                                    </Col> */}\n                          <br />\n                          <br />\n                          <br />\n                          <br />\n                          <br />\n                          <br />\n                          <Col md={12}>\n                            <MatButton\n                              type=\"button\"\n                              variant=\"contained\"\n                              color=\"primary\"\n                              onClick={saveBiometrics}\n                              // className={classes.button}\n                              startIcon={<SaveIcon />}\n                            >\n                              Save Capture\n                            </MatButton>\n                          </Col>\n                        </>\n                      ) : (\n                        \"\"\n                      )}\n                    </Row>\n                  </CardBody>\n                </Card>\n              </ModalBody>\n            </Form>\n          </Modal>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default CaptureBiometric;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Home\\NoRecapture.js",["661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678"],"//List of patients without biometrics\nimport React, { forwardRef, useCallback, useEffect, useState } from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport MaterialTable from \"material-table\";\nimport SplitActionButton from \"../SplitActionButton\";\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport Button from \"@material-ui/core/Button\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport Check from \"@material-ui/icons/Check\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport Search from \"@material-ui/icons/Search\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport { FaEye } from \"react-icons/fa\";\nimport { MdFingerprint } from \"react-icons/md\";\n\nimport { MdDeleteForever, MdModeEdit, MdPerson } from \"react-icons/md\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& a\": {\n      textDecoration: \"none !important\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nfunction NoRecapture(props) {\n  const classes = useStyles();\n  const [patients, setPatients] = useState([]);\n  const [permissions, setPermissions] = useState(props.permissions);\n  const [loading, setLoading] = useState(\"\");\n  const [patient, setPatient] = useState(false);\n  const [enablePPI, setEnablePPI] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  //Get list of Finger index\n  const userPermission = () => {\n    axios\n      .get(`${baseUrl}account`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setPermissions(response.data.permissions);\n      })\n      .catch((error) => {});\n  };\n  const loadPatients = useCallback(async () => {\n    try {\n      await axios\n        .get(`${baseUrl}patient/getall-patients-with-no-biometric`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          if (response.data) {\n            setPatients(response.data);\n          }\n        });\n    } catch (e) {\n      console.log(e);\n    }\n  }, []);\n\n  function actionItems(row) {\n    return [\n      //   {\n      //     name: \"View\",\n      //     type: \"link\",\n      //     icon: <FaEye size=\"22\" />,\n      //     to: {\n      //       pathname: \"/patient-biometrics\",\n      //       state: { patientObj: row, permissions: permissions },\n      //     },\n      //   },\n      {\n        ...(permissions.includes(\"view_patient\") ||\n          (permissions.includes(\"all_permission\") && {\n            name: \"Capture\",\n            type: \"link\",\n            icon: <MdFingerprint size=\"22\" />,\n            to: {\n              pathname: \"/patient-biometrics\",\n              state: { patientObj: row, permissions: permissions },\n            },\n          })),\n      },\n    ];\n  }\n\n  const handleRemoteData = (query) =>\n    new Promise((resolve, reject) => {\n      axios\n        .get(\n          `${baseUrl}patient/getall-patients-with-no-recapture?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        )\n        .then((response) => response)\n        .then((result) => {\n          resolve({\n            data: result.data.records.map((row) => ({\n              name: [row.firstName, row.otherName, row.surname]\n                .filter(Boolean)\n                .join(\", \"),\n              id: getHospitalNumber(row.identifier),\n              sex:\n                row.sex.toLowerCase().charAt(0).toUpperCase() +\n                row.sex.slice(1).toLowerCase(),\n              dateOfBirth: row.dateOfBirth,\n              age:\n                row.dateOfBirth === 0 ||\n                row.dateOfBirth === undefined ||\n                row.dateOfBirth === null ||\n                row.dateOfBirth === \"\"\n                  ? 0\n                  : calculateAge(row.dateOfBirth),\n              actions: (\n                <div>\n                  <SplitActionButton actions={actionItems(row)} />\n                </div>\n              ),\n            })),\n            page: query.page,\n            totalCount: result.data.totalRecords,\n          });\n        });\n    });\n  useEffect(() => {\n    userPermission();\n    loadPatients();\n  }, []);\n  const calculateAge = (dob) => {\n    const today = new Date();\n    const birthDate = new Date(dob);\n\n    let ageYears = today.getFullYear() - birthDate.getFullYear();\n    const monthDifference = today.getMonth() - birthDate.getMonth();\n\n    if (\n      ageYears <= 0 &&\n      monthDifference < 0 &&\n      today.getDate() < birthDate.getDate()\n    ) {\n      ageYears--;\n    }\n\n    if (ageYears === 0) {\n      return monthDifference === 0\n        ? \"Less than a month\"\n        : `${monthDifference} month(s)`;\n    }\n\n    return ageYears === 1 ? \"1 year\" : `${ageYears} years`;\n  };\n  const getHospitalNumber = (identifier) => {\n    const hospitalNumber = identifier.identifier.find(\n      (obj) => obj.type == \"HospitalNumber\"\n    );\n    return hospitalNumber ? hospitalNumber.value : \"\";\n  };\n\n  const enablePPIColumns = () => {\n    setEnablePPI(!enablePPI);\n  };\n  const PPISelect = () => (\n    <div>\n      {permissions.includes(\"view_patient\") ||\n      permissions.includes(\"all_permission\") ? (\n        <FormGroup className=\" float-right mr-1\">\n          <FormControlLabel\n            control={\n              <Checkbox\n                onChange={enablePPIColumns}\n                checked={!enablePPI}\n                style={{ color: \"#014d88\", fontWeight: \"bold\" }}\n              />\n            }\n            label=\"Show PII\"\n            style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n          />\n        </FormGroup>\n      ) : (\n        <h5 style={{ color: \"#3d4465\", fontWeight: \"bold\" }}>Patients</h5>\n      )}\n    </div>\n  );\n  const handleChangePage = (page) => {\n    setCurrentPage(page + 1);\n  };\n  const localization = {\n    pagination: {\n      labelDisplayedRows: `Page: ${currentPage}`,\n    },\n  };\n  return (\n    <div>\n      {/*<ToastContainer autoClose={3000} hideProgressBar />*/}\n      <h4>Patients with no biometrics recapture</h4>\n      <MaterialTable\n        icons={tableIcons}\n        title={<PPISelect />}\n        columns={[\n          {\n            title: \"Name\",\n            field: \"name\",\n            filtering: false,\n            hidden: enablePPI,\n          },\n          { title: \"Hosp. Number\", field: \"id\", filtering: false },\n          { title: \"Sex\", field: \"sex\", filtering: false },\n          { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\n          { title: \"Age\", field: \"age\", filtering: false },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        isLoading={loading}\n        data={handleRemoteData}\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n            fontSize: \"16px\",\n            padding: \"10px\",\n            fontWeight: \"bolder\",\n          },\n          searchFieldStyle: {\n            width: \"50%\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n        onChangePage={handleChangePage}\n        //localization={localization}\n      />\n    </div>\n  );\n}\n\nexport default NoRecapture;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Home\\BiometricsList.js",["679","680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696"],"//List of patients without biometrics\nimport React, { forwardRef, useCallback, useEffect, useState } from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport MaterialTable from \"material-table\";\nimport SplitActionButton from \"../SplitActionButton\";\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport Button from \"@material-ui/core/Button\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport Check from \"@material-ui/icons/Check\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport Search from \"@material-ui/icons/Search\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport { FaEye } from \"react-icons/fa\";\nimport {\n  MdDeleteForever,\n  MdModeEdit,\n  MdPerson,\n  MdFingerprint,\n} from \"react-icons/md\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& a\": {\n      textDecoration: \"none !important\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nfunction BiometricsList(props) {\n  const classes = useStyles();\n  const [patients, setPatients] = useState([]);\n  const [permissions, setPermissions] = useState(props.permissions);\n  const [loading, setLoading] = useState(\"\");\n  const [patient, setPatient] = useState(false);\n  const [enablePPI, setEnablePPI] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  //Get list of Finger index\n  const userPermission = () => {\n    axios\n      .get(`${baseUrl}account`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setPermissions(response.data.permissions);\n      })\n      .catch((error) => {});\n  };\n  const loadPatients = useCallback(async () => {\n    try {\n      await axios\n        .get(`${baseUrl}patient/getall-patients-without-biometric`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          if (response.data) {\n            setPatients(response.data);\n          }\n        });\n    } catch (e) {\n      console.log(e);\n    }\n  }, []);\n\n  function actionItems(row) {\n    return [\n      {\n        ...(permissions.includes(\"view_patient\") ||\n          (permissions.includes(\"all_permission\") && {\n            name: \"Capture\",\n            type: \"link\",\n            icon: <MdFingerprint size=\"22\" />,\n            to: {\n              pathname: \"/patient-dashboard\",\n              state: { patientObj: row, permissions: permissions },\n            },\n          })),\n      },\n    ];\n  }\n\n  const handleRemoteData = (query) =>\n    new Promise((resolve, reject) => {\n      axios\n        .get(\n          `${baseUrl}patient/getall-patients-without-biometric?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        )\n        .then((response) => response)\n        .then((result) => {\n          resolve({\n            data: result.data.records.map((row) => ({\n              name: [row.firstName, row.otherName, row.surname]\n                .filter(Boolean)\n                .join(\", \"),\n              id: getHospitalNumber(row.identifier),\n              sex:\n                row.sex.toLowerCase().charAt(0).toUpperCase() +\n                row.sex.slice(1).toLowerCase(),\n              dateOfBirth: row.dateOfBirth,\n              age:\n                row.dateOfBirth === 0 ||\n                row.dateOfBirth === undefined ||\n                row.dateOfBirth === null ||\n                row.dateOfBirth === \"\"\n                  ? 0\n                  : calculateAge(row.dateOfBirth),\n              actions: (\n                <div>\n                  {permissions.includes(\"view_patient\") ||\n                  permissions.includes(\"all_permission\") ? (\n                    <SplitActionButton actions={actionItems(row)} />\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              ),\n            })),\n            page: query.page,\n            totalCount: result.data.totalRecords,\n          });\n        });\n    });\n  useEffect(() => {\n    userPermission();\n    loadPatients();\n  }, []);\n\n  const calculateAge = (dob) => {\n    const today = new Date();\n    const birthDate = new Date(dob);\n\n    let ageYears = today.getFullYear() - birthDate.getFullYear();\n    const monthDifference = today.getMonth() - birthDate.getMonth();\n\n    if (\n      ageYears <= 0 &&\n      monthDifference < 0 &&\n      today.getDate() < birthDate.getDate()\n    ) {\n      ageYears--;\n    }\n\n    if (ageYears === 0) {\n      return monthDifference === 0\n        ? \"Less than a month\"\n        : `${monthDifference} month(s)`;\n    }\n\n    return ageYears === 1 ? \"1 year\" : `${ageYears} years`;\n  };\n\n  const getHospitalNumber = (identifier) => {\n    const hospitalNumber = identifier.identifier.find(\n      (obj) => obj.type == \"HospitalNumber\"\n    );\n    return hospitalNumber ? hospitalNumber.value : \"\";\n  };\n\n  const enablePPIColumns = () => {\n    setEnablePPI(!enablePPI);\n  };\n  const PPISelect = () => (\n    <div>\n      {permissions.includes(\"view_patient\") ||\n      permissions.includes(\"all_permission\") ? (\n        <FormGroup className=\" float-right mr-1\">\n          <FormControlLabel\n            control={\n              <Checkbox\n                onChange={enablePPIColumns}\n                checked={!enablePPI}\n                style={{ color: \"#014d88\", fontWeight: \"bold\" }}\n              />\n            }\n            label=\"Show PII\"\n            style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n          />\n        </FormGroup>\n      ) : (\n        <h5 style={{ color: \"#3d4465\", fontWeight: \"bold\" }}>Patients</h5>\n      )}\n    </div>\n  );\n  const handleChangePage = (page) => {\n    setCurrentPage(page + 1);\n  };\n  const localization = {\n    pagination: {\n      labelDisplayedRows: `Page: ${currentPage}`,\n    },\n  };\n  return (\n    <div>\n      {/*<ToastContainer autoClose={3000} hideProgressBar />*/}\n      <h3>Patients without biometrics</h3>\n      <MaterialTable\n        icons={tableIcons}\n        title={<PPISelect />}\n        columns={[\n          {\n            title: \"Name\",\n            field: \"name\",\n            filtering: false,\n            hidden: enablePPI,\n          },\n          { title: \"Hosp. Number\", field: \"id\", filtering: false },\n          { title: \"Sex\", field: \"sex\", filtering: false },\n          { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\n          { title: \"Age\", field: \"age\", filtering: false },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        isLoading={loading}\n        data={handleRemoteData}\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n            fontSize: \"16px\",\n            padding: \"10px\",\n            fontWeight: \"bolder\",\n          },\n          searchFieldStyle: {\n            width: \"50%\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n        onChangePage={handleChangePage}\n        //localization={localization}\n      />\n    </div>\n  );\n}\n\nexport default BiometricsList;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\Home\\NotCaptured.js",["697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714"],"//List of patients without biometrics\nimport React, { forwardRef, useCallback, useEffect, useState } from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport MaterialTable from \"material-table\";\nimport SplitActionButton from \"../SplitActionButton\";\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport Button from \"@material-ui/core/Button\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport Check from \"@material-ui/icons/Check\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport Search from \"@material-ui/icons/Search\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport { FaEye } from \"react-icons/fa\";\nimport { MdFingerprint } from \"react-icons/md\";\n\nimport { MdDeleteForever, MdModeEdit, MdPerson } from \"react-icons/md\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& a\": {\n      textDecoration: \"none !important\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nfunction NotCaptured(props) {\n  const classes = useStyles();\n  const [patients, setPatients] = useState([]);\n  const [permissions, setPermissions] = useState(props.permissions);\n  const [loading, setLoading] = useState(\"\");\n  const [patient, setPatient] = useState(false);\n  const [enablePPI, setEnablePPI] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  //Get list of Finger index\n  const userPermission = () => {\n    axios\n      .get(`${baseUrl}account`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setPermissions(response.data.permissions);\n      })\n      .catch((error) => {});\n  };\n  const loadPatients = useCallback(async () => {\n    try {\n      await axios\n        .get(`${baseUrl}patient/getall-patients-with-no-biometric`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          if (response.data) {\n            setPatients(response.data);\n          }\n        });\n    } catch (e) {\n      console.log(e);\n    }\n  }, []);\n\n  function actionItems(row) {\n    return [\n      //   {\n      //     name: \"View\",\n      //     type: \"link\",\n      //     icon: <FaEye size=\"22\" />,\n      //     to: {\n      //       pathname: \"/patient-biometrics\",\n      //       state: { patientObj: row, permissions: permissions },\n      //     },\n      //   },\n      {\n        ...(permissions.includes(\"view_patient\") ||\n          (permissions.includes(\"all_permission\") && {\n            name: \"Capture\",\n            type: \"link\",\n            icon: <MdFingerprint size=\"22\" />,\n            to: {\n              pathname: \"/patient-dashboard\",\n              state: { patientObj: row, permissions: permissions },\n            },\n          })),\n      },\n    ];\n  }\n\n  const handleRemoteData = (query) =>\n    new Promise((resolve, reject) => {\n      axios\n        .get(\n          `${baseUrl}patient/getall-patients-with-no-biometric?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        )\n        .then((response) => response)\n        .then((result) => {\n          resolve({\n            data: result.data.records.map((row) => ({\n              name: [row.firstName, row.otherName, row.surname]\n                .filter(Boolean)\n                .join(\", \"),\n              id: getHospitalNumber(row.identifier),\n              sex:\n                row.sex.toLowerCase().charAt(0).toUpperCase() +\n                row.sex.slice(1).toLowerCase(),\n              dateOfBirth: row.dateOfBirth,\n              age:\n                row.dateOfBirth === 0 ||\n                row.dateOfBirth === undefined ||\n                row.dateOfBirth === null ||\n                row.dateOfBirth === \"\"\n                  ? 0\n                  : calculateAge(row.dateOfBirth),\n              actions: (\n                <div>\n                  <SplitActionButton actions={actionItems(row)} />\n                </div>\n              ),\n            })),\n            page: query.page,\n            totalCount: result.data.totalRecords,\n          });\n        });\n    });\n  useEffect(() => {\n    userPermission();\n    loadPatients();\n  }, []);\n  const calculateAge = (dob) => {\n    const today = new Date();\n    const birthDate = new Date(dob);\n\n    let ageYears = today.getFullYear() - birthDate.getFullYear();\n    const monthDifference = today.getMonth() - birthDate.getMonth();\n\n    if (\n      ageYears <= 0 &&\n      monthDifference < 0 &&\n      today.getDate() < birthDate.getDate()\n    ) {\n      ageYears--;\n    }\n\n    if (ageYears === 0) {\n      return monthDifference === 0\n        ? \"Less than a month\"\n        : `${monthDifference} month(s)`;\n    }\n\n    return ageYears === 1 ? \"1 year\" : `${ageYears} years`;\n  };\n  const getHospitalNumber = (identifier) => {\n    const hospitalNumber = identifier.identifier.find(\n      (obj) => obj.type == \"HospitalNumber\"\n    );\n    return hospitalNumber ? hospitalNumber.value : \"\";\n  };\n\n  const enablePPIColumns = () => {\n    setEnablePPI(!enablePPI);\n  };\n  const PPISelect = () => (\n    <div>\n      {permissions.includes(\"view_patient\") ||\n      permissions.includes(\"all_permission\") ? (\n        <FormGroup className=\" float-right mr-1\">\n          <FormControlLabel\n            control={\n              <Checkbox\n                onChange={enablePPIColumns}\n                checked={!enablePPI}\n                style={{ color: \"#014d88\", fontWeight: \"bold\" }}\n              />\n            }\n            label=\"Show PII\"\n            style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n          />\n        </FormGroup>\n      ) : (\n        <h5 style={{ color: \"#3d4465\", fontWeight: \"bold\" }}>Patients</h5>\n      )}\n    </div>\n  );\n  const handleChangePage = (page) => {\n    setCurrentPage(page + 1);\n  };\n  const localization = {\n    pagination: {\n      labelDisplayedRows: `Page: ${currentPage}`,\n    },\n  };\n  return (\n    <div>\n      {/*<ToastContainer autoClose={3000} hideProgressBar />*/}\n      <h4>Patients not captured</h4>\n      <MaterialTable\n        icons={tableIcons}\n        title={<PPISelect />}\n        columns={[\n          {\n            title: \"Name\",\n            field: \"name\",\n            filtering: false,\n            hidden: enablePPI,\n          },\n          { title: \"Hosp. Number\", field: \"id\", filtering: false },\n          { title: \"Sex\", field: \"sex\", filtering: false },\n          { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\n          { title: \"Age\", field: \"age\", filtering: false },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        isLoading={loading}\n        data={handleRemoteData}\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n            fontSize: \"16px\",\n            padding: \"10px\",\n            fontWeight: \"bolder\",\n          },\n          searchFieldStyle: {\n            width: \"50%\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n        onChangePage={handleChangePage}\n        //localization={localization}\n      />\n    </div>\n  );\n}\n\nexport default NotCaptured;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\MigrationDQA\\DuplicateHospitalNumbers.js",["715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743"],"import React, {forwardRef, useCallback, useEffect, useRef, useState} from 'react';\nimport axios from \"axios\";\nimport {token, url as baseUrl} from \"../../../../api\";\nimport MaterialTable from \"material-table\";\nimport Swal from \"sweetalert2\";\n\nimport {FaEye} from \"react-icons/fa\";\nimport {MdDeleteForever, MdModeEdit, MdPerson} from \"react-icons/md\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport Check from \"@material-ui/icons/Check\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport Search from \"@material-ui/icons/Search\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {ToastContainer} from \"react-toastify\";\nimport {Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport Button from \"@material-ui/core/Button\";\nimport SplitActionButton from \"../SplitActionButton\";\n\nconst tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        '& a':{\n            textDecoration:'none !important'\n        }\n    },\n    input: {\n        display: 'none'\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"11px\",\n    },\n    success: {\n        color: \"#4BB543 \",\n        fontSize: \"11px\",\n    },\n}));\n\nfunction DuplicateHospitalNumbers(props) {\n    const tableRef = useRef(null);\n    const classes = useStyles();\n    const [patients, setPatients] = useState([]);\n    const [permissions, setPermissions] = useState(props.permissions);\n    const [loading, setLoading] = useState('');\n    const [modal, setModal] = useState(false);\n    const [patient, setPatient] = useState(false);\n    const [enablePPI, setEnablePPI] = useState(true);\n    const [searchParams,setSearchParams] = useState('*');\n    const [totalPages,setTotalPages] = useState(0);\n    const [totalRecords,setTotalRecords] = useState(0);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [currentPage,setCurrentPage] = useState(1);\n    const toggle = (id) => {\n        const patient = patients.find(obj => obj.id == id);\n        setPatient(patient);\n        setModal(!modal);\n    }\n\n    const handleDelete = (id) => {\n        axios\n            .delete(`${baseUrl}patient/delete/${id}`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                Swal.fire({\n                      icon: 'success',\n                      text: 'DQA Deleted Successfully',\n                      timer: 1500\n                 });\n            })\n            .catch((error) => {\n                 Swal.fire({\n                    icon: 'error',\n                    title: 'Oops...',\n                    text: 'An error occurred while deleting!!!',\n                });\n            });\n    }\n\n    function actionItems(row){\n        return  [\n            {\n                name:'View',\n                type:'link',\n                icon:<FaEye  size=\"22\"/>,\n                to:{\n                    pathname: \"/register-patient\",\n                    state: { patientId : row.id, permissions:permissions  }\n                }\n            },\n            {...(permissions.includes('edit_patient') || permissions.includes(\"all_permission\")&&\n                    {\n                        name:'Edit',\n                        type:'link',\n                        icon:<MdModeEdit size=\"20\" color='rgb(4, 196, 217)' />,\n                        to:{\n                            pathname: \"/register-patient\",\n                            state: { patientId : row.id, permissions:permissions  }\n                        }\n                    }\n                )},\n             {...(permissions.includes('delete_patient') || permissions.includes(\"all_permission\")&&\n                    {\n                        name:'Delete',\n                        type:'link',\n                        icon:<MdDeleteForever size=\"20\" color='rgb(4, 196, 217)'  />,\n                        deleteAction: () => {handleDelete(row.id)},\n                        to:{\n                            pathname: \"/#\",\n                            state: { patientObj: row, permissions:permissions  }\n                        }\n                    }\n                )}\n        ]\n    }\n    const handleRemoteData = query =>\n        new Promise((resolve, reject) => {\n            axios.get(`${baseUrl}patient/get-duplicate-hospital_numbers?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`, { headers: {\"Authorization\" : `Bearer ${token}`} })\n                .then(response => response)\n                .then(result => {\n                  if (result.data === \"\") {\n                    resolve({\n                      data: [],\n                      page: 0,\n                      totalCount: 0,\n                    });\n                  } else {\n                      resolve({\n                        data: result.data.records.map((row) => ({\n                            name: [row.firstName, row.otherName, row.surname].filter(Boolean).join(\", \"),\n                            id: getHospitalNumber(row.identifier),\n                            sex: row.sex,\n                            dateOfBirth: row.dateOfBirth,\n                            status:row.archived == 1?'Archived':\"Active\",\n                            age: (row.dateOfBirth === 0 ||\n                                row.dateOfBirth === undefined ||\n                                row.dateOfBirth === null ||\n                                row.dateOfBirth === \"\" )\n                                ? 0\n                                : calculate_age(row.dateOfBirth),\n                            actions:\n                                <div>\n                                    {permissions.includes('view_patient') || permissions.includes(\"all_permission\") ? (\n                                        <SplitActionButton actions={actionItems(row)} />\n                                    ):\"\"\n                                    }\n                                </div>\n                        })),\n                        page: query.page,\n                        totalCount: result.data.totalRecords\n                    });\n                  }\n                });\n        })\n\n\n    const onDelete = async (id) => {\n        try {\n            if (id) {\n                const response = await axios.delete(`${baseUrl}patient/${id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\n                window.location.reload();\n            }\n        } catch (e) {\n\n        }\n    }\n\n    const onCancelDelete = () => {\n        setModal(false);\n    }\n\n    const calculate_age = dob => {\n\n        const today = new Date();\n        const dateParts = dob.split(\"-\");\n        const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\n        let age_now = today.getFullYear() - birthDate.getFullYear();\n        const m = today.getMonth() - birthDate.getMonth();\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n            age_now--;\n        }\n        if (age_now === 0) {\n            return m + \" month(s)\";\n        }\n        return age_now + \" year(s)\";\n    };\n\n    const getHospitalNumber = (identifier) => {\n        const hospitalNumber = identifier.identifier.find(obj => obj.type == 'HospitalNumber');\n        return hospitalNumber ? hospitalNumber.value : '';\n    };\n\n    const getAddress = (address) => {\n        const city = address && address.address && address.address.length > 0 ? address.address[0].city : null;\n        return city;\n    };\n\n    const getGender = (gender) => {\n        return gender.display;\n    };\n\n\n\n    const enablePPIColumns = () =>{\n        setEnablePPI(!enablePPI)\n    }\n    const PPISelect = () => <div>\n        {permissions.includes('view_patient') || permissions.includes(\"all_permission\") ? (\n            <FormGroup className=\" float-right mr-1\">\n                <FormControlLabel  control={\n                    <Checkbox\n                        onChange={enablePPIColumns}\n                        checked={!enablePPI}\n                        style={{color:'#014d88',fontWeight:'bold'}}\n                    />\n                } label=\"Show PII\" style={{color:'#014d88',fontWeight:'bolder'}} />\n            </FormGroup>\n        ):<h5 style={{color:'#3d4465',fontWeight:'bold'}}>Patients</h5>\n        }\n    </div>;\n\n\n    const handleChangePage = (page) => {\n        setCurrentPage(page + 1);\n    };\n    const localization = {\n        pagination: {\n            labelDisplayedRows: `Page: ${currentPage}`\n        }\n    }\n\n    return (\n        <div className={classes.root}>\n            <ToastContainer autoClose={3000} hideProgressBar />\n            <MaterialTable\n                tableRef={tableRef}\n                /*onSearchChange={(e) => {\n                    handleSearchChange(e);\n                }}*/\n                icons={tableIcons}\n                title={<PPISelect/>}\n                columns={[\n                    {\n                        title: \"Name\",\n                        field: \"name\",\n                        filtering: false,\n                        hidden:enablePPI\n                    },\n                    { title: \"Hosp. Number\", field: \"id\" , filtering: false},\n                    { title: \"Sex\", field: \"sex\", filtering: false },\n                    { title: \"Date Of Birth\", field: \"dateOfBirth\", filtering: false },\n                    { title: \"Age\", field: \"age\", filtering: false },\n                    /*{ title: \"Address\", field: \"address\", filtering: false },*/\n                    { title: \"Status\", field: \"status\", filtering: false },\n                    {title: \"Actions\", field: \"actions\", filtering: false },\n                ]}\n                isLoading={loading}\n                data={handleRemoteData}\n\n                options={{\n                    rowStyle: rowData => {\n                        if(rowData.status === 'Archived') {\n                            return {\n                                backgroundColor: '#ceeef5',\n                                border:'2px solid #fff'\n                            };\n                        }\n\n                        return {border:'2px solid #eee'};\n                    },\n                    headerStyle: {\n                        backgroundColor: \"#014d88\",\n                        color: \"#fff\",\n                        fontSize:'16px',\n                        padding:'10px',\n                        fontWeight:'bolder'\n                    },\n                    searchFieldStyle: {\n                        width : '50%'\n                    },\n                    filtering: false,\n                    exportButton: false,\n                    searchFieldAlignment: 'left',\n                    pageSizeOptions:[10,20,100],\n                    pageSize:10,\n                    debounceInterval: 400,\n\n                }}\n                onChangePage={handleChangePage}\n                //localization={localization}\n\n            />\n            <Modal isOpen={modal} toggle={onCancelDelete}>\n                <ModalHeader toggle={onCancelDelete}>Delete Patient</ModalHeader>\n                <ModalBody>\n                    Are you sure to delete this record? { patient ? patient.surname +  ', ' + patient.firstname +  ' ' + patient.otherName : '' }\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"primary\" type=\"button\" onClick={(e) => onDelete(patient.id)}>Yes</Button>{' '}\n                    <Button color=\"secondary\" type=\"button\" onClick={(e) => onCancelDelete()}>No</Button>\n                </ModalFooter>\n            </Modal>\n        </div>\n    );\n}\n\nexport default DuplicateHospitalNumbers;","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\PatientsCard.js",["744","745","746","747","748","749","750","751","752","753"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../api\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n} from \"@material-ui/core\";\nimport { Col, Row } from \"reactstrap\";\nimport { Label } from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = (theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: \"bottom\",\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: \"center\",\n  },\n  column: {\n    flexBasis: \"20.33%\",\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing(1)}px ${theme.spacing(1) * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n});\n\nfunction PatientsCard(props) {\n  console.log(props);\n  const { classes } = props;\n  const patientObj = props.patientObj ? props.patientObj : {};\n  const permissions = props.permissions ? props.permissions : [];\n  const [modal, setModal] = useState(false); //Modal to collect sample\n  const [patientBiometricStatus, setPatientBiometricStatus] = useState(true);\n  const toggleModal = () => setModal(!modal);\n\n  const [biometricStatus, setBiometricStatus] = useState(true);\n  const [devices, setDevices] = useState([]);\n  useEffect(() => {\n    //setPatientBiometricStatus(props.patientBiometricStatus)\n    TemplateType();\n  }, []);\n  //Get list of KP\n  const TemplateType = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setBiometricStatus(response.data);\n        if (response.data === true) {\n          axios\n            .get(`${baseUrl}biometrics/devices`, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              setDevices(response.data);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const getHospitalNumber = (identifier) => {\n    const hospitalNumber = identifier.identifier.find(\n      (obj) => obj.type == \"HospitalNumber\"\n    );\n    return hospitalNumber ? hospitalNumber.value : \"\";\n  };\n\n  const calculate_age = (dob) => {\n    const today = new Date();\n    const dateParts = dob.split(\"-\");\n    const birthDate = new Date(dob);\n    let age_now = today.getFullYear() - birthDate.getFullYear();\n    const m = today.getMonth() - birthDate.getMonth();\n\n    if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n      age_now--;\n    }\n\n    if (age_now === 0) {\n      return m + \" month(s)\";\n    }\n    return age_now + \" year(s)\";\n  };\n\n  const getPhone = (contactPoint) => {\n    console.log(\"contact\", contactPoint);\n    const phoneContact = contactPoint?.contactPoint?.find(\n      (obj) => obj.type == \"phone\"\n    );\n    return phoneContact ? phoneContact.value : \"\";\n  };\n\n  const getAddress = (address) => {\n    const city =\n      address && address.address && address.address.length > 0\n        ? `${address.address[0].line[0]}, ${address.address[0].city}`\n        : null;\n    return city;\n  };\n\n  const handleBiometricCapture = (id) => {\n    let patientObjID = id;\n    setModal(!modal);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Accordion defaultExpanded>\n        <AccordionSummary>\n          <Row>\n            <Col md={11}>\n              <Row className={\"mt-1\"}>\n                <Col md={12} className={classes.root2}>\n                  <b style={{ fontSize: \"25px\", color: \"rgb(153, 46, 98)\" }}>\n                    {patientObj.surname + \", \" + patientObj.firstName}\n                  </b>\n                </Col>\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Hospital Numbers :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>\n                      {getHospitalNumber(patientObj.identifier)}\n                    </b>\n                  </span>\n                </Col>\n\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    Date Of Birth :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>{patientObj.dateOfBirth}</b>\n                  </span>\n                </Col>\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Age :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>\n                      {calculate_age(patientObj.dateOfBirth)}\n                    </b>\n                  </span>\n                </Col>\n                <Col md={4} style={{ marginTop: \"10px\" }}>\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Sex :{\" \"}\n                    <b\n                      style={{\n                        color: \"#0B72AA\",\n                        fontFamily: `'poppins', sans-serif`,\n                        fontWeight: \"bolder\",\n                      }}\n                    >\n                      {patientObj.sex}\n                    </b>\n                  </span>\n                </Col>\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Phone Number :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>\n                      {getPhone(patientObj?.contactPoint)}\n                    </b>\n                  </span>\n                </Col>\n                <Col\n                  md={4}\n                  className={classes.root2}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <span style={{ color: \"#000\" }}>\n                    {\" \"}\n                    Address :{\" \"}\n                    <b style={{ color: \"#0B72AA\" }}>\n                      {getAddress(patientObj.address)}{\" \"}\n                    </b>\n                  </span>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </AccordionSummary>\n        <AccordionDetails className={classes.details}>\n          {biometricStatus === true ? (\n            <>\n              <div>\n                <Typography variant=\"caption\">\n                  <Label\n                    style={{ height: \"30px\", fontSize: \"14px\" }}\n                    color={patientBiometricStatus === true ? \"green\" : \"red\"}\n                    size={\"large\"}\n                  >\n                    Biometrics{\" \"}\n                    {patientBiometricStatus === true\n                      ? \"Captured\"\n                      : \"Not Captured\"}\n                  </Label>\n                </Typography>\n              </div>\n            </>\n          ) : (\n            <>\n              <div>\n                <Typography variant=\"caption\">\n                  <Label\n                    color={\"red\"}\n                    style={{ height: \"30px\", fontSize: \"14px\" }}\n                  >\n                    Biometrics Module Not Install\n                  </Label>\n                </Typography>\n              </div>\n            </>\n          )}\n        </AccordionDetails>\n      </Accordion>\n      {/*\n            <CaptureBiometric  modalstatus={modal} togglestatus={toggleModal} patientId={patientObj.id} biometricDevices={devices} setPatientBiometricStatus={setPatientBiometricStatus} />\n*/}\n    </div>\n  );\n}\n\nPatientsCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PatientsCard);\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\Patient-Module\\src\\main\\webapp\\components\\ReCaptureBiometric.js",["754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Row, Label, Col, FormGroup, Input, Button, Badge } from \"reactstrap\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport MatButton from \"@material-ui/core/Button\";\nimport FingerprintIcon from \"@material-ui/icons/Fingerprint\";\nimport { Button2, Icon, List } from \"semantic-ui-react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\n\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../api\";\n\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nimport { Link, useHistory } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport fingerprintimage from \"../images/fingerprintimage.png\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport LinearProgress from \"@mui/material/LinearProgress\";\n\nimport _ from \"lodash\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":\n      {\n        fontFamily: \"FontAwesome\",\n        border: \"0\",\n        verticalAlign: \"middle\",\n        marginLeft: \".25em\",\n        lineHeight: \"1\",\n      },\n    \"& .dropdown-menu .dropdown-item\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      padding: \"0.3rem 1.5rem\",\n      fontWeight: \"bold\",\n    },\n    \"& .mt-4\": {\n      marginTop: \"28px !important\",\n    },\n    \"& .form-control\": {\n      color: \"#992E62\",\n    },\n    \"& .form-control:focus\": {\n      color: \"#014d88\",\n    },\n    \"& .sharp \": {\n      \"min-width\": \"35px\",\n      padding: \"5px\",\n      height: \"35px\",\n      \"min-height\": \"35px\",\n    },\n  },\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  /*    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 350,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n    },\n    input: {\n        display: \"none\",\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"12.8px\",\n    },*/\n}));\n\nlet checkUrl = \"\";\n\nfunction Biometrics(props) {\n  localStorage.setItem(\"patient_id\", JSON.stringify(props.patientId));\n  const classes = useStyles();\n  let history = useHistory();\n  const permissions =\n    history.location && history.location.state\n      ? history.location.state.permissions\n      : [];\n  const [biometricDevices, setbiometricDevices] = useState([]);\n  const [objValues, setObjValues] = useState({\n    biometricType: \"FINGERPRINT\",\n    patientId: props.patientId,\n    templateType: \"\",\n    device: \"SECUGEN\",\n    reason: \"\",\n    age: \"\",\n  });\n  const [fingerType, setFingerType] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [pageLoading, setPageLoading] = useState(false);\n  const [showCapture, setshowCapture] = React.useState(false);\n  const [tryAgain, setTryAgain] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const [errors, setErrors] = useState({});\n  const [storedBiometrics, setStoredBiometrics] = useState([]);\n  // const [responseImage, setResponseImage] = useState(\"\")\n  const [capturedFingered, setCapturedFingered] = useState([]);\n  const [capturedFingeredObj, setCapturedFingeredObj] = useState([]);\n  const [recapturedFingered, setRecapturedFingered] = useState([]);\n  const [selectedFingers, setSelectedFingers] = useState([]);\n  const [imageQuality, setImageQuality] = useState(false);\n  const [isNewStatus, setIsNewStatus] = useState(true);\n\n  const calculate_age = (dob) => {\n    const today = new Date();\n    const dateParts = dob.split(\"-\");\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\n    let age_now = today.getFullYear() - birthDate.getFullYear();\n    // const m = today.getMonth() - birthDate.getMonth();\n    // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n    //     age_now--;\n    // }\n    // if (age_now === 0) {\n    //     return m + \" month(s)\";\n    // }\n    return age_now;\n  };\n\n  const getPersonBiometrics = async () => {\n    const fingersCodeset = await axios.get(\n      `${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n\n    axios\n      .get(`${baseUrl}biometrics/person/${props.patientId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then(async (response) => {\n        if (response.data.length > 0) {\n          setStoredBiometrics(response.data);\n\n          setPageLoading(true);\n\n          let personCapturedFingers = _.uniq(\n            _.map(response.data, \"templateType\")\n          );\n\n          //console.log(personCapturedFingers);\n          //setSelectedFingers(personCapturedFingers);\n\n          let biometricItems = _.map(fingersCodeset.data, (item) => {\n            return _.extend({}, item, {\n              captured: false,\n            });\n          });\n\n          setFingerType(biometricItems);\n        } else {\n          let biometricItems = _.map(fingersCodeset.data, (item) => {\n            return _.extend({}, item, { captured: false });\n            //return item.captured = personCapturedFingers.includes(item.display)\n          });\n          setFingerType(biometricItems);\n        }\n      })\n      .catch(async (error) => {\n        console.log(\"getPersonBiometrics error\");\n        console.log(error);\n\n        let biometricItems = _.map(fingersCodeset.data, (item) => {\n          return _.extend({}, item, { captured: false });\n        });\n        setFingerType(biometricItems);\n        setPageLoading(true);\n      });\n  };\n\n  const clear_storelist = () => {\n    axios\n      .post(\n        `${baseUrl}biometrics/store-list/${props.patientId}`,\n        props.patientId,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        //console.log(\"cleared store\");\n      })\n      .catch((error) => {\n        //console.log(\"cleared store error\");\n        console.log(error);\n      });\n  };\n\n  const getRecaptureCount = () => {\n    axios\n      .get(`${baseUrl}biometrics/grouped/person/${props.patientId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setRecapturedFingered(response.data);\n      });\n  };\n\n  useEffect(() => {\n    clear_storelist();\n    getPersonBiometrics();\n    TemplateType();\n    getRecaptureCount();\n    //biometricFingers();\n  }, []);\n\n  //Get list of Finger index\n  // const TemplateType = () => {\n  //   axios\n  //     .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`, {\n  //       headers: { Authorization: `Bearer ${token}` },\n  //     })\n  //     .then((response) => {\n  //       setFingerType(response.data);\n  //     })\n  //     .catch((error) => {});\n  // };\n  const TemplateType = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (response.data === true) {\n          axios\n            .get(`${baseUrl}biometrics/devices?active=true`, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              //console.log(response.data.find((x) => x.active === true));\n              setDevices(response.data.find((x) => x.active === true));\n              setbiometricDevices(response.data);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  // handle the input changes\n  const handleInputChange = (e) => {\n    setObjValues({\n      ...objValues,\n      [e.target.name]: e.target.value,\n      age: calculate_age(props.age),\n    });\n  };\n  //form validation\n  const validate = () => {\n    let temp = { ...errors };\n    temp.templateType = objValues.templateType ? \"\" : \"This field is required\";\n    //temp.device = objValues.device ? \"\" : \"This field is required\"\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x === \"\");\n  };\n  //to capture  selected index finger\n  // const captureFinger = (e) => {\n  //   e.preventDefault();\n  //   setLoading(true);\n  //   setFingerType([]);\n  //   if (validate()) {\n  //     setFingerType([]);\n  //     window.setTimeout(() => {\n  //       setLoading(false);\n  //       const removeFingers = fingerType.filter(\n  //         (x) => x.display !== objValues.templateType\n  //       );\n  //       fingerType.splice(removeFingers, 1);\n  //       setFingerType([...fingerType]);\n  //       arrCaptureObj.push(objValues.templateType);\n  //       selectedFingers.archived = arrCaptureObj.length + 1;\n  //       selectedFingers.templateType = objValues.templateType;\n  //       setCapturedFingeredObj([...capturedFingeredObj, selectedFingers]);\n  //       toast.success(objValues.templateType + \"captured successful!\");\n  //     }, 5000);\n  //   }\n  // };\n\n  const captureFinger = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      setLoading(true);\n\n      axios\n        .post(\n          `${devices.url}?reader=${\n            devices.name\n          }&isNew=${isNewStatus}&recapture=${true}`,\n          objValues,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        )\n        .then((response) => {\n          setLoading(false);\n\n          if (response.data.type === \"ERROR\") {\n            setLoading(false);\n            setTryAgain(true);\n            window.setTimeout(() => {\n              setTryAgain(false);\n            }, 5000);\n            toast.error(response.data.message.ERROR);\n            setIsNewStatus(false);\n          } else if (response.data.type === \"WARNING\") {\n            if (\n              response.data.imageQuality <= 60 &&\n              calculate_age(props.age) <= 6\n            ) {\n              toast.info(\n                \"Image quality captured is poor, Kindly give a reason for capture above.\",\n                { position: toast.POSITION.BOTTOM_CENTER, autoClose: 20000 }\n              );\n              setImageQuality(true);\n            }\n\n            const templateType = response.data.templateType;\n\n            setTryAgain(false);\n            setSuccess(true);\n\n            let biometricsEnrollments = response.data;\n            biometricsEnrollments.capturedBiometricsList = _.uniqBy(\n              biometricsEnrollments.capturedBiometricsList,\n              \"templateType\"\n            );\n\n            setCapturedFingered([...capturedFingered, biometricsEnrollments]);\n\n            _.find(fingerType, { display: templateType }).captured = true;\n\n            setFingerType([...fingerType]);\n\n            setObjValues({ ...objValues, templateType: \"\" });\n            setIsNewStatus(false);\n            toast.warning(response.data.message.WARNING);\n          } else if (response.data.type === \"SUCCESS\") {\n            if (\n              response.data.imageQuality <= 60 &&\n              calculate_age(props.age) <= 6\n            ) {\n              toast.info(\n                \"Image quality captured is poor, Kindly give a reason for capture above.\",\n                { position: toast.POSITION.BOTTOM_CENTER, autoClose: 20000 }\n              );\n              setImageQuality(true);\n            }\n            const templateType = response.data.templateType;\n            setTryAgain(false);\n            setSuccess(true);\n\n            let biometricsEnrollments = response.data;\n            biometricsEnrollments.capturedBiometricsList = _.uniqBy(\n              biometricsEnrollments.capturedBiometricsList,\n              \"templateType\"\n            );\n\n            setCapturedFingered([...capturedFingered, biometricsEnrollments]);\n\n            _.find(fingerType, { display: templateType }).captured = true;\n            setFingerType([...fingerType]);\n\n            setObjValues({ ...objValues, templateType: \"\" });\n            setIsNewStatus(false);\n          } else {\n            setLoading(false);\n            setTryAgain(true);\n            toast.error(\"Something went wrong capturing biometrics...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        })\n        .catch((error) => {\n          setLoading(false);\n        });\n    }\n  };\n\n  //Save Biometric capture\n  // const saveBiometrics = (e) => {\n  //   e.preventDefault();\n  //   setCapturedFingeredObj([]);\n  //   if (capturedFingeredObj.length >= 1) {\n  //     setSaveCapturedFingeredObj(capturedFingeredObj);\n  //   }\n  // };\n\n  const saveBiometrics = (e) => {\n    e.preventDefault();\n    if (capturedFingered.length >= 1) {\n      const capturedObj = capturedFingered[capturedFingered.length - 1];\n\n      capturedObj.capturedBiometricsList = _.uniqBy(\n        capturedObj.capturedBiometricsList,\n        \"templateType\"\n      );\n\n      //console.log(\"capturedObj\", capturedFingered);\n\n      axios\n        .post(`${baseUrl}biometrics/templates`, capturedObj, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          console.log(\"saved\", response);\n          toast.success(\"Biometric recaptured successfully\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n          setCapturedFingered([]);\n          getPersonBiometrics();\n          props.updatePatientBiometricStatus(true);\n          //console.log(\"capturedObj\", capturedFingered);\n        })\n        .catch((error) => {\n          toast.error(\"Something went wrong saving biometrics\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n          console.log(error.message);\n        });\n    } else {\n      toast.error(\"You can't save less than 2 finger\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  const deleteTempBiometrics = (x) => {\n    axios\n      .delete(\n        `${baseUrl}biometrics?personId=${x.patientId}&templateType=${x.templateType}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((resp) => {\n        console.log(resp);\n        let deletedRecord = capturedFingered.filter(\n          (data) => data.templateType !== x.templateType\n        );\n        setCapturedFingered(deletedRecord);\n        toast.info(x.templateType + \"captured removed successfully!\");\n        // toast.success(`finger deleted successfully`, {\n        //   position: toast.POSITION.BOTTOM_CENTER,\n        // });\n      })\n      .catch((error) => {\n        toast.error(\"Something went wrong\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n        console.log(error);\n      });\n    // window.setTimeout(() => {\n    //   let deletedRecord = capturedFingered.filter(\n    //     (data) => data.templateType !== x.templateType\n    //   );\n    //   setCapturedFingered(deletedRecord);\n    //   toast.info(x.templateType + \"captured removed successfully!\");\n    // }, 1000);\n  };\n\n  const getFingerprintsQuality = (imageQuality) => {\n    if (imageQuality > 60 && imageQuality <= 75) {\n      return (\n        <Badge color=\"warning\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    } else if (imageQuality > 75) {\n      return (\n        <Badge color=\"success\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    } else {\n      return (\n        <Badge color=\"error\" style={{ fontSize: \"12px\" }}>\n          {imageQuality + \"%\"}\n        </Badge>\n      );\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <div>\n        {/* temporal update */}\n        {permissions.includes(\"capture_patient_biometrics\") ||\n        permissions.includes(\"all_permission\") ? (\n          <div\n            style={{\n              flex: \"10\",\n              padding: \"5px\",\n              marginLeft: \"5px\",\n              border: \"1px solid rgba(99, 99, 99, 0.2)\",\n              boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n            }}\n          >\n            <Row>\n              <ToastContainer />\n              <Col md={3}>\n                <FormGroup>\n                  <Label\n                    for=\"device\"\n                    style={{\n                      color: \"#014d88\",\n                      fontWeight: \"bold\",\n                      fontSize: \"14px\",\n                    }}\n                  >\n                    {\" \"}\n                    Device{\" \"}\n                  </Label>\n                  <Input\n                    type=\"select\"\n                    name=\"device\"\n                    id=\"device\"\n                    //onChange={checkDevice}\n                    value={objValues.device}\n                    required\n                    disabled\n                  >\n                    {biometricDevices.map(({ id, name, active, url, type }) => (\n                      <option key={id} value={url}>\n                        {type}\n                      </option>\n                    ))}\n                  </Input>\n\n                  {errors.device !== \"\" ? (\n                    <span className={classes.error}>{errors.device}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </Col>\n\n              <Col md={3}>\n                <FormGroup>\n                  <Label\n                    for=\"device\"\n                    style={{\n                      color: \"#014d88\",\n                      fontWeight: \"bold\",\n                      fontSize: \"14px\",\n                    }}\n                  >\n                    Select Finger\n                  </Label>\n                  <Input\n                    type=\"select\"\n                    name=\"templateType\"\n                    id=\"templateType\"\n                    onChange={handleInputChange}\n                    value={objValues.templateType}\n                    required\n                  >\n                    <option value=\"\">Select Finger </option>\n\n                    {fingerType &&\n                      _.filter(fingerType, [\"captured\", false]).map((value) => (\n                        <option key={value.id} value={value.display}>\n                          {value.display}\n                        </option>\n                      ))}\n                  </Input>\n                  {errors.templateType !== \"\" ? (\n                    <span className={classes.error}>{errors.templateType}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </Col>\n\n              {!imageQuality ? (\n                \"\"\n              ) : (\n                <Col md={4}>\n                  <FormGroup>\n                    <Label\n                      for=\"device\"\n                      style={{\n                        color: \"#014d88\",\n                        fontWeight: \"bold\",\n                        fontSize: \"14px\",\n                      }}\n                    >\n                      {\" \"}\n                      Reason for capture{\" \"}\n                    </Label>\n                    <Input\n                      type=\"textarea\"\n                      name=\"reason\"\n                      id=\"reason\"\n                      onChange={handleInputChange}\n                    />\n                  </FormGroup>\n                </Col>\n              )}\n\n              <Col md={2}>\n                {!loading ? (\n                  <>\n                    <MatButton\n                      type=\"button\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={captureFinger}\n                      className={\"mt-4\"}\n                      style={{ backgroundColor: \"#992E62\" }}\n                      startIcon={<FingerprintIcon />}\n                      disabled={loading}\n                    >\n                      Capture Finger\n                    </MatButton>\n                  </>\n                ) : (\n                  <>\n                    <MatButton\n                      type=\"button\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={\"mt-4\"}\n                      style={{ backgroundColor: \"#992E62\" }}\n                      startIcon={<CircularProgress />}\n                    >\n                      Capturing...\n                    </MatButton>\n                  </>\n                )}\n              </Col>\n              <br />\n              <Col md={12}>\n                {loading ? (\n                  <>\n                    <b>Capturing finger...</b>\n                    <LinearProgress />\n                  </>\n                ) : (\n                  \"\"\n                )}\n              </Col>\n            </Row>\n          </div>\n        ) : (\n          \"\"\n        )}\n        <Row>\n          <Col>\n            <br />\n            <p>\n              {\" \"}\n              Patient Recapture Count : <b>{recapturedFingered.length}</b>\n            </p>\n            <hr />\n          </Col>\n        </Row>\n        <Row>\n          {capturedFingered.length >= 1 ? (\n            <>\n              <Col md={12} style={{ marginTop: \"10px\", paddingBottom: \"20px\" }}>\n                <List celled horizontal>\n                  {/* {console.log(capturedFingered)} */}\n                  {capturedFingered.map((x) => (\n                    <List.Item\n                      style={{\n                        width: \"200px\",\n                        height: \"200px\",\n                        border: \"1px dotted #014d88\",\n                        margin: \"5px\",\n                      }}\n                    >\n                      <List.Header\n                        style={{\n                          paddingLeft: \"0px\",\n                          height: \"0.5rem\",\n\n                          alignItems: \"right\",\n                        }}\n                      >\n                        {getFingerprintsQuality(x.imageQuality)}\n                        <span\n                          onClick={() => {\n                            deleteTempBiometrics(x);\n                          }}\n                        >\n                          <Icon\n                            name=\"cancel\"\n                            color=\"red\"\n                            style={{ float: \"right\" }}\n                          />{\" \"}\n                        </span>\n                      </List.Header>\n                      <List.Content\n                        style={{\n                          width: \"200px\",\n                          height: \"150px\",\n                          display: \"flex\",\n                          justifyContent: \"center\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        {\" \"}\n                        <FingerprintIcon\n                          style={{ color: \"#992E62\", fontSize: 150 }}\n                        />\n                        {/* <img\n                          src={`data:image/png;base64,${x.image}`}\n                          style={{ width: \"80px\", height: \"80px\" }}\n                          alt=\"\"\n                        /> */}\n                      </List.Content>\n                      <List.Content\n                        style={{\n                          width: \"200px\",\n                          height: \"30px\",\n                          display: \"flex\",\n                          justifyContent: \"center\",\n                          alignItems: \"center\",\n                          fontSize: \"16px\",\n                          color: \"#014d88\",\n                          fontWeight: \"bold\",\n                          fontFamily: '\"poppins\", sans-serif',\n                        }}\n                      >\n                        {x.templateType}\n                      </List.Content>\n                      <List.Content>\n                        <br />\n                        {x.imageQuality < 75 ? (\n                          <MatButton\n                            type=\"button\"\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={() => {\n                              deleteTempBiometrics(x);\n                            }}\n                            startIcon={<RestartAltIcon />}\n                          >\n                            Reset recapture\n                          </MatButton>\n                        ) : (\n                          \" \"\n                        )}\n                      </List.Content>\n                    </List.Item>\n                  ))}\n                </List>\n              </Col>\n              <br />\n              <br />\n              <br />\n              <br />\n              <br />\n              <br />\n              <Col md={12}>\n                <br />\n                {/* {storedBiometrics.length < 10 &&\n                storedBiometrics.length !== 0 ? (\n                  <MatButton\n                    type=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    //disabled={capturedFingered.length < 6 ? true : false}\n                    onClick={saveBiometrics}\n                    // className={classes.button}\n                    startIcon={<SaveIcon />}\n                  >\n                    Save Capture\n                  </MatButton>\n                ) : ( */}\n                <MatButton\n                  type=\"button\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={capturedFingered.length < 6 ? true : false}\n                  onClick={saveBiometrics}\n                  // className={classes.button}\n                  startIcon={<SaveIcon />}\n                >\n                  Save Capture\n                </MatButton>\n                {/* )} */}\n              </Col>\n              <br />\n            </>\n          ) : (\n            \"\"\n          )}\n        </Row>\n      </div>\n      {/* <div style={{ display: \"flex\", width: \"100%\" }}>\n        <div\n          className=\"\"\n          style={{\n            padding: \"5px\",\n            flex: \"10\",\n            boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n            minHeight: \"400px\",\n          }}\n        >\n          {saveCapturedFingered.length > 0 ? (\n            <div style={{ display: \"flex\", width: \"100%\", flexWrap: \"wrap\" }}>\n              {saveCapturedFingered.map((biometric, index) => (\n                <div\n                  key={index}\n                  style={{ minHeight: \"120px\", padding: \"5px\", width: \"20%\" }}\n                >\n                  <div className=\"card \" style={{ borderRadius: \"6px\" }}>\n                    <div\n                      className=\"card-header align-items-start\"\n                      style={{ backgroundColor: \"#fff\" }}\n                    >\n                      <div>\n                        <h6 className=\"fs-18 font-w500 mb-3 user-name\">\n                          <Link\n                            to={\"#\"}\n                            style={{\n                              color: \"#014d88\",\n                              fontSize: \"14px\",\n                              fontFamily: `\"poppins\",sans-serif`,\n                            }}\n                          >\n                            {biometric.templateType}\n                          </Link>\n                        </h6>\n                        <div\n                          className=\"fs-9 text-nowrap\"\n                          style={{\n                            fontSize: \"10px\",\n                            color: \"#992E62\",\n                            fontWeight: \"bold\",\n                            fontFamily: `\"poppins\",sans-serif`,\n                          }}\n                        >\n                          <i\n                            className=\"fa fa-calendar-o me-3\"\n                            aria-hidden=\"true\"\n                          ></i>\n                          {moment(biometric.lastModifiedDate).format(\n                            \"YYYY-MM-DD HH:mm\"\n                          )}\n                        </div>\n                      </div>\n\n                      <Dropdown className=\"dropdown ms-auto\">\n                        <Dropdown.Toggle\n                          as=\"button\"\n                          variant=\"\"\n                          drop=\"up\"\n                          className=\"btn sharp btn-primary \"\n                          id=\"tp-btn\"\n                          style={{\n                            backgroundColor: \"#014d88\",\n                            borderColor: \"#014d88\",\n                            borderRadius: \"5px\",\n                            marginRight: \"-18px\",\n                            marginTop: \"-10px\",\n                          }}\n                        >\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                            width=\"18px\"\n                            height=\"18px\"\n                            viewBox=\"0 0 24 24\"\n                            version=\"1.1\"\n                          >\n                            <g\n                              stroke=\"none\"\n                              strokeWidth=\"1\"\n                              fill=\"none\"\n                              fillRule=\"evenodd\"\n                            >\n                              <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\n                              <circle fill=\"#ffffff\" cx=\"12\" cy=\"5\" r=\"2\" />\n                              <circle fill=\"#ffffff\" cx=\"12\" cy=\"12\" r=\"2\" />\n                              <circle fill=\"#ffffff\" cx=\"12\" cy=\"19\" r=\"2\" />\n                            </g>\n                          </svg>\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu\n                          alignRight={true}\n                          className=\"dropdown-menu-right\"\n                        >\n                          <Dropdown.Item\n                            style={{ color: \"red\" }}\n                            onClick={() =>\n                              deleteBiometric(\n                                biometric.id,\n                                biometric.templateType\n                              )\n                            }\n                          >\n                            <DeleteIcon /> Delete\n                          </Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </div>\n                    <div className=\"card-body p-0 pb-2\">\n                      <ul className=\"list-group list-group-flush\">\n                        <li\n                          className=\"list-group-item\"\n                          style={{\n                            height: \"100px\",\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                          }}\n                        >\n                          <img\n                            src={fingerprintimage}\n                            alt=\"\"\n                            style={{ height: \"80px\" }}\n                          />\n                        </li>\n\n                        <li className=\"list-group-item\">\n                          <Badge\n                            variant=\"info badge-xs light\"\n                            className=\"card-link float-end\"\n                          >\n                            Version \n                          </Badge>\n                          <span className=\"mb-0 title\">\n                            Status {biometric.iso}\n                          </span>{\" \"}\n                          :\n                          <span className=\"text-black desc-text ms-2\">\n                            <Badge\n                              variant={\n                                biometric.iso === true\n                                  ? \"primary badge-xs\"\n                                  : \"danger badge-xs\"\n                              }\n                            >\n                              <i\n                                className=\"fa fa-check-square me-2 scale4\"\n                                aria-hidden=\"true\"\n                              ></i>{\" \"}\n                            </Badge>\n                          </span>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <>\n              <div className=\"flex-grow-8\">\n                <div className=\"flex-grow-8\">\n                  <Alert severity=\"info\">\n                    <AlertTitle style={{ height: \"400px\" }}>\n                      <strong>No biometrics captured</strong>\n                    </AlertTitle>\n                  </Alert>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </div> */}\n    </div>\n  );\n}\n\nexport default Biometrics;\n",{"ruleId":"778","severity":1,"message":"779","line":1,"column":17,"nodeType":"780","messageId":"781","endLine":1,"endColumn":28},{"ruleId":"778","severity":1,"message":"782","line":1,"column":30,"nodeType":"780","messageId":"781","endLine":1,"endColumn":39},{"ruleId":"778","severity":1,"message":"783","line":1,"column":41,"nodeType":"780","messageId":"781","endLine":1,"endColumn":49},{"ruleId":"778","severity":1,"message":"784","line":5,"column":8,"nodeType":"780","messageId":"781","endLine":5,"endColumn":24},{"ruleId":"778","severity":1,"message":"785","line":15,"column":8,"nodeType":"780","messageId":"781","endLine":15,"endColumn":19},{"ruleId":"778","severity":1,"message":"786","line":27,"column":8,"nodeType":"780","messageId":"781","endLine":27,"endColumn":18},{"ruleId":"778","severity":1,"message":"787","line":31,"column":19,"nodeType":"780","messageId":"781","endLine":31,"endColumn":27},{"ruleId":"778","severity":1,"message":"788","line":32,"column":10,"nodeType":"780","messageId":"781","endLine":32,"endColumn":14},{"ruleId":"778","severity":1,"message":"789","line":145,"column":10,"nodeType":"780","messageId":"781","endLine":145,"endColumn":15},{"ruleId":"778","severity":1,"message":"790","line":145,"column":17,"nodeType":"780","messageId":"781","endLine":145,"endColumn":25},{"ruleId":"778","severity":1,"message":"791","line":151,"column":32,"nodeType":"780","messageId":"781","endLine":151,"endColumn":55},{"ruleId":"778","severity":1,"message":"792","line":164,"column":10,"nodeType":"780","messageId":"781","endLine":164,"endColumn":36},{"ruleId":"778","severity":1,"message":"793","line":167,"column":22,"nodeType":"780","messageId":"781","endLine":167,"endColumn":35},{"ruleId":"778","severity":1,"message":"794","line":178,"column":10,"nodeType":"780","messageId":"781","endLine":178,"endColumn":28},{"ruleId":"795","severity":1,"message":"796","line":218,"column":27,"nodeType":"797","messageId":"798","endLine":218,"endColumn":29},{"ruleId":"795","severity":1,"message":"796","line":226,"column":60,"nodeType":"797","messageId":"798","endLine":226,"endColumn":62},{"ruleId":"795","severity":1,"message":"796","line":230,"column":27,"nodeType":"797","messageId":"798","endLine":230,"endColumn":29},{"ruleId":"795","severity":1,"message":"796","line":233,"column":60,"nodeType":"797","messageId":"798","endLine":233,"endColumn":62},{"ruleId":"795","severity":1,"message":"796","line":264,"column":53,"nodeType":"797","messageId":"798","endLine":264,"endColumn":55},{"ruleId":"799","severity":1,"message":"800","line":278,"column":6,"nodeType":"801","endLine":278,"endColumn":8,"suggestions":"802"},{"ruleId":"799","severity":1,"message":"803","line":293,"column":6,"nodeType":"801","endLine":293,"endColumn":18,"suggestions":"804"},{"ruleId":"778","severity":1,"message":"805","line":347,"column":9,"nodeType":"780","messageId":"781","endLine":347,"endColumn":40},{"ruleId":"778","severity":1,"message":"806","line":356,"column":11,"nodeType":"780","messageId":"781","endLine":356,"endColumn":20},{"ruleId":"795","severity":1,"message":"807","line":365,"column":13,"nodeType":"797","messageId":"798","endLine":365,"endColumn":15},{"ruleId":"808","severity":1,"message":"809","line":366,"column":31,"nodeType":"810","messageId":"811","endLine":366,"endColumn":35},{"ruleId":"795","severity":1,"message":"796","line":539,"column":47,"nodeType":"797","messageId":"798","endLine":539,"endColumn":49},{"ruleId":"778","severity":1,"message":"812","line":585,"column":9,"nodeType":"780","messageId":"781","endLine":585,"endColumn":27},{"ruleId":"795","severity":1,"message":"796","line":593,"column":23,"nodeType":"797","messageId":"798","endLine":593,"endColumn":25},{"ruleId":"795","severity":1,"message":"796","line":694,"column":35,"nodeType":"797","messageId":"798","endLine":694,"endColumn":37},{"ruleId":"778","severity":1,"message":"813","line":727,"column":17,"nodeType":"780","messageId":"781","endLine":727,"endColumn":25},{"ruleId":"778","severity":1,"message":"813","line":737,"column":17,"nodeType":"780","messageId":"781","endLine":737,"endColumn":25},{"ruleId":"778","severity":1,"message":"814","line":795,"column":11,"nodeType":"780","messageId":"781","endLine":795,"endColumn":16},{"ruleId":"778","severity":1,"message":"815","line":1,"column":38,"nodeType":"780","messageId":"781","endLine":1,"endColumn":44},{"ruleId":"778","severity":1,"message":"816","line":3,"column":3,"nodeType":"780","messageId":"781","endLine":3,"endColumn":9},{"ruleId":"778","severity":1,"message":"817","line":4,"column":3,"nodeType":"780","messageId":"781","endLine":4,"endColumn":8},{"ruleId":"778","severity":1,"message":"818","line":5,"column":3,"nodeType":"780","messageId":"781","endLine":5,"endColumn":14},{"ruleId":"778","severity":1,"message":"819","line":6,"column":3,"nodeType":"780","messageId":"781","endLine":6,"endColumn":12},{"ruleId":"778","severity":1,"message":"820","line":7,"column":3,"nodeType":"780","messageId":"781","endLine":7,"endColumn":14},{"ruleId":"778","severity":1,"message":"821","line":22,"column":10,"nodeType":"780","messageId":"781","endLine":22,"endColumn":17},{"ruleId":"778","severity":1,"message":"822","line":32,"column":8,"nodeType":"780","messageId":"781","endLine":32,"endColumn":14},{"ruleId":"778","severity":1,"message":"823","line":33,"column":10,"nodeType":"780","messageId":"781","endLine":33,"endColumn":18},{"ruleId":"778","severity":1,"message":"824","line":34,"column":10,"nodeType":"780","messageId":"781","endLine":34,"endColumn":15},{"ruleId":"778","severity":1,"message":"825","line":34,"column":17,"nodeType":"780","messageId":"781","endLine":34,"endColumn":27},{"ruleId":"778","severity":1,"message":"826","line":35,"column":8,"nodeType":"780","messageId":"781","endLine":35,"endColumn":24},{"ruleId":"778","severity":1,"message":"827","line":36,"column":8,"nodeType":"780","messageId":"781","endLine":36,"endColumn":18},{"ruleId":"778","severity":1,"message":"828","line":117,"column":10,"nodeType":"780","messageId":"781","endLine":117,"endColumn":21},{"ruleId":"778","severity":1,"message":"829","line":118,"column":10,"nodeType":"780","messageId":"781","endLine":118,"endColumn":21},{"ruleId":"778","severity":1,"message":"830","line":118,"column":23,"nodeType":"780","messageId":"781","endLine":118,"endColumn":37},{"ruleId":"778","severity":1,"message":"831","line":119,"column":10,"nodeType":"780","messageId":"781","endLine":119,"endColumn":18},{"ruleId":"778","severity":1,"message":"832","line":120,"column":10,"nodeType":"780","messageId":"781","endLine":120,"endColumn":17},{"ruleId":"778","severity":1,"message":"833","line":122,"column":10,"nodeType":"780","messageId":"781","endLine":122,"endColumn":26},{"ruleId":"778","severity":1,"message":"834","line":123,"column":10,"nodeType":"780","messageId":"781","endLine":123,"endColumn":23},{"ruleId":"778","severity":1,"message":"835","line":123,"column":25,"nodeType":"780","messageId":"781","endLine":123,"endColumn":41},{"ruleId":"778","severity":1,"message":"836","line":125,"column":10,"nodeType":"780","messageId":"781","endLine":125,"endColumn":29},{"ruleId":"778","severity":1,"message":"837","line":125,"column":31,"nodeType":"780","messageId":"781","endLine":125,"endColumn":53},{"ruleId":"778","severity":1,"message":"838","line":128,"column":10,"nodeType":"780","messageId":"781","endLine":128,"endColumn":22},{"ruleId":"778","severity":1,"message":"806","line":134,"column":11,"nodeType":"780","messageId":"781","endLine":134,"endColumn":20},{"ruleId":"778","severity":1,"message":"839","line":157,"column":15,"nodeType":"780","messageId":"781","endLine":157,"endColumn":36},{"ruleId":"799","severity":1,"message":"840","line":223,"column":6,"nodeType":"801","endLine":223,"endColumn":8,"suggestions":"841"},{"ruleId":"778","severity":1,"message":"842","line":4,"column":8,"nodeType":"780","messageId":"781","endLine":4,"endColumn":17},{"ruleId":"778","severity":1,"message":"843","line":8,"column":10,"nodeType":"780","messageId":"781","endLine":8,"endColumn":25},{"ruleId":"778","severity":1,"message":"844","line":21,"column":8,"nodeType":"780","messageId":"781","endLine":21,"endColumn":16},{"ruleId":"778","severity":1,"message":"845","line":22,"column":8,"nodeType":"780","messageId":"781","endLine":22,"endColumn":15},{"ruleId":"778","severity":1,"message":"846","line":23,"column":8,"nodeType":"780","messageId":"781","endLine":23,"endColumn":18},{"ruleId":"778","severity":1,"message":"847","line":36,"column":10,"nodeType":"780","messageId":"781","endLine":36,"endColumn":20},{"ruleId":"778","severity":1,"message":"848","line":142,"column":10,"nodeType":"780","messageId":"781","endLine":142,"endColumn":18},{"ruleId":"778","severity":1,"message":"849","line":143,"column":19,"nodeType":"780","messageId":"781","endLine":143,"endColumn":31},{"ruleId":"778","severity":1,"message":"850","line":144,"column":9,"nodeType":"780","messageId":"781","endLine":144,"endColumn":21},{"ruleId":"778","severity":1,"message":"851","line":145,"column":9,"nodeType":"780","messageId":"781","endLine":145,"endColumn":28},{"ruleId":"778","severity":1,"message":"852","line":146,"column":9,"nodeType":"780","messageId":"781","endLine":146,"endColumn":32},{"ruleId":"778","severity":1,"message":"853","line":147,"column":9,"nodeType":"780","messageId":"781","endLine":147,"endColumn":21},{"ruleId":"778","severity":1,"message":"790","line":148,"column":17,"nodeType":"780","messageId":"781","endLine":148,"endColumn":25},{"ruleId":"778","severity":1,"message":"854","line":151,"column":18,"nodeType":"780","messageId":"781","endLine":151,"endColumn":27},{"ruleId":"778","severity":1,"message":"855","line":158,"column":18,"nodeType":"780","messageId":"781","endLine":158,"endColumn":27},{"ruleId":"778","severity":1,"message":"856","line":162,"column":10,"nodeType":"780","messageId":"781","endLine":162,"endColumn":17},{"ruleId":"778","severity":1,"message":"857","line":162,"column":19,"nodeType":"780","messageId":"781","endLine":162,"endColumn":29},{"ruleId":"795","severity":1,"message":"796","line":197,"column":23,"nodeType":"797","messageId":"798","endLine":197,"endColumn":25},{"ruleId":"795","severity":1,"message":"807","line":215,"column":13,"nodeType":"797","messageId":"798","endLine":215,"endColumn":15},{"ruleId":"808","severity":1,"message":"809","line":216,"column":31,"nodeType":"810","messageId":"811","endLine":216,"endColumn":35},{"ruleId":"778","severity":1,"message":"806","line":226,"column":11,"nodeType":"780","messageId":"781","endLine":226,"endColumn":20},{"ruleId":"795","severity":1,"message":"796","line":259,"column":27,"nodeType":"797","messageId":"798","endLine":259,"endColumn":29},{"ruleId":"795","severity":1,"message":"796","line":262,"column":60,"nodeType":"797","messageId":"798","endLine":262,"endColumn":62},{"ruleId":"795","severity":1,"message":"796","line":265,"column":27,"nodeType":"797","messageId":"798","endLine":265,"endColumn":29},{"ruleId":"795","severity":1,"message":"796","line":268,"column":60,"nodeType":"797","messageId":"798","endLine":268,"endColumn":62},{"ruleId":"778","severity":1,"message":"858","line":274,"column":13,"nodeType":"780","messageId":"781","endLine":274,"endColumn":19},{"ruleId":"799","severity":1,"message":"859","line":318,"column":6,"nodeType":"801","endLine":318,"endColumn":8,"suggestions":"860"},{"ruleId":"778","severity":1,"message":"861","line":319,"column":9,"nodeType":"780","messageId":"781","endLine":319,"endColumn":26},{"ruleId":"778","severity":1,"message":"862","line":370,"column":9,"nodeType":"780","messageId":"781","endLine":370,"endColumn":31},{"ruleId":"778","severity":1,"message":"863","line":376,"column":11,"nodeType":"780","messageId":"781","endLine":376,"endColumn":23},{"ruleId":"778","severity":1,"message":"864","line":430,"column":9,"nodeType":"780","messageId":"781","endLine":430,"endColumn":37},{"ruleId":"795","severity":1,"message":"796","line":496,"column":52,"nodeType":"797","messageId":"798","endLine":496,"endColumn":54},{"ruleId":"778","severity":1,"message":"813","line":520,"column":17,"nodeType":"780","messageId":"781","endLine":520,"endColumn":25},{"ruleId":"778","severity":1,"message":"813","line":526,"column":17,"nodeType":"780","messageId":"781","endLine":526,"endColumn":25},{"ruleId":"778","severity":1,"message":"812","line":543,"column":9,"nodeType":"780","messageId":"781","endLine":543,"endColumn":27},{"ruleId":"778","severity":1,"message":"865","line":565,"column":9,"nodeType":"780","messageId":"781","endLine":565,"endColumn":29},{"ruleId":"795","severity":1,"message":"796","line":690,"column":24,"nodeType":"797","messageId":"798","endLine":690,"endColumn":26},{"ruleId":"795","severity":1,"message":"796","line":692,"column":31,"nodeType":"797","messageId":"798","endLine":692,"endColumn":33},{"ruleId":"799","severity":1,"message":"866","line":721,"column":6,"nodeType":"801","endLine":729,"endColumn":4,"suggestions":"867"},{"ruleId":"778","severity":1,"message":"868","line":731,"column":7,"nodeType":"780","messageId":"781","endLine":731,"endColumn":17},{"ruleId":"778","severity":1,"message":"869","line":741,"column":5,"nodeType":"780","messageId":"781","endLine":741,"endColumn":12},{"ruleId":"778","severity":1,"message":"870","line":748,"column":5,"nodeType":"780","messageId":"781","endLine":748,"endColumn":22},{"ruleId":"778","severity":1,"message":"871","line":761,"column":5,"nodeType":"780","messageId":"781","endLine":761,"endColumn":18},{"ruleId":"778","severity":1,"message":"872","line":768,"column":5,"nodeType":"780","messageId":"781","endLine":768,"endColumn":19},{"ruleId":"873","severity":1,"message":"874","line":814,"column":59,"nodeType":"875","messageId":"876","endLine":814,"endColumn":61},{"ruleId":"778","severity":1,"message":"877","line":824,"column":9,"nodeType":"780","messageId":"781","endLine":824,"endColumn":21},{"ruleId":"795","severity":1,"message":"807","line":909,"column":48,"nodeType":"797","messageId":"798","endLine":909,"endColumn":50},{"ruleId":"795","severity":1,"message":"796","line":1005,"column":55,"nodeType":"797","messageId":"798","endLine":1005,"endColumn":57},{"ruleId":"878","severity":1,"message":"879","line":1728,"column":78,"nodeType":"810","messageId":"880","endLine":1730,"endColumn":35},{"ruleId":"778","severity":1,"message":"881","line":2,"column":8,"nodeType":"780","messageId":"781","endLine":2,"endColumn":17},{"ruleId":"778","severity":1,"message":"882","line":3,"column":21,"nodeType":"780","messageId":"781","endLine":3,"endColumn":31},{"ruleId":"778","severity":1,"message":"883","line":5,"column":8,"nodeType":"780","messageId":"781","endLine":5,"endColumn":17},{"ruleId":"778","severity":1,"message":"884","line":7,"column":10,"nodeType":"780","messageId":"781","endLine":7,"endColumn":13},{"ruleId":"778","severity":1,"message":"885","line":8,"column":10,"nodeType":"780","messageId":"781","endLine":8,"endColumn":14},{"ruleId":"778","severity":1,"message":"886","line":8,"column":23,"nodeType":"780","messageId":"781","endLine":8,"endColumn":30},{"ruleId":"778","severity":1,"message":"788","line":8,"column":32,"nodeType":"780","messageId":"781","endLine":8,"endColumn":36},{"ruleId":"778","severity":1,"message":"887","line":12,"column":10,"nodeType":"780","messageId":"781","endLine":12,"endColumn":18},{"ruleId":"778","severity":1,"message":"888","line":13,"column":8,"nodeType":"780","messageId":"781","endLine":13,"endColumn":11},{"ruleId":"778","severity":1,"message":"820","line":14,"column":41,"nodeType":"780","messageId":"781","endLine":14,"endColumn":52},{"ruleId":"778","severity":1,"message":"889","line":16,"column":8,"nodeType":"780","messageId":"781","endLine":16,"endColumn":24},{"ruleId":"778","severity":1,"message":"890","line":17,"column":8,"nodeType":"780","messageId":"781","endLine":17,"endColumn":16},{"ruleId":"778","severity":1,"message":"891","line":21,"column":9,"nodeType":"780","messageId":"781","endLine":21,"endColumn":19},{"ruleId":"778","severity":1,"message":"892","line":22,"column":36,"nodeType":"780","messageId":"781","endLine":22,"endColumn":47},{"ruleId":"778","severity":1,"message":"893","line":22,"column":83,"nodeType":"780","messageId":"781","endLine":22,"endColumn":93},{"ruleId":"778","severity":1,"message":"894","line":26,"column":8,"nodeType":"780","messageId":"781","endLine":26,"endColumn":20},{"ruleId":"778","severity":1,"message":"895","line":40,"column":10,"nodeType":"780","messageId":"781","endLine":40,"endColumn":24},{"ruleId":"778","severity":1,"message":"896","line":41,"column":8,"nodeType":"780","messageId":"781","endLine":41,"endColumn":13},{"ruleId":"778","severity":1,"message":"897","line":43,"column":7,"nodeType":"780","messageId":"781","endLine":43,"endColumn":11},{"ruleId":"778","severity":1,"message":"898","line":44,"column":7,"nodeType":"780","messageId":"781","endLine":44,"endColumn":18},{"ruleId":"778","severity":1,"message":"899","line":124,"column":7,"nodeType":"780","messageId":"781","endLine":124,"endColumn":25},{"ruleId":"778","severity":1,"message":"900","line":148,"column":7,"nodeType":"780","messageId":"781","endLine":148,"endColumn":19},{"ruleId":"778","severity":1,"message":"901","line":156,"column":11,"nodeType":"780","messageId":"781","endLine":156,"endColumn":21},{"ruleId":"778","severity":1,"message":"902","line":157,"column":21,"nodeType":"780","messageId":"781","endLine":157,"endColumn":31},{"ruleId":"778","severity":1,"message":"789","line":162,"column":12,"nodeType":"780","messageId":"781","endLine":162,"endColumn":17},{"ruleId":"778","severity":1,"message":"790","line":162,"column":19,"nodeType":"780","messageId":"781","endLine":162,"endColumn":27},{"ruleId":"778","severity":1,"message":"903","line":165,"column":13,"nodeType":"780","messageId":"781","endLine":165,"endColumn":25},{"ruleId":"778","severity":1,"message":"904","line":165,"column":27,"nodeType":"780","messageId":"781","endLine":165,"endColumn":34},{"ruleId":"778","severity":1,"message":"905","line":176,"column":12,"nodeType":"780","messageId":"781","endLine":176,"endColumn":23},{"ruleId":"778","severity":1,"message":"906","line":176,"column":25,"nodeType":"780","messageId":"781","endLine":176,"endColumn":39},{"ruleId":"778","severity":1,"message":"907","line":180,"column":24,"nodeType":"780","messageId":"781","endLine":180,"endColumn":37},{"ruleId":"873","severity":1,"message":"874","line":217,"column":39,"nodeType":"875","messageId":"876","endLine":217,"endColumn":41},{"ruleId":"799","severity":1,"message":"908","line":231,"column":8,"nodeType":"801","endLine":231,"endColumn":10,"suggestions":"909"},{"ruleId":"778","severity":1,"message":"910","line":265,"column":9,"nodeType":"780","messageId":"781","endLine":265,"endColumn":23},{"ruleId":"778","severity":1,"message":"911","line":270,"column":11,"nodeType":"780","messageId":"781","endLine":270,"endColumn":23},{"ruleId":"778","severity":1,"message":"912","line":278,"column":11,"nodeType":"780","messageId":"781","endLine":278,"endColumn":18},{"ruleId":"913","severity":1,"message":"914","line":378,"column":78,"nodeType":"915","messageId":"916","endLine":378,"endColumn":80},{"ruleId":"913","severity":1,"message":"914","line":378,"column":107,"nodeType":"915","messageId":"916","endLine":378,"endColumn":109},{"ruleId":"913","severity":1,"message":"917","line":378,"column":107,"nodeType":"915","messageId":"916","endLine":378,"endColumn":109},{"ruleId":"913","severity":1,"message":"917","line":378,"column":150,"nodeType":"915","messageId":"916","endLine":378,"endColumn":152},{"ruleId":"778","severity":1,"message":"918","line":405,"column":11,"nodeType":"780","messageId":"781","endLine":405,"endColumn":19},{"ruleId":"778","severity":1,"message":"919","line":413,"column":11,"nodeType":"780","messageId":"781","endLine":413,"endColumn":19},{"ruleId":"795","severity":1,"message":"796","line":418,"column":69,"nodeType":"797","messageId":"798","endLine":418,"endColumn":71},{"ruleId":"778","severity":1,"message":"920","line":450,"column":11,"nodeType":"780","messageId":"781","endLine":450,"endColumn":18},{"ruleId":"873","severity":1,"message":"874","line":465,"column":92,"nodeType":"875","messageId":"876","endLine":465,"endColumn":94},{"ruleId":"778","severity":1,"message":"779","line":1,"column":17,"nodeType":"780","messageId":"781","endLine":1,"endColumn":28},{"ruleId":"778","severity":1,"message":"921","line":5,"column":10,"nodeType":"780","messageId":"781","endLine":5,"endColumn":17},{"ruleId":"778","severity":1,"message":"816","line":7,"column":3,"nodeType":"780","messageId":"781","endLine":7,"endColumn":9},{"ruleId":"778","severity":1,"message":"892","line":10,"column":3,"nodeType":"780","messageId":"781","endLine":10,"endColumn":14},{"ruleId":"778","severity":1,"message":"922","line":11,"column":3,"nodeType":"780","messageId":"781","endLine":11,"endColumn":7},{"ruleId":"778","severity":1,"message":"923","line":12,"column":3,"nodeType":"780","messageId":"781","endLine":12,"endColumn":11},{"ruleId":"778","severity":1,"message":"924","line":13,"column":3,"nodeType":"780","messageId":"781","endLine":13,"endColumn":8},{"ruleId":"778","severity":1,"message":"925","line":14,"column":3,"nodeType":"780","messageId":"781","endLine":14,"endColumn":12},{"ruleId":"778","severity":1,"message":"926","line":21,"column":8,"nodeType":"780","messageId":"781","endLine":21,"endColumn":23},{"ruleId":"778","severity":1,"message":"927","line":22,"column":8,"nodeType":"780","messageId":"781","endLine":22,"endColumn":26},{"ruleId":"778","severity":1,"message":"928","line":25,"column":8,"nodeType":"780","messageId":"781","endLine":25,"endColumn":21},{"ruleId":"778","severity":1,"message":"929","line":26,"column":8,"nodeType":"780","messageId":"781","endLine":26,"endColumn":18},{"ruleId":"778","severity":1,"message":"930","line":27,"column":8,"nodeType":"780","messageId":"781","endLine":27,"endColumn":26},{"ruleId":"778","severity":1,"message":"822","line":29,"column":8,"nodeType":"780","messageId":"781","endLine":29,"endColumn":14},{"ruleId":"778","severity":1,"message":"931","line":30,"column":8,"nodeType":"780","messageId":"781","endLine":30,"endColumn":12},{"ruleId":"778","severity":1,"message":"901","line":112,"column":9,"nodeType":"780","messageId":"781","endLine":112,"endColumn":19},{"ruleId":"778","severity":1,"message":"932","line":114,"column":10,"nodeType":"780","messageId":"781","endLine":114,"endColumn":17},{"ruleId":"778","severity":1,"message":"902","line":114,"column":19,"nodeType":"780","messageId":"781","endLine":114,"endColumn":29},{"ruleId":"778","severity":1,"message":"933","line":125,"column":10,"nodeType":"780","messageId":"781","endLine":125,"endColumn":32},{"ruleId":"778","severity":1,"message":"934","line":128,"column":10,"nodeType":"780","messageId":"781","endLine":128,"endColumn":35},{"ruleId":"778","severity":1,"message":"935","line":130,"column":10,"nodeType":"780","messageId":"781","endLine":130,"endColumn":23},{"ruleId":"778","severity":1,"message":"936","line":130,"column":25,"nodeType":"780","messageId":"781","endLine":130,"endColumn":41},{"ruleId":"778","severity":1,"message":"937","line":131,"column":10,"nodeType":"780","messageId":"781","endLine":131,"endColumn":23},{"ruleId":"778","severity":1,"message":"938","line":131,"column":25,"nodeType":"780","messageId":"781","endLine":131,"endColumn":41},{"ruleId":"778","severity":1,"message":"939","line":12,"column":8,"nodeType":"780","messageId":"781","endLine":12,"endColumn":25},{"ruleId":"778","severity":1,"message":"940","line":13,"column":8,"nodeType":"780","messageId":"781","endLine":13,"endColumn":12},{"ruleId":"778","severity":1,"message":"941","line":68,"column":20,"nodeType":"780","messageId":"781","endLine":68,"endColumn":31},{"ruleId":"778","severity":1,"message":"932","line":70,"column":10,"nodeType":"780","messageId":"781","endLine":70,"endColumn":17},{"ruleId":"778","severity":1,"message":"902","line":70,"column":19,"nodeType":"780","messageId":"781","endLine":70,"endColumn":29},{"ruleId":"778","severity":1,"message":"942","line":72,"column":10,"nodeType":"780","messageId":"781","endLine":72,"endColumn":17},{"ruleId":"778","severity":1,"message":"943","line":83,"column":9,"nodeType":"780","messageId":"781","endLine":83,"endColumn":15},{"ruleId":"795","severity":1,"message":"796","line":84,"column":51,"nodeType":"797","messageId":"798","endLine":84,"endColumn":53},{"ruleId":"778","severity":1,"message":"944","line":102,"column":9,"nodeType":"780","messageId":"781","endLine":102,"endColumn":25},{"ruleId":"778","severity":1,"message":"921","line":3,"column":10,"nodeType":"780","messageId":"781","endLine":3,"endColumn":17},{"ruleId":"778","severity":1,"message":"816","line":5,"column":3,"nodeType":"780","messageId":"781","endLine":5,"endColumn":9},{"ruleId":"778","severity":1,"message":"892","line":8,"column":3,"nodeType":"780","messageId":"781","endLine":8,"endColumn":14},{"ruleId":"778","severity":1,"message":"922","line":9,"column":3,"nodeType":"780","messageId":"781","endLine":9,"endColumn":7},{"ruleId":"778","severity":1,"message":"923","line":10,"column":3,"nodeType":"780","messageId":"781","endLine":10,"endColumn":11},{"ruleId":"778","severity":1,"message":"924","line":11,"column":3,"nodeType":"780","messageId":"781","endLine":11,"endColumn":8},{"ruleId":"778","severity":1,"message":"925","line":12,"column":3,"nodeType":"780","messageId":"781","endLine":12,"endColumn":12},{"ruleId":"778","severity":1,"message":"945","line":18,"column":8,"nodeType":"780","messageId":"781","endLine":18,"endColumn":19},{"ruleId":"778","severity":1,"message":"926","line":19,"column":8,"nodeType":"780","messageId":"781","endLine":19,"endColumn":23},{"ruleId":"778","severity":1,"message":"901","line":108,"column":9,"nodeType":"780","messageId":"781","endLine":108,"endColumn":19},{"ruleId":"778","severity":1,"message":"902","line":110,"column":19,"nodeType":"780","messageId":"781","endLine":110,"endColumn":29},{"ruleId":"778","severity":1,"message":"937","line":142,"column":10,"nodeType":"780","messageId":"781","endLine":142,"endColumn":23},{"ruleId":"873","severity":1,"message":"874","line":263,"column":34,"nodeType":"875","messageId":"876","endLine":263,"endColumn":36},{"ruleId":"799","severity":1,"message":"908","line":275,"column":6,"nodeType":"801","endLine":275,"endColumn":8,"suggestions":"946"},{"ruleId":"799","severity":1,"message":"947","line":281,"column":6,"nodeType":"801","endLine":281,"endColumn":8,"suggestions":"948"},{"ruleId":"778","severity":1,"message":"815","line":1,"column":38,"nodeType":"780","messageId":"781","endLine":1,"endColumn":44},{"ruleId":"778","severity":1,"message":"817","line":3,"column":3,"nodeType":"780","messageId":"781","endLine":3,"endColumn":8},{"ruleId":"778","severity":1,"message":"818","line":4,"column":3,"nodeType":"780","messageId":"781","endLine":4,"endColumn":14},{"ruleId":"778","severity":1,"message":"819","line":5,"column":3,"nodeType":"780","messageId":"781","endLine":5,"endColumn":12},{"ruleId":"778","severity":1,"message":"949","line":6,"column":3,"nodeType":"780","messageId":"781","endLine":6,"endColumn":7},{"ruleId":"778","severity":1,"message":"950","line":9,"column":3,"nodeType":"780","messageId":"781","endLine":9,"endColumn":7},{"ruleId":"778","severity":1,"message":"951","line":10,"column":3,"nodeType":"780","messageId":"781","endLine":10,"endColumn":11},{"ruleId":"778","severity":1,"message":"952","line":13,"column":3,"nodeType":"780","messageId":"781","endLine":13,"endColumn":13},{"ruleId":"778","severity":1,"message":"953","line":19,"column":8,"nodeType":"780","messageId":"781","endLine":19,"endColumn":14},{"ruleId":"778","severity":1,"message":"821","line":25,"column":10,"nodeType":"780","messageId":"781","endLine":25,"endColumn":17},{"ruleId":"778","severity":1,"message":"954","line":27,"column":8,"nodeType":"780","messageId":"781","endLine":27,"endColumn":19},{"ruleId":"778","severity":1,"message":"955","line":32,"column":17,"nodeType":"780","messageId":"781","endLine":32,"endColumn":20},{"ruleId":"778","severity":1,"message":"956","line":33,"column":10,"nodeType":"780","messageId":"781","endLine":33,"endColumn":16},{"ruleId":"778","severity":1,"message":"957","line":33,"column":18,"nodeType":"780","messageId":"781","endLine":33,"endColumn":24},{"ruleId":"778","severity":1,"message":"958","line":33,"column":26,"nodeType":"780","messageId":"781","endLine":33,"endColumn":31},{"ruleId":"778","severity":1,"message":"886","line":33,"column":33,"nodeType":"780","messageId":"781","endLine":33,"endColumn":40},{"ruleId":"778","severity":1,"message":"888","line":35,"column":8,"nodeType":"780","messageId":"781","endLine":35,"endColumn":11},{"ruleId":"778","severity":1,"message":"959","line":36,"column":8,"nodeType":"780","messageId":"781","endLine":36,"endColumn":24},{"ruleId":"778","severity":1,"message":"816","line":37,"column":8,"nodeType":"780","messageId":"781","endLine":37,"endColumn":14},{"ruleId":"778","severity":1,"message":"960","line":38,"column":8,"nodeType":"780","messageId":"781","endLine":38,"endColumn":11},{"ruleId":"778","severity":1,"message":"961","line":39,"column":8,"nodeType":"780","messageId":"781","endLine":39,"endColumn":17},{"ruleId":"778","severity":1,"message":"893","line":42,"column":8,"nodeType":"780","messageId":"781","endLine":42,"endColumn":18},{"ruleId":"778","severity":1,"message":"962","line":51,"column":8,"nodeType":"780","messageId":"781","endLine":51,"endColumn":19},{"ruleId":"778","severity":1,"message":"963","line":136,"column":10,"nodeType":"780","messageId":"781","endLine":136,"endColumn":30},{"ruleId":"778","severity":1,"message":"829","line":150,"column":10,"nodeType":"780","messageId":"781","endLine":150,"endColumn":21},{"ruleId":"778","severity":1,"message":"831","line":151,"column":10,"nodeType":"780","messageId":"781","endLine":151,"endColumn":18},{"ruleId":"778","severity":1,"message":"964","line":157,"column":10,"nodeType":"780","messageId":"781","endLine":157,"endColumn":25},{"ruleId":"778","severity":1,"message":"806","line":163,"column":11,"nodeType":"780","messageId":"781","endLine":163,"endColumn":20},{"ruleId":"778","severity":1,"message":"965","line":176,"column":9,"nodeType":"780","messageId":"781","endLine":176,"endColumn":17},{"ruleId":"799","severity":1,"message":"966","line":251,"column":6,"nodeType":"801","endLine":251,"endColumn":8,"suggestions":"967"},{"ruleId":"778","severity":1,"message":"968","line":280,"column":9,"nodeType":"780","messageId":"781","endLine":280,"endColumn":25},{"ruleId":"778","severity":1,"message":"969","line":292,"column":9,"nodeType":"780","messageId":"781","endLine":292,"endColumn":20},{"ruleId":"778","severity":1,"message":"970","line":2,"column":10,"nodeType":"780","messageId":"781","endLine":2,"endColumn":14},{"ruleId":"778","severity":1,"message":"971","line":2,"column":16,"nodeType":"780","messageId":"781","endLine":2,"endColumn":26},{"ruleId":"778","severity":1,"message":"972","line":8,"column":8,"nodeType":"780","messageId":"781","endLine":8,"endColumn":12},{"ruleId":"778","severity":1,"message":"973","line":61,"column":7,"nodeType":"780","messageId":"781","endLine":61,"endColumn":18},{"ruleId":"778","severity":1,"message":"974","line":62,"column":7,"nodeType":"780","messageId":"781","endLine":62,"endColumn":18},{"ruleId":"778","severity":1,"message":"975","line":64,"column":10,"nodeType":"780","messageId":"781","endLine":64,"endColumn":21},{"ruleId":"778","severity":1,"message":"976","line":66,"column":10,"nodeType":"780","messageId":"781","endLine":66,"endColumn":20},{"ruleId":"778","severity":1,"message":"977","line":66,"column":22,"nodeType":"780","messageId":"781","endLine":66,"endColumn":35},{"ruleId":"778","severity":1,"message":"978","line":71,"column":10,"nodeType":"780","messageId":"781","endLine":71,"endColumn":22},{"ruleId":"778","severity":1,"message":"979","line":71,"column":24,"nodeType":"780","messageId":"781","endLine":71,"endColumn":39},{"ruleId":"778","severity":1,"message":"902","line":87,"column":19,"nodeType":"780","messageId":"781","endLine":87,"endColumn":29},{"ruleId":"778","severity":1,"message":"980","line":90,"column":10,"nodeType":"780","messageId":"781","endLine":90,"endColumn":21},{"ruleId":"799","severity":1,"message":"981","line":131,"column":6,"nodeType":"801","endLine":131,"endColumn":8,"suggestions":"982"},{"ruleId":"778","severity":1,"message":"815","line":1,"column":38,"nodeType":"780","messageId":"781","endLine":1,"endColumn":44},{"ruleId":"778","severity":1,"message":"816","line":3,"column":3,"nodeType":"780","messageId":"781","endLine":3,"endColumn":9},{"ruleId":"778","severity":1,"message":"817","line":4,"column":3,"nodeType":"780","messageId":"781","endLine":4,"endColumn":8},{"ruleId":"778","severity":1,"message":"818","line":5,"column":3,"nodeType":"780","messageId":"781","endLine":5,"endColumn":14},{"ruleId":"778","severity":1,"message":"819","line":6,"column":3,"nodeType":"780","messageId":"781","endLine":6,"endColumn":12},{"ruleId":"778","severity":1,"message":"820","line":7,"column":3,"nodeType":"780","messageId":"781","endLine":7,"endColumn":14},{"ruleId":"778","severity":1,"message":"844","line":19,"column":8,"nodeType":"780","messageId":"781","endLine":19,"endColumn":16},{"ruleId":"778","severity":1,"message":"821","line":22,"column":10,"nodeType":"780","messageId":"781","endLine":22,"endColumn":17},{"ruleId":"778","severity":1,"message":"788","line":22,"column":19,"nodeType":"780","messageId":"781","endLine":22,"endColumn":23},{"ruleId":"778","severity":1,"message":"983","line":22,"column":25,"nodeType":"780","messageId":"781","endLine":22,"endColumn":29},{"ruleId":"778","severity":1,"message":"984","line":24,"column":8,"nodeType":"780","messageId":"781","endLine":24,"endColumn":22},{"ruleId":"778","severity":1,"message":"970","line":31,"column":10,"nodeType":"780","messageId":"781","endLine":31,"endColumn":14},{"ruleId":"778","severity":1,"message":"822","line":32,"column":8,"nodeType":"780","messageId":"781","endLine":32,"endColumn":14},{"ruleId":"778","severity":1,"message":"823","line":33,"column":10,"nodeType":"780","messageId":"781","endLine":33,"endColumn":18},{"ruleId":"778","severity":1,"message":"824","line":34,"column":10,"nodeType":"780","messageId":"781","endLine":34,"endColumn":15},{"ruleId":"778","severity":1,"message":"825","line":34,"column":17,"nodeType":"780","messageId":"781","endLine":34,"endColumn":27},{"ruleId":"778","severity":1,"message":"826","line":35,"column":8,"nodeType":"780","messageId":"781","endLine":35,"endColumn":24},{"ruleId":"778","severity":1,"message":"827","line":36,"column":8,"nodeType":"780","messageId":"781","endLine":36,"endColumn":18},{"ruleId":"778","severity":1,"message":"985","line":85,"column":7,"nodeType":"780","messageId":"781","endLine":85,"endColumn":14},{"ruleId":"778","severity":1,"message":"828","line":99,"column":10,"nodeType":"780","messageId":"781","endLine":99,"endColumn":21},{"ruleId":"778","severity":1,"message":"986","line":99,"column":23,"nodeType":"780","messageId":"781","endLine":99,"endColumn":37},{"ruleId":"778","severity":1,"message":"829","line":100,"column":10,"nodeType":"780","messageId":"781","endLine":100,"endColumn":21},{"ruleId":"778","severity":1,"message":"830","line":100,"column":23,"nodeType":"780","messageId":"781","endLine":100,"endColumn":37},{"ruleId":"778","severity":1,"message":"831","line":101,"column":10,"nodeType":"780","messageId":"781","endLine":101,"endColumn":18},{"ruleId":"778","severity":1,"message":"832","line":102,"column":10,"nodeType":"780","messageId":"781","endLine":102,"endColumn":17},{"ruleId":"778","severity":1,"message":"833","line":104,"column":10,"nodeType":"780","messageId":"781","endLine":104,"endColumn":26},{"ruleId":"778","severity":1,"message":"987","line":104,"column":28,"nodeType":"780","messageId":"781","endLine":104,"endColumn":47},{"ruleId":"778","severity":1,"message":"838","line":108,"column":10,"nodeType":"780","messageId":"781","endLine":108,"endColumn":22},{"ruleId":"778","severity":1,"message":"988","line":108,"column":24,"nodeType":"780","messageId":"781","endLine":108,"endColumn":39},{"ruleId":"778","severity":1,"message":"989","line":126,"column":9,"nodeType":"780","messageId":"781","endLine":126,"endColumn":24},{"ruleId":"778","severity":1,"message":"990","line":269,"column":9,"nodeType":"780","messageId":"781","endLine":269,"endColumn":23},{"ruleId":"778","severity":1,"message":"991","line":307,"column":9,"nodeType":"780","messageId":"781","endLine":307,"endColumn":29},{"ruleId":"778","severity":1,"message":"992","line":333,"column":9,"nodeType":"780","messageId":"781","endLine":333,"endColumn":31},{"ruleId":"778","severity":1,"message":"983","line":5,"column":16,"nodeType":"780","messageId":"781","endLine":5,"endColumn":20},{"ruleId":"778","severity":1,"message":"993","line":13,"column":8,"nodeType":"780","messageId":"781","endLine":13,"endColumn":20},{"ruleId":"778","severity":1,"message":"994","line":14,"column":8,"nodeType":"780","messageId":"781","endLine":14,"endColumn":20},{"ruleId":"778","severity":1,"message":"995","line":15,"column":8,"nodeType":"780","messageId":"781","endLine":15,"endColumn":20},{"ruleId":"778","severity":1,"message":"996","line":16,"column":8,"nodeType":"780","messageId":"781","endLine":16,"endColumn":20},{"ruleId":"778","severity":1,"message":"997","line":17,"column":8,"nodeType":"780","messageId":"781","endLine":17,"endColumn":20},{"ruleId":"778","severity":1,"message":"998","line":19,"column":10,"nodeType":"780","messageId":"781","endLine":19,"endColumn":24},{"ruleId":"778","severity":1,"message":"999","line":23,"column":3,"nodeType":"780","messageId":"781","endLine":23,"endColumn":8},{"ruleId":"778","severity":1,"message":"1000","line":27,"column":3,"nodeType":"780","messageId":"781","endLine":27,"endColumn":12},{"ruleId":"778","severity":1,"message":"1001","line":29,"column":3,"nodeType":"780","messageId":"781","endLine":29,"endColumn":8},{"ruleId":"778","severity":1,"message":"1002","line":31,"column":3,"nodeType":"780","messageId":"781","endLine":31,"endColumn":15},{"ruleId":"778","severity":1,"message":"932","line":35,"column":10,"nodeType":"780","messageId":"781","endLine":35,"endColumn":17},{"ruleId":"778","severity":1,"message":"1003","line":37,"column":10,"nodeType":"780","messageId":"781","endLine":37,"endColumn":26},{"ruleId":"778","severity":1,"message":"831","line":39,"column":10,"nodeType":"780","messageId":"781","endLine":39,"endColumn":18},{"ruleId":"778","severity":1,"message":"832","line":40,"column":10,"nodeType":"780","messageId":"781","endLine":40,"endColumn":17},{"ruleId":"778","severity":1,"message":"1004","line":41,"column":10,"nodeType":"780","messageId":"781","endLine":41,"endColumn":16},{"ruleId":"778","severity":1,"message":"1005","line":41,"column":18,"nodeType":"780","messageId":"781","endLine":41,"endColumn":27},{"ruleId":"778","severity":1,"message":"838","line":42,"column":10,"nodeType":"780","messageId":"781","endLine":42,"endColumn":22},{"ruleId":"778","severity":1,"message":"988","line":42,"column":24,"nodeType":"780","messageId":"781","endLine":42,"endColumn":39},{"ruleId":"778","severity":1,"message":"1006","line":43,"column":10,"nodeType":"780","messageId":"781","endLine":43,"endColumn":19},{"ruleId":"778","severity":1,"message":"1007","line":86,"column":9,"nodeType":"780","messageId":"781","endLine":86,"endColumn":22},{"ruleId":"778","severity":1,"message":"806","line":88,"column":11,"nodeType":"780","messageId":"781","endLine":88,"endColumn":20},{"ruleId":"1008","severity":1,"message":"1009","line":256,"column":23,"nodeType":"1010","endLine":256,"endColumn":73},{"ruleId":"1008","severity":1,"message":"1009","line":258,"column":23,"nodeType":"1010","endLine":262,"endColumn":25},{"ruleId":"1008","severity":1,"message":"1009","line":305,"column":23,"nodeType":"1010","endLine":305,"endColumn":73},{"ruleId":"1008","severity":1,"message":"1009","line":307,"column":23,"nodeType":"1010","endLine":311,"endColumn":25},{"ruleId":"1008","severity":1,"message":"1009","line":356,"column":23,"nodeType":"1010","endLine":356,"endColumn":73},{"ruleId":"1008","severity":1,"message":"1009","line":358,"column":23,"nodeType":"1010","endLine":362,"endColumn":25},{"ruleId":"1008","severity":1,"message":"1009","line":407,"column":23,"nodeType":"1010","endLine":407,"endColumn":73},{"ruleId":"1008","severity":1,"message":"1009","line":409,"column":23,"nodeType":"1010","endLine":413,"endColumn":25},{"ruleId":"1008","severity":1,"message":"1009","line":458,"column":23,"nodeType":"1010","endLine":458,"endColumn":73},{"ruleId":"1008","severity":1,"message":"1009","line":460,"column":23,"nodeType":"1010","endLine":464,"endColumn":25},{"ruleId":"778","severity":1,"message":"941","line":116,"column":20,"nodeType":"780","messageId":"781","endLine":116,"endColumn":31},{"ruleId":"778","severity":1,"message":"1011","line":117,"column":23,"nodeType":"780","messageId":"781","endLine":117,"endColumn":37},{"ruleId":"778","severity":1,"message":"902","line":118,"column":19,"nodeType":"780","messageId":"781","endLine":118,"endColumn":29},{"ruleId":"778","severity":1,"message":"980","line":123,"column":10,"nodeType":"780","messageId":"781","endLine":123,"endColumn":21},{"ruleId":"778","severity":1,"message":"943","line":125,"column":9,"nodeType":"780","messageId":"781","endLine":125,"endColumn":15},{"ruleId":"795","severity":1,"message":"796","line":126,"column":51,"nodeType":"797","messageId":"798","endLine":126,"endColumn":53},{"ruleId":"778","severity":1,"message":"813","line":202,"column":15,"nodeType":"780","messageId":"781","endLine":202,"endColumn":23},{"ruleId":"795","severity":1,"message":"796","line":240,"column":25,"nodeType":"797","messageId":"798","endLine":240,"endColumn":27},{"ruleId":"778","severity":1,"message":"782","line":1,"column":27,"nodeType":"780","messageId":"781","endLine":1,"endColumn":36},{"ruleId":"778","severity":1,"message":"779","line":1,"column":38,"nodeType":"780","messageId":"781","endLine":1,"endColumn":49},{"ruleId":"778","severity":1,"message":"970","line":5,"column":10,"nodeType":"780","messageId":"781","endLine":5,"endColumn":14},{"ruleId":"778","severity":1,"message":"950","line":6,"column":10,"nodeType":"780","messageId":"781","endLine":6,"endColumn":14},{"ruleId":"778","severity":1,"message":"951","line":6,"column":16,"nodeType":"780","messageId":"781","endLine":6,"endColumn":24},{"ruleId":"778","severity":1,"message":"847","line":20,"column":17,"nodeType":"780","messageId":"781","endLine":20,"endColumn":27},{"ruleId":"778","severity":1,"message":"1012","line":22,"column":3,"nodeType":"780","messageId":"781","endLine":22,"endColumn":14},{"ruleId":"778","severity":1,"message":"1013","line":27,"column":10,"nodeType":"780","messageId":"781","endLine":27,"endColumn":14},{"ruleId":"778","severity":1,"message":"1014","line":27,"column":16,"nodeType":"780","messageId":"781","endLine":27,"endColumn":24},{"ruleId":"778","severity":1,"message":"1015","line":27,"column":26,"nodeType":"780","messageId":"781","endLine":27,"endColumn":36},{"ruleId":"778","severity":1,"message":"923","line":27,"column":38,"nodeType":"780","messageId":"781","endLine":27,"endColumn":46},{"ruleId":"778","severity":1,"message":"1016","line":55,"column":8,"nodeType":"780","messageId":"781","endLine":55,"endColumn":23},{"ruleId":"778","severity":1,"message":"1017","line":132,"column":10,"nodeType":"780","messageId":"781","endLine":132,"endColumn":18},{"ruleId":"778","severity":1,"message":"941","line":132,"column":20,"nodeType":"780","messageId":"781","endLine":132,"endColumn":31},{"ruleId":"778","severity":1,"message":"1011","line":133,"column":23,"nodeType":"780","messageId":"781","endLine":133,"endColumn":37},{"ruleId":"778","severity":1,"message":"902","line":134,"column":19,"nodeType":"780","messageId":"781","endLine":134,"endColumn":29},{"ruleId":"778","severity":1,"message":"1018","line":136,"column":19,"nodeType":"780","messageId":"781","endLine":136,"endColumn":29},{"ruleId":"778","severity":1,"message":"1019","line":138,"column":10,"nodeType":"780","messageId":"781","endLine":138,"endColumn":22},{"ruleId":"778","severity":1,"message":"1020","line":138,"column":24,"nodeType":"780","messageId":"781","endLine":138,"endColumn":39},{"ruleId":"778","severity":1,"message":"1021","line":139,"column":10,"nodeType":"780","messageId":"781","endLine":139,"endColumn":20},{"ruleId":"778","severity":1,"message":"1022","line":139,"column":22,"nodeType":"780","messageId":"781","endLine":139,"endColumn":35},{"ruleId":"778","severity":1,"message":"1023","line":140,"column":10,"nodeType":"780","messageId":"781","endLine":140,"endColumn":22},{"ruleId":"778","severity":1,"message":"1024","line":140,"column":24,"nodeType":"780","messageId":"781","endLine":140,"endColumn":39},{"ruleId":"778","severity":1,"message":"1025","line":142,"column":10,"nodeType":"780","messageId":"781","endLine":142,"endColumn":14},{"ruleId":"778","severity":1,"message":"1026","line":142,"column":16,"nodeType":"780","messageId":"781","endLine":142,"endColumn":23},{"ruleId":"778","severity":1,"message":"1027","line":143,"column":10,"nodeType":"780","messageId":"781","endLine":143,"endColumn":21},{"ruleId":"778","severity":1,"message":"1028","line":143,"column":23,"nodeType":"780","messageId":"781","endLine":143,"endColumn":37},{"ruleId":"778","severity":1,"message":"918","line":283,"column":9,"nodeType":"780","messageId":"781","endLine":283,"endColumn":17},{"ruleId":"778","severity":1,"message":"813","line":286,"column":15,"nodeType":"780","messageId":"781","endLine":286,"endColumn":23},{"ruleId":"795","severity":1,"message":"796","line":324,"column":25,"nodeType":"797","messageId":"798","endLine":324,"endColumn":27},{"ruleId":"778","severity":1,"message":"1029","line":329,"column":9,"nodeType":"780","messageId":"781","endLine":329,"endColumn":19},{"ruleId":"778","severity":1,"message":"1030","line":337,"column":9,"nodeType":"780","messageId":"781","endLine":337,"endColumn":18},{"ruleId":"778","severity":1,"message":"1031","line":370,"column":9,"nodeType":"780","messageId":"781","endLine":370,"endColumn":21},{"ruleId":"778","severity":1,"message":"782","line":1,"column":27,"nodeType":"780","messageId":"781","endLine":1,"endColumn":36},{"ruleId":"778","severity":1,"message":"779","line":1,"column":38,"nodeType":"780","messageId":"781","endLine":1,"endColumn":49},{"ruleId":"778","severity":1,"message":"970","line":5,"column":10,"nodeType":"780","messageId":"781","endLine":5,"endColumn":14},{"ruleId":"778","severity":1,"message":"950","line":6,"column":10,"nodeType":"780","messageId":"781","endLine":6,"endColumn":14},{"ruleId":"778","severity":1,"message":"951","line":6,"column":16,"nodeType":"780","messageId":"781","endLine":6,"endColumn":24},{"ruleId":"778","severity":1,"message":"847","line":11,"column":17,"nodeType":"780","messageId":"781","endLine":11,"endColumn":27},{"ruleId":"778","severity":1,"message":"1012","line":13,"column":3,"nodeType":"780","messageId":"781","endLine":13,"endColumn":14},{"ruleId":"778","severity":1,"message":"1013","line":18,"column":10,"nodeType":"780","messageId":"781","endLine":18,"endColumn":14},{"ruleId":"778","severity":1,"message":"1014","line":18,"column":16,"nodeType":"780","messageId":"781","endLine":18,"endColumn":24},{"ruleId":"778","severity":1,"message":"1015","line":18,"column":26,"nodeType":"780","messageId":"781","endLine":18,"endColumn":36},{"ruleId":"778","severity":1,"message":"923","line":18,"column":38,"nodeType":"780","messageId":"781","endLine":18,"endColumn":46},{"ruleId":"778","severity":1,"message":"999","line":21,"column":10,"nodeType":"780","messageId":"781","endLine":21,"endColumn":15},{"ruleId":"778","severity":1,"message":"941","line":120,"column":20,"nodeType":"780","messageId":"781","endLine":120,"endColumn":31},{"ruleId":"778","severity":1,"message":"1011","line":121,"column":23,"nodeType":"780","messageId":"781","endLine":121,"endColumn":37},{"ruleId":"778","severity":1,"message":"902","line":122,"column":19,"nodeType":"780","messageId":"781","endLine":122,"endColumn":29},{"ruleId":"778","severity":1,"message":"1019","line":126,"column":10,"nodeType":"780","messageId":"781","endLine":126,"endColumn":22},{"ruleId":"778","severity":1,"message":"1020","line":126,"column":24,"nodeType":"780","messageId":"781","endLine":126,"endColumn":39},{"ruleId":"778","severity":1,"message":"1021","line":127,"column":10,"nodeType":"780","messageId":"781","endLine":127,"endColumn":20},{"ruleId":"778","severity":1,"message":"1022","line":127,"column":22,"nodeType":"780","messageId":"781","endLine":127,"endColumn":35},{"ruleId":"778","severity":1,"message":"1023","line":128,"column":10,"nodeType":"780","messageId":"781","endLine":128,"endColumn":22},{"ruleId":"778","severity":1,"message":"1024","line":128,"column":24,"nodeType":"780","messageId":"781","endLine":128,"endColumn":39},{"ruleId":"778","severity":1,"message":"1025","line":129,"column":10,"nodeType":"780","messageId":"781","endLine":129,"endColumn":14},{"ruleId":"778","severity":1,"message":"1026","line":129,"column":16,"nodeType":"780","messageId":"781","endLine":129,"endColumn":23},{"ruleId":"778","severity":1,"message":"1027","line":130,"column":10,"nodeType":"780","messageId":"781","endLine":130,"endColumn":21},{"ruleId":"778","severity":1,"message":"1028","line":130,"column":23,"nodeType":"780","messageId":"781","endLine":130,"endColumn":37},{"ruleId":"778","severity":1,"message":"943","line":132,"column":9,"nodeType":"780","messageId":"781","endLine":132,"endColumn":15},{"ruleId":"795","severity":1,"message":"796","line":133,"column":51,"nodeType":"797","messageId":"798","endLine":133,"endColumn":53},{"ruleId":"778","severity":1,"message":"813","line":234,"column":15,"nodeType":"780","messageId":"781","endLine":234,"endColumn":23},{"ruleId":"795","severity":1,"message":"796","line":272,"column":25,"nodeType":"797","messageId":"798","endLine":272,"endColumn":27},{"ruleId":"778","severity":1,"message":"1029","line":277,"column":9,"nodeType":"780","messageId":"781","endLine":277,"endColumn":19},{"ruleId":"778","severity":1,"message":"1030","line":285,"column":9,"nodeType":"780","messageId":"781","endLine":285,"endColumn":18},{"ruleId":"778","severity":1,"message":"1031","line":318,"column":9,"nodeType":"780","messageId":"781","endLine":318,"endColumn":21},{"ruleId":"778","severity":1,"message":"1032","line":6,"column":3,"nodeType":"780","messageId":"781","endLine":6,"endColumn":19},{"ruleId":"778","severity":1,"message":"1033","line":11,"column":8,"nodeType":"780","messageId":"781","endLine":11,"endColumn":15},{"ruleId":"778","severity":1,"message":"816","line":12,"column":10,"nodeType":"780","messageId":"781","endLine":12,"endColumn":16},{"ruleId":"778","severity":1,"message":"817","line":14,"column":20,"nodeType":"780","messageId":"781","endLine":14,"endColumn":25},{"ruleId":"778","severity":1,"message":"1034","line":15,"column":8,"nodeType":"780","messageId":"781","endLine":15,"endColumn":24},{"ruleId":"778","severity":1,"message":"1035","line":65,"column":9,"nodeType":"780","messageId":"781","endLine":65,"endColumn":20},{"ruleId":"778","severity":1,"message":"1036","line":68,"column":10,"nodeType":"780","messageId":"781","endLine":68,"endColumn":17},{"ruleId":"795","severity":1,"message":"796","line":101,"column":25,"nodeType":"797","messageId":"798","endLine":101,"endColumn":27},{"ruleId":"795","severity":1,"message":"796","line":132,"column":25,"nodeType":"797","messageId":"798","endLine":132,"endColumn":27},{"ruleId":"778","severity":1,"message":"1037","line":146,"column":9,"nodeType":"780","messageId":"781","endLine":146,"endColumn":21},{"ruleId":"778","severity":1,"message":"815","line":1,"column":38,"nodeType":"780","messageId":"781","endLine":1,"endColumn":44},{"ruleId":"778","severity":1,"message":"816","line":3,"column":3,"nodeType":"780","messageId":"781","endLine":3,"endColumn":9},{"ruleId":"778","severity":1,"message":"819","line":6,"column":3,"nodeType":"780","messageId":"781","endLine":6,"endColumn":12},{"ruleId":"778","severity":1,"message":"821","line":22,"column":10,"nodeType":"780","messageId":"781","endLine":22,"endColumn":17},{"ruleId":"778","severity":1,"message":"970","line":31,"column":10,"nodeType":"780","messageId":"781","endLine":31,"endColumn":14},{"ruleId":"778","severity":1,"message":"822","line":32,"column":8,"nodeType":"780","messageId":"781","endLine":32,"endColumn":14},{"ruleId":"778","severity":1,"message":"823","line":33,"column":10,"nodeType":"780","messageId":"781","endLine":33,"endColumn":18},{"ruleId":"778","severity":1,"message":"824","line":34,"column":10,"nodeType":"780","messageId":"781","endLine":34,"endColumn":15},{"ruleId":"778","severity":1,"message":"825","line":34,"column":17,"nodeType":"780","messageId":"781","endLine":34,"endColumn":27},{"ruleId":"778","severity":1,"message":"826","line":35,"column":8,"nodeType":"780","messageId":"781","endLine":35,"endColumn":24},{"ruleId":"778","severity":1,"message":"827","line":36,"column":8,"nodeType":"780","messageId":"781","endLine":36,"endColumn":18},{"ruleId":"778","severity":1,"message":"828","line":115,"column":10,"nodeType":"780","messageId":"781","endLine":115,"endColumn":21},{"ruleId":"778","severity":1,"message":"829","line":116,"column":10,"nodeType":"780","messageId":"781","endLine":116,"endColumn":21},{"ruleId":"778","severity":1,"message":"830","line":116,"column":23,"nodeType":"780","messageId":"781","endLine":116,"endColumn":37},{"ruleId":"778","severity":1,"message":"831","line":117,"column":10,"nodeType":"780","messageId":"781","endLine":117,"endColumn":18},{"ruleId":"778","severity":1,"message":"832","line":118,"column":10,"nodeType":"780","messageId":"781","endLine":118,"endColumn":17},{"ruleId":"778","severity":1,"message":"833","line":120,"column":10,"nodeType":"780","messageId":"781","endLine":120,"endColumn":26},{"ruleId":"778","severity":1,"message":"834","line":121,"column":10,"nodeType":"780","messageId":"781","endLine":121,"endColumn":23},{"ruleId":"778","severity":1,"message":"835","line":121,"column":25,"nodeType":"780","messageId":"781","endLine":121,"endColumn":41},{"ruleId":"778","severity":1,"message":"1038","line":122,"column":10,"nodeType":"780","messageId":"781","endLine":122,"endColumn":26},{"ruleId":"778","severity":1,"message":"1039","line":122,"column":28,"nodeType":"780","messageId":"781","endLine":122,"endColumn":47},{"ruleId":"778","severity":1,"message":"1040","line":125,"column":10,"nodeType":"780","messageId":"781","endLine":125,"endColumn":31},{"ruleId":"778","severity":1,"message":"838","line":126,"column":10,"nodeType":"780","messageId":"781","endLine":126,"endColumn":22},{"ruleId":"778","severity":1,"message":"806","line":132,"column":11,"nodeType":"780","messageId":"781","endLine":132,"endColumn":20},{"ruleId":"778","severity":1,"message":"839","line":155,"column":15,"nodeType":"780","messageId":"781","endLine":155,"endColumn":36},{"ruleId":"799","severity":1,"message":"840","line":221,"column":6,"nodeType":"801","endLine":221,"endColumn":8,"suggestions":"1041"},{"ruleId":"778","severity":1,"message":"816","line":2,"column":10,"nodeType":"780","messageId":"781","endLine":2,"endColumn":16},{"ruleId":"778","severity":1,"message":"823","line":3,"column":10,"nodeType":"780","messageId":"781","endLine":3,"endColumn":18},{"ruleId":"778","severity":1,"message":"971","line":6,"column":16,"nodeType":"780","messageId":"781","endLine":6,"endColumn":26},{"ruleId":"778","severity":1,"message":"815","line":1,"column":38,"nodeType":"780","messageId":"781","endLine":1,"endColumn":44},{"ruleId":"778","severity":1,"message":"819","line":6,"column":3,"nodeType":"780","messageId":"781","endLine":6,"endColumn":12},{"ruleId":"778","severity":1,"message":"847","line":19,"column":17,"nodeType":"780","messageId":"781","endLine":19,"endColumn":27},{"ruleId":"778","severity":1,"message":"844","line":20,"column":8,"nodeType":"780","messageId":"781","endLine":20,"endColumn":16},{"ruleId":"778","severity":1,"message":"821","line":23,"column":10,"nodeType":"780","messageId":"781","endLine":23,"endColumn":17},{"ruleId":"778","severity":1,"message":"788","line":23,"column":19,"nodeType":"780","messageId":"781","endLine":23,"endColumn":23},{"ruleId":"778","severity":1,"message":"983","line":23,"column":25,"nodeType":"780","messageId":"781","endLine":23,"endColumn":29},{"ruleId":"778","severity":1,"message":"985","line":81,"column":7,"nodeType":"780","messageId":"781","endLine":81,"endColumn":14},{"ruleId":"778","severity":1,"message":"831","line":96,"column":10,"nodeType":"780","messageId":"781","endLine":96,"endColumn":18},{"ruleId":"778","severity":1,"message":"1042","line":102,"column":10,"nodeType":"780","messageId":"781","endLine":102,"endColumn":21},{"ruleId":"778","severity":1,"message":"1043","line":256,"column":19,"nodeType":"780","messageId":"781","endLine":256,"endColumn":31},{"ruleId":"778","severity":1,"message":"1044","line":3,"column":8,"nodeType":"780","messageId":"781","endLine":3,"endColumn":19},{"ruleId":"778","severity":1,"message":"970","line":9,"column":9,"nodeType":"780","messageId":"781","endLine":9,"endColumn":13},{"ruleId":"778","severity":1,"message":"816","line":10,"column":8,"nodeType":"780","messageId":"781","endLine":10,"endColumn":14},{"ruleId":"778","severity":1,"message":"847","line":11,"column":9,"nodeType":"780","messageId":"781","endLine":11,"endColumn":19},{"ruleId":"778","severity":1,"message":"1045","line":108,"column":10,"nodeType":"780","messageId":"781","endLine":108,"endColumn":19},{"ruleId":"778","severity":1,"message":"1046","line":108,"column":21,"nodeType":"780","messageId":"781","endLine":108,"endColumn":33},{"ruleId":"778","severity":1,"message":"901","line":116,"column":9,"nodeType":"780","messageId":"781","endLine":116,"endColumn":19},{"ruleId":"778","severity":1,"message":"932","line":118,"column":10,"nodeType":"780","messageId":"781","endLine":118,"endColumn":17},{"ruleId":"778","severity":1,"message":"902","line":118,"column":19,"nodeType":"780","messageId":"781","endLine":118,"endColumn":29},{"ruleId":"778","severity":1,"message":"789","line":123,"column":10,"nodeType":"780","messageId":"781","endLine":123,"endColumn":15},{"ruleId":"778","severity":1,"message":"790","line":123,"column":17,"nodeType":"780","messageId":"781","endLine":123,"endColumn":25},{"ruleId":"778","severity":1,"message":"903","line":135,"column":11,"nodeType":"780","messageId":"781","endLine":135,"endColumn":23},{"ruleId":"778","severity":1,"message":"904","line":135,"column":25,"nodeType":"780","messageId":"781","endLine":135,"endColumn":32},{"ruleId":"778","severity":1,"message":"933","line":143,"column":10,"nodeType":"780","messageId":"781","endLine":143,"endColumn":32},{"ruleId":"778","severity":1,"message":"1047","line":143,"column":34,"nodeType":"780","messageId":"781","endLine":143,"endColumn":59},{"ruleId":"778","severity":1,"message":"934","line":146,"column":10,"nodeType":"780","messageId":"781","endLine":146,"endColumn":35},{"ruleId":"778","severity":1,"message":"1048","line":146,"column":37,"nodeType":"780","messageId":"781","endLine":146,"endColumn":65},{"ruleId":"778","severity":1,"message":"905","line":149,"column":10,"nodeType":"780","messageId":"781","endLine":149,"endColumn":21},{"ruleId":"778","severity":1,"message":"906","line":149,"column":23,"nodeType":"780","messageId":"781","endLine":149,"endColumn":37},{"ruleId":"778","severity":1,"message":"907","line":153,"column":22,"nodeType":"780","messageId":"781","endLine":153,"endColumn":35},{"ruleId":"873","severity":1,"message":"874","line":191,"column":34,"nodeType":"875","messageId":"876","endLine":191,"endColumn":36},{"ruleId":"799","severity":1,"message":"908","line":203,"column":6,"nodeType":"801","endLine":203,"endColumn":8,"suggestions":"1049"},{"ruleId":"778","severity":1,"message":"910","line":206,"column":5,"nodeType":"780","messageId":"781","endLine":206,"endColumn":19},{"ruleId":"778","severity":1,"message":"911","line":216,"column":9,"nodeType":"780","messageId":"781","endLine":216,"endColumn":21},{"ruleId":"778","severity":1,"message":"918","line":237,"column":9,"nodeType":"780","messageId":"781","endLine":237,"endColumn":17},{"ruleId":"778","severity":1,"message":"919","line":238,"column":9,"nodeType":"780","messageId":"781","endLine":238,"endColumn":17},{"ruleId":"795","severity":1,"message":"796","line":246,"column":65,"nodeType":"797","messageId":"798","endLine":246,"endColumn":67},{"ruleId":"778","severity":1,"message":"920","line":286,"column":9,"nodeType":"780","messageId":"781","endLine":286,"endColumn":16},{"ruleId":"873","severity":1,"message":"874","line":301,"column":49,"nodeType":"875","messageId":"876","endLine":301,"endColumn":51},{"ruleId":"778","severity":1,"message":"1050","line":4,"column":8,"nodeType":"780","messageId":"781","endLine":4,"endColumn":25},{"ruleId":"778","severity":1,"message":"1051","line":11,"column":8,"nodeType":"780","messageId":"781","endLine":11,"endColumn":22},{"ruleId":"778","severity":1,"message":"1052","line":12,"column":8,"nodeType":"780","messageId":"781","endLine":12,"endColumn":20},{"ruleId":"778","severity":1,"message":"1053","line":13,"column":8,"nodeType":"780","messageId":"781","endLine":13,"endColumn":20},{"ruleId":"778","severity":1,"message":"1054","line":14,"column":8,"nodeType":"780","messageId":"781","endLine":14,"endColumn":18},{"ruleId":"778","severity":1,"message":"1055","line":16,"column":9,"nodeType":"780","messageId":"781","endLine":16,"endColumn":14},{"ruleId":"778","severity":1,"message":"1056","line":30,"column":27,"nodeType":"780","messageId":"781","endLine":30,"endColumn":43},{"ruleId":"778","severity":1,"message":"1057","line":36,"column":11,"nodeType":"780","messageId":"781","endLine":36,"endColumn":30},{"ruleId":"778","severity":1,"message":"1058","line":4,"column":8,"nodeType":"780","messageId":"781","endLine":4,"endColumn":19},{"ruleId":"778","severity":1,"message":"975","line":62,"column":9,"nodeType":"780","messageId":"781","endLine":62,"endColumn":20},{"ruleId":"778","severity":1,"message":"1035","line":67,"column":9,"nodeType":"780","messageId":"781","endLine":67,"endColumn":20},{"ruleId":"778","severity":1,"message":"1036","line":71,"column":10,"nodeType":"780","messageId":"781","endLine":71,"endColumn":17},{"ruleId":"799","severity":1,"message":"1059","line":76,"column":6,"nodeType":"801","endLine":76,"endColumn":36,"suggestions":"1060"},{"ruleId":"795","severity":1,"message":"796","line":120,"column":25,"nodeType":"797","messageId":"798","endLine":120,"endColumn":27},{"ruleId":"795","severity":1,"message":"796","line":151,"column":25,"nodeType":"797","messageId":"798","endLine":151,"endColumn":27},{"ruleId":"778","severity":1,"message":"1061","line":164,"column":9,"nodeType":"780","messageId":"781","endLine":164,"endColumn":31},{"ruleId":"778","severity":1,"message":"1037","line":165,"column":9,"nodeType":"780","messageId":"781","endLine":165,"endColumn":21},{"ruleId":"778","severity":1,"message":"1062","line":339,"column":10,"nodeType":"780","messageId":"781","endLine":339,"endColumn":22},{"ruleId":"778","severity":1,"message":"815","line":1,"column":38,"nodeType":"780","messageId":"781","endLine":1,"endColumn":44},{"ruleId":"778","severity":1,"message":"952","line":13,"column":3,"nodeType":"780","messageId":"781","endLine":13,"endColumn":13},{"ruleId":"778","severity":1,"message":"953","line":18,"column":8,"nodeType":"780","messageId":"781","endLine":18,"endColumn":14},{"ruleId":"778","severity":1,"message":"821","line":24,"column":10,"nodeType":"780","messageId":"781","endLine":24,"endColumn":17},{"ruleId":"778","severity":1,"message":"788","line":24,"column":19,"nodeType":"780","messageId":"781","endLine":24,"endColumn":23},{"ruleId":"778","severity":1,"message":"954","line":26,"column":8,"nodeType":"780","messageId":"781","endLine":26,"endColumn":19},{"ruleId":"778","severity":1,"message":"956","line":31,"column":10,"nodeType":"780","messageId":"781","endLine":31,"endColumn":16},{"ruleId":"778","severity":1,"message":"957","line":31,"column":18,"nodeType":"780","messageId":"781","endLine":31,"endColumn":24},{"ruleId":"778","severity":1,"message":"958","line":31,"column":26,"nodeType":"780","messageId":"781","endLine":31,"endColumn":31},{"ruleId":"778","severity":1,"message":"886","line":31,"column":33,"nodeType":"780","messageId":"781","endLine":31,"endColumn":40},{"ruleId":"778","severity":1,"message":"816","line":35,"column":8,"nodeType":"780","messageId":"781","endLine":35,"endColumn":14},{"ruleId":"778","severity":1,"message":"1036","line":99,"column":10,"nodeType":"780","messageId":"781","endLine":99,"endColumn":17},{"ruleId":"778","severity":1,"message":"1063","line":99,"column":19,"nodeType":"780","messageId":"781","endLine":99,"endColumn":29},{"ruleId":"799","severity":1,"message":"1064","line":122,"column":6,"nodeType":"801","endLine":122,"endColumn":8,"suggestions":"1065"},{"ruleId":"778","severity":1,"message":"969","line":136,"column":9,"nodeType":"780","messageId":"781","endLine":136,"endColumn":20},{"ruleId":"795","severity":1,"message":"796","line":168,"column":47,"nodeType":"797","messageId":"798","endLine":168,"endColumn":49},{"ruleId":"778","severity":1,"message":"998","line":3,"column":10,"nodeType":"780","messageId":"781","endLine":3,"endColumn":24},{"ruleId":"778","severity":1,"message":"817","line":6,"column":10,"nodeType":"780","messageId":"781","endLine":6,"endColumn":15},{"ruleId":"778","severity":1,"message":"819","line":6,"column":17,"nodeType":"780","messageId":"781","endLine":6,"endColumn":26},{"ruleId":"778","severity":1,"message":"820","line":6,"column":28,"nodeType":"780","messageId":"781","endLine":6,"endColumn":39},{"ruleId":"778","severity":1,"message":"818","line":6,"column":41,"nodeType":"780","messageId":"781","endLine":6,"endColumn":52},{"ruleId":"778","severity":1,"message":"816","line":7,"column":8,"nodeType":"780","messageId":"781","endLine":7,"endColumn":14},{"ruleId":"778","severity":1,"message":"1055","line":29,"column":10,"nodeType":"780","messageId":"781","endLine":29,"endColumn":15},{"ruleId":"778","severity":1,"message":"1066","line":32,"column":10,"nodeType":"780","messageId":"781","endLine":32,"endColumn":25},{"ruleId":"778","severity":1,"message":"1067","line":32,"column":27,"nodeType":"780","messageId":"781","endLine":32,"endColumn":37},{"ruleId":"778","severity":1,"message":"1068","line":32,"column":39,"nodeType":"780","messageId":"781","endLine":32,"endColumn":47},{"ruleId":"778","severity":1,"message":"1069","line":105,"column":9,"nodeType":"780","messageId":"781","endLine":105,"endColumn":16},{"ruleId":"778","severity":1,"message":"1017","line":106,"column":10,"nodeType":"780","messageId":"781","endLine":106,"endColumn":18},{"ruleId":"778","severity":1,"message":"902","line":108,"column":19,"nodeType":"780","messageId":"781","endLine":108,"endColumn":29},{"ruleId":"778","severity":1,"message":"942","line":109,"column":10,"nodeType":"780","messageId":"781","endLine":109,"endColumn":17},{"ruleId":"778","severity":1,"message":"1018","line":109,"column":19,"nodeType":"780","messageId":"781","endLine":109,"endColumn":29},{"ruleId":"799","severity":1,"message":"1070","line":206,"column":6,"nodeType":"801","endLine":206,"endColumn":8,"suggestions":"1071"},{"ruleId":"795","severity":1,"message":"796","line":232,"column":25,"nodeType":"797","messageId":"798","endLine":232,"endColumn":27},{"ruleId":"778","severity":1,"message":"1031","line":265,"column":9,"nodeType":"780","messageId":"781","endLine":265,"endColumn":21},{"ruleId":"778","severity":1,"message":"998","line":3,"column":10,"nodeType":"780","messageId":"781","endLine":3,"endColumn":24},{"ruleId":"778","severity":1,"message":"817","line":6,"column":10,"nodeType":"780","messageId":"781","endLine":6,"endColumn":15},{"ruleId":"778","severity":1,"message":"819","line":6,"column":17,"nodeType":"780","messageId":"781","endLine":6,"endColumn":26},{"ruleId":"778","severity":1,"message":"820","line":6,"column":28,"nodeType":"780","messageId":"781","endLine":6,"endColumn":39},{"ruleId":"778","severity":1,"message":"818","line":6,"column":41,"nodeType":"780","messageId":"781","endLine":6,"endColumn":52},{"ruleId":"778","severity":1,"message":"816","line":7,"column":8,"nodeType":"780","messageId":"781","endLine":7,"endColumn":14},{"ruleId":"778","severity":1,"message":"1055","line":29,"column":10,"nodeType":"780","messageId":"781","endLine":29,"endColumn":15},{"ruleId":"778","severity":1,"message":"1066","line":31,"column":3,"nodeType":"780","messageId":"781","endLine":31,"endColumn":18},{"ruleId":"778","severity":1,"message":"1067","line":32,"column":3,"nodeType":"780","messageId":"781","endLine":32,"endColumn":13},{"ruleId":"778","severity":1,"message":"1068","line":33,"column":3,"nodeType":"780","messageId":"781","endLine":33,"endColumn":11},{"ruleId":"778","severity":1,"message":"1069","line":108,"column":9,"nodeType":"780","messageId":"781","endLine":108,"endColumn":16},{"ruleId":"778","severity":1,"message":"1017","line":109,"column":10,"nodeType":"780","messageId":"781","endLine":109,"endColumn":18},{"ruleId":"778","severity":1,"message":"902","line":111,"column":19,"nodeType":"780","messageId":"781","endLine":111,"endColumn":29},{"ruleId":"778","severity":1,"message":"942","line":112,"column":10,"nodeType":"780","messageId":"781","endLine":112,"endColumn":17},{"ruleId":"778","severity":1,"message":"1018","line":112,"column":19,"nodeType":"780","messageId":"781","endLine":112,"endColumn":29},{"ruleId":"799","severity":1,"message":"1070","line":205,"column":6,"nodeType":"801","endLine":205,"endColumn":8,"suggestions":"1072"},{"ruleId":"795","severity":1,"message":"796","line":233,"column":25,"nodeType":"797","messageId":"798","endLine":233,"endColumn":27},{"ruleId":"778","severity":1,"message":"1031","line":266,"column":9,"nodeType":"780","messageId":"781","endLine":266,"endColumn":21},{"ruleId":"778","severity":1,"message":"998","line":3,"column":10,"nodeType":"780","messageId":"781","endLine":3,"endColumn":24},{"ruleId":"778","severity":1,"message":"817","line":6,"column":10,"nodeType":"780","messageId":"781","endLine":6,"endColumn":15},{"ruleId":"778","severity":1,"message":"819","line":6,"column":17,"nodeType":"780","messageId":"781","endLine":6,"endColumn":26},{"ruleId":"778","severity":1,"message":"820","line":6,"column":28,"nodeType":"780","messageId":"781","endLine":6,"endColumn":39},{"ruleId":"778","severity":1,"message":"818","line":6,"column":41,"nodeType":"780","messageId":"781","endLine":6,"endColumn":52},{"ruleId":"778","severity":1,"message":"816","line":7,"column":8,"nodeType":"780","messageId":"781","endLine":7,"endColumn":14},{"ruleId":"778","severity":1,"message":"1055","line":29,"column":10,"nodeType":"780","messageId":"781","endLine":29,"endColumn":15},{"ruleId":"778","severity":1,"message":"1066","line":32,"column":10,"nodeType":"780","messageId":"781","endLine":32,"endColumn":25},{"ruleId":"778","severity":1,"message":"1067","line":32,"column":27,"nodeType":"780","messageId":"781","endLine":32,"endColumn":37},{"ruleId":"778","severity":1,"message":"1068","line":32,"column":39,"nodeType":"780","messageId":"781","endLine":32,"endColumn":47},{"ruleId":"778","severity":1,"message":"1069","line":105,"column":9,"nodeType":"780","messageId":"781","endLine":105,"endColumn":16},{"ruleId":"778","severity":1,"message":"1017","line":106,"column":10,"nodeType":"780","messageId":"781","endLine":106,"endColumn":18},{"ruleId":"778","severity":1,"message":"902","line":108,"column":19,"nodeType":"780","messageId":"781","endLine":108,"endColumn":29},{"ruleId":"778","severity":1,"message":"942","line":109,"column":10,"nodeType":"780","messageId":"781","endLine":109,"endColumn":17},{"ruleId":"778","severity":1,"message":"1018","line":109,"column":19,"nodeType":"780","messageId":"781","endLine":109,"endColumn":29},{"ruleId":"799","severity":1,"message":"1070","line":206,"column":6,"nodeType":"801","endLine":206,"endColumn":8,"suggestions":"1073"},{"ruleId":"795","severity":1,"message":"796","line":232,"column":25,"nodeType":"797","messageId":"798","endLine":232,"endColumn":27},{"ruleId":"778","severity":1,"message":"1031","line":265,"column":9,"nodeType":"780","messageId":"781","endLine":265,"endColumn":21},{"ruleId":"778","severity":1,"message":"779","line":1,"column":28,"nodeType":"780","messageId":"781","endLine":1,"endColumn":39},{"ruleId":"778","severity":1,"message":"782","line":1,"column":41,"nodeType":"780","messageId":"781","endLine":1,"endColumn":50},{"ruleId":"778","severity":1,"message":"1068","line":8,"column":38,"nodeType":"780","messageId":"781","endLine":8,"endColumn":46},{"ruleId":"778","severity":1,"message":"941","line":103,"column":22,"nodeType":"780","messageId":"781","endLine":103,"endColumn":33},{"ruleId":"778","severity":1,"message":"1011","line":104,"column":25,"nodeType":"780","messageId":"781","endLine":104,"endColumn":39},{"ruleId":"778","severity":1,"message":"902","line":105,"column":21,"nodeType":"780","messageId":"781","endLine":105,"endColumn":31},{"ruleId":"778","severity":1,"message":"1019","line":109,"column":12,"nodeType":"780","messageId":"781","endLine":109,"endColumn":24},{"ruleId":"778","severity":1,"message":"1020","line":109,"column":25,"nodeType":"780","messageId":"781","endLine":109,"endColumn":40},{"ruleId":"778","severity":1,"message":"1021","line":110,"column":12,"nodeType":"780","messageId":"781","endLine":110,"endColumn":22},{"ruleId":"778","severity":1,"message":"1022","line":110,"column":23,"nodeType":"780","messageId":"781","endLine":110,"endColumn":36},{"ruleId":"778","severity":1,"message":"1023","line":111,"column":12,"nodeType":"780","messageId":"781","endLine":111,"endColumn":24},{"ruleId":"778","severity":1,"message":"1024","line":111,"column":25,"nodeType":"780","messageId":"781","endLine":111,"endColumn":40},{"ruleId":"778","severity":1,"message":"1025","line":112,"column":12,"nodeType":"780","messageId":"781","endLine":112,"endColumn":16},{"ruleId":"778","severity":1,"message":"1026","line":112,"column":18,"nodeType":"780","messageId":"781","endLine":112,"endColumn":25},{"ruleId":"778","severity":1,"message":"1027","line":113,"column":12,"nodeType":"780","messageId":"781","endLine":113,"endColumn":23},{"ruleId":"778","severity":1,"message":"1028","line":113,"column":25,"nodeType":"780","messageId":"781","endLine":113,"endColumn":39},{"ruleId":"778","severity":1,"message":"943","line":115,"column":11,"nodeType":"780","messageId":"781","endLine":115,"endColumn":17},{"ruleId":"795","severity":1,"message":"796","line":116,"column":53,"nodeType":"797","messageId":"798","endLine":116,"endColumn":55},{"ruleId":"913","severity":1,"message":"917","line":153,"column":55,"nodeType":"915","messageId":"916","endLine":153,"endColumn":57},{"ruleId":"913","severity":1,"message":"917","line":153,"column":96,"nodeType":"915","messageId":"916","endLine":153,"endColumn":98},{"ruleId":"913","severity":1,"message":"917","line":164,"column":58,"nodeType":"915","messageId":"916","endLine":164,"endColumn":60},{"ruleId":"913","severity":1,"message":"917","line":164,"column":99,"nodeType":"915","messageId":"916","endLine":164,"endColumn":101},{"ruleId":"795","severity":1,"message":"796","line":196,"column":49,"nodeType":"797","messageId":"798","endLine":196,"endColumn":51},{"ruleId":"778","severity":1,"message":"813","line":222,"column":23,"nodeType":"780","messageId":"781","endLine":222,"endColumn":31},{"ruleId":"778","severity":1,"message":"806","line":237,"column":15,"nodeType":"780","messageId":"781","endLine":237,"endColumn":24},{"ruleId":"795","severity":1,"message":"796","line":251,"column":75,"nodeType":"797","messageId":"798","endLine":251,"endColumn":77},{"ruleId":"778","severity":1,"message":"1029","line":255,"column":11,"nodeType":"780","messageId":"781","endLine":255,"endColumn":21},{"ruleId":"778","severity":1,"message":"1030","line":260,"column":11,"nodeType":"780","messageId":"781","endLine":260,"endColumn":20},{"ruleId":"778","severity":1,"message":"1031","line":288,"column":11,"nodeType":"780","messageId":"781","endLine":288,"endColumn":23},{"ruleId":"778","severity":1,"message":"1058","line":4,"column":8,"nodeType":"780","messageId":"781","endLine":4,"endColumn":19},{"ruleId":"778","severity":1,"message":"975","line":55,"column":9,"nodeType":"780","messageId":"781","endLine":55,"endColumn":20},{"ruleId":"778","severity":1,"message":"1047","line":57,"column":34,"nodeType":"780","messageId":"781","endLine":57,"endColumn":59},{"ruleId":"778","severity":1,"message":"1035","line":58,"column":9,"nodeType":"780","messageId":"781","endLine":58,"endColumn":20},{"ruleId":"778","severity":1,"message":"1036","line":61,"column":10,"nodeType":"780","messageId":"781","endLine":61,"endColumn":17},{"ruleId":"795","severity":1,"message":"796","line":93,"column":25,"nodeType":"797","messageId":"798","endLine":93,"endColumn":27},{"ruleId":"778","severity":1,"message":"806","line":100,"column":11,"nodeType":"780","messageId":"781","endLine":100,"endColumn":20},{"ruleId":"795","severity":1,"message":"796","line":118,"column":25,"nodeType":"797","messageId":"798","endLine":118,"endColumn":27},{"ruleId":"778","severity":1,"message":"1061","line":131,"column":9,"nodeType":"780","messageId":"781","endLine":131,"endColumn":31},{"ruleId":"778","severity":1,"message":"1037","line":132,"column":9,"nodeType":"780","messageId":"781","endLine":132,"endColumn":21},{"ruleId":"778","severity":1,"message":"815","line":1,"column":38,"nodeType":"780","messageId":"781","endLine":1,"endColumn":44},{"ruleId":"778","severity":1,"message":"816","line":2,"column":45,"nodeType":"780","messageId":"781","endLine":2,"endColumn":51},{"ruleId":"778","severity":1,"message":"821","line":11,"column":10,"nodeType":"780","messageId":"781","endLine":11,"endColumn":17},{"ruleId":"778","severity":1,"message":"970","line":20,"column":10,"nodeType":"780","messageId":"781","endLine":20,"endColumn":14},{"ruleId":"778","severity":1,"message":"822","line":21,"column":8,"nodeType":"780","messageId":"781","endLine":21,"endColumn":14},{"ruleId":"778","severity":1,"message":"823","line":22,"column":10,"nodeType":"780","messageId":"781","endLine":22,"endColumn":18},{"ruleId":"778","severity":1,"message":"824","line":23,"column":10,"nodeType":"780","messageId":"781","endLine":23,"endColumn":15},{"ruleId":"778","severity":1,"message":"825","line":23,"column":17,"nodeType":"780","messageId":"781","endLine":23,"endColumn":27},{"ruleId":"778","severity":1,"message":"826","line":24,"column":8,"nodeType":"780","messageId":"781","endLine":24,"endColumn":24},{"ruleId":"778","severity":1,"message":"827","line":25,"column":8,"nodeType":"780","messageId":"781","endLine":25,"endColumn":18},{"ruleId":"778","severity":1,"message":"1074","line":101,"column":5,"nodeType":"780","messageId":"781","endLine":101,"endColumn":13},{"ruleId":"778","severity":1,"message":"828","line":123,"column":10,"nodeType":"780","messageId":"781","endLine":123,"endColumn":21},{"ruleId":"778","severity":1,"message":"829","line":124,"column":10,"nodeType":"780","messageId":"781","endLine":124,"endColumn":21},{"ruleId":"778","severity":1,"message":"830","line":124,"column":23,"nodeType":"780","messageId":"781","endLine":124,"endColumn":37},{"ruleId":"778","severity":1,"message":"831","line":125,"column":10,"nodeType":"780","messageId":"781","endLine":125,"endColumn":18},{"ruleId":"778","severity":1,"message":"832","line":126,"column":10,"nodeType":"780","messageId":"781","endLine":126,"endColumn":17},{"ruleId":"778","severity":1,"message":"833","line":128,"column":10,"nodeType":"780","messageId":"781","endLine":128,"endColumn":26},{"ruleId":"778","severity":1,"message":"836","line":131,"column":10,"nodeType":"780","messageId":"781","endLine":131,"endColumn":29},{"ruleId":"778","severity":1,"message":"837","line":131,"column":31,"nodeType":"780","messageId":"781","endLine":131,"endColumn":53},{"ruleId":"778","severity":1,"message":"964","line":133,"column":10,"nodeType":"780","messageId":"781","endLine":133,"endColumn":25},{"ruleId":"778","severity":1,"message":"1075","line":133,"column":27,"nodeType":"780","messageId":"781","endLine":133,"endColumn":45},{"ruleId":"778","severity":1,"message":"806","line":139,"column":11,"nodeType":"780","messageId":"781","endLine":139,"endColumn":20},{"ruleId":"778","severity":1,"message":"839","line":168,"column":15,"nodeType":"780","messageId":"781","endLine":168,"endColumn":36},{"ruleId":"799","severity":1,"message":"840","line":235,"column":6,"nodeType":"801","endLine":235,"endColumn":8,"suggestions":"1076"},"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'PatientDashboard' is defined but never used.","'DualListBox' is defined but never used.","'PhoneInput' is defined but never used.","'LabelSui' is defined but never used.","'Icon' is defined but never used.","'today' is assigned a value but never used.","'setToday' is assigned a value but never used.","'setDisabledAgeBaseOnAge' is assigned a value but never used.","'topLevelUnitCountryOptions' is assigned a value but never used.","'setPatientDTO' is assigned a value but never used.","'hospitalNumStatus2' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'patientId'. Either include it or remove the dependency array.","ArrayExpression",["1077"],"React Hook useEffect has missing dependencies: 'basicInfo.dateOfRegistration', 'basicInfo.dob', 'loadEducation', 'loadGenders', 'loadMaritalStatus', 'loadOccupation', 'loadRelationships', and 'loadTopLevelCountry'. Either include them or remove the dependency array.",["1078"],"'loadOrganisationUnitsByParentId' is assigned a value but never used.","'dateParts' is assigned a value but never used.","Expected '!==' and instead saw '!='.","valid-typeof","Invalid typeof comparison value.","Literal","invalidValue","'handleEditRelative' is assigned a value but never used.","'response' is assigned a value but never used.","'limit' is assigned a value but never used.","'useRef' is defined but never used.","'Button' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'ModalFooter' is defined but never used.","'Button2' is defined but never used.","'moment' is defined but never used.","'Dropdown' is defined but never used.","'Alert' is defined but never used.","'AlertTitle' is defined but never used.","'fingerprintimage' is defined but never used.","'DeleteIcon' is defined but never used.","'pageLoading' is assigned a value but never used.","'showCapture' is assigned a value but never used.","'setshowCapture' is assigned a value but never used.","'tryAgain' is assigned a value but never used.","'success' is assigned a value but never used.","'storedBiometrics' is assigned a value but never used.","'responseImage' is assigned a value but never used.","'setResponseImage' is assigned a value but never used.","'capturedFingeredObj' is assigned a value but never used.","'setCapturedFingeredObj' is assigned a value but never used.","'imageQuality' is assigned a value but never used.","'personCapturedFingers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear_storelist', 'getPersonBiometrics', and 'getRecaptureCount'. Either include them or remove the dependency array.",["1079"],"'MatButton' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'SaveIcon' is defined but never used.","'AddIcon' is defined but never used.","'CancelIcon' is defined but never used.","'FaUserPlus' is defined but never used.","'disValue' is assigned a value but never used.","'isSubmitting' is assigned a value but never used.","'watchPnumber' is assigned a value but never used.","'watchAltPhonenumber' is assigned a value but never used.","'watchContactPhoneNumber' is assigned a value but never used.","'watchShowAge' is assigned a value but never used.","'setMinDOB' is assigned a value but never used.","'setSaving' is assigned a value but never used.","'genders' is assigned a value but never used.","'setGenders' is assigned a value but never used.","'gender' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'patientId' and 'setValue'. Either include them or remove the dependency array.",["1080"],"'handleAddRelative' is assigned a value but never used.","'handleSaveRelationship' is assigned a value but never used.","'contactEmail' is assigned a value but never used.","'handleCancelSaveRelationship' is assigned a value but never used.","'handleDeleteRelative' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'districtValue'. Either include it or remove the dependency array.",["1081"],"'genderRows' is assigned a value but never used.","'sexRows' is assigned a value but never used.","'maritalStatusRows' is assigned a value but never used.","'educationRows' is assigned a value but never used.","'occupationRows' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'handleCancel' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","putCommentInBraces","'PropTypes' is defined but never used.","'withStyles' is defined but never used.","'ButtonMui' is defined but never used.","'Col' is defined but never used.","'Step' is defined but never used.","'Segment' is defined but never used.","'DataGrid' is defined but never used.","'Box' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Controller' is defined but never used.","'FormControl' is defined but never used.","'Typography' is defined but never used.","'Autocomplete' is defined but never used.","'DateTimePicker' is defined but never used.","'Stack' is defined but never used.","'icon' is assigned a value but never used.","'checkedIcon' is assigned a value but never used.","'appointmentColumns' is assigned a value but never used.","'appointments' is assigned a value but never used.","'userDetail' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'control' is assigned a value but never used.","'checkOutObj' is assigned a value but never used.","'setCheckOutObj' is assigned a value but never used.","'setCheckInObj' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'patientObj.id'. Either include it or remove the dependency array.",["1082"],"'visitTypesRows' is assigned a value but never used.","'onChangeDate' is assigned a value but never used.","'columns' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","'onDelete' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","'onError' is assigned a value but never used.","'useForm' is defined but never used.","'Grid' is defined but never used.","'MenuItem' is defined but never used.","'Paper' is defined but never used.","'TextField' is defined but never used.","'ClientDashboard' is defined but never used.","'PersonDemographics' is defined but never used.","'MaterialTable' is defined but never used.","'Biometrics' is defined but never used.","'ReCaptureBiometric' is defined but never used.","'Swal' is defined but never used.","'loading' is assigned a value but never used.","'patientBiometricStatus' is assigned a value but never used.","'biometricsModuleInstalled' is assigned a value but never used.","'patientVisits' is assigned a value but never used.","'setPatientVisits' is assigned a value but never used.","'checkinStatus' is assigned a value but never used.","'setCheckinStatus' is assigned a value but never used.","'PatientBiometrics' is defined but never used.","'Pims' is defined but never used.","'setPatients' is assigned a value but never used.","'patient' is assigned a value but never used.","'toggle' is assigned a value but never used.","'enablePPIColumns' is assigned a value but never used.","'PatientCard' is defined but never used.",["1083"],"React Hook useEffect has missing dependencies: 'loadPatientVisits' and 'patientObj.id'. Either include them or remove the dependency array.",["1084"],"'Form' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'CardHeader' is defined but never used.","'Select' is defined but never used.","'ThumbUpIcon' is defined but never used.","'red' is defined but never used.","'Dimmer' is defined but never used.","'Loader' is defined but never used.","'Image' is defined but never used.","'CircularProgress' is defined but never used.","'Fab' is defined but never used.","'CheckIcon' is defined but never used.","'UpgradeIcon' is defined but never used.","'prevCapturedFingered' is assigned a value but never used.","'selectedFingers' is assigned a value but never used.","'buttonSx' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear_storelist' and 'getPersonBiometrics'. Either include them or remove the dependency array.",["1085"],"'biometricFingers' is assigned a value but never used.","'checkDevice' is assigned a value but never used.","'Link' is defined but never used.","'useHistory' is defined but never used.","'swal' is defined but never used.","'createdDate' is assigned a value but never used.","'currentDate' is assigned a value but never used.","'permissions' is assigned a value but never used.","'fingerType' is assigned a value but never used.","'setFingerType' is assigned a value but never used.","'submitStatus' is assigned a value but never used.","'setSubmitStatus' is assigned a value but never used.","'currentPage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getRecaptureCount'. Either include it or remove the dependency array.",["1086"],"'List' is defined but never used.","'RestartAltIcon' is defined but never used.","'history' is assigned a value but never used.","'setPageLoading' is assigned a value but never used.","'setStoredBiometrics' is assigned a value but never used.","'setImageQuality' is assigned a value but never used.","'clear_storelist' is assigned a value but never used.","'saveBiometrics' is assigned a value but never used.","'deleteTempBiometrics' is assigned a value but never used.","'getFingerprintsQuality' is assigned a value but never used.","'rightFinger1' is defined but never used.","'rightFinger2' is defined but never used.","'rightFinger3' is defined but never used.","'rightFinger4' is defined but never used.","'rightFinger5' is defined but never used.","'ToastContainer' is defined but never used.","'Label' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'CardSubtitle' is defined but never used.","'biometricDevices' is assigned a value but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'objValues' is assigned a value but never used.","'calculate_age' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setPermissions' is assigned a value but never used.","'MdDashboard' is defined but never used.","'Menu' is defined but never used.","'MenuList' is defined but never used.","'MenuButton' is defined but never used.","'TablePagination' is defined but never used.","'patients' is assigned a value but never used.","'setPatient' is assigned a value but never used.","'searchParams' is assigned a value but never used.","'setSearchParams' is assigned a value but never used.","'totalPages' is assigned a value but never used.","'setTotalPages' is assigned a value but never used.","'totalRecords' is assigned a value but never used.","'setTotalRecords' is assigned a value but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'setRowsPerPage' is assigned a value but never used.","'getAddress' is assigned a value but never used.","'getGender' is assigned a value but never used.","'localization' is assigned a value but never used.","'AccordionActions' is defined but never used.","'Divider' is defined but never used.","'CaptureBiometric' is defined but never used.","'toggleModal' is assigned a value but never used.","'devices' is assigned a value but never used.","'patientObjID' is assigned a value but never used.","'capturedFingered' is assigned a value but never used.","'setCapturedFingered' is assigned a value but never used.","'selectedDeduplication' is assigned a value but never used.",["1087"],"'isNewStatus' is assigned a value but never used.","'templateType' is assigned a value but never used.","'PatientList' is defined but never used.","'enablePPI' is assigned a value but never used.","'setEnablePPI' is assigned a value but never used.","'setPatientBiometricStatus' is assigned a value but never used.","'setBiometricsModuleInstalled' is assigned a value but never used.",["1088"],"'ArrowDropDownIcon' is defined but never used.","'VisibilityIcon' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","'ContentCut' is defined but never used.","'FaEye' is defined but never used.","'setSelectedIndex' is assigned a value but never used.","'handleMenuItemClick' is assigned a value but never used.","'Breadcrumbs' is defined but never used.","React Hook useEffect has a missing dependency: 'BiometricCount'. Either include it or remove the dependency array.",["1089"],"'handleBiometricCapture' is assigned a value but never used.","'numberToWord' is defined but never used.","'setDevices' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'objValues.device'. Either include it or remove the dependency array.",["1090"],"'MdDeleteForever' is defined but never used.","'MdModeEdit' is defined but never used.","'MdPerson' is defined but never used.","'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadPatients'. Either include it or remove the dependency array.",["1091"],["1092"],["1093"],"'checkUrl' is assigned a value but never used.","'setSelectedFingers' is assigned a value but never used.",["1094"],{"desc":"1095","fix":"1096"},{"desc":"1097","fix":"1098"},{"desc":"1099","fix":"1100"},{"desc":"1101","fix":"1102"},{"desc":"1103","fix":"1104"},{"desc":"1105","fix":"1106"},{"desc":"1105","fix":"1107"},{"desc":"1108","fix":"1109"},{"desc":"1110","fix":"1111"},{"desc":"1112","fix":"1113"},{"desc":"1099","fix":"1114"},{"desc":"1105","fix":"1115"},{"desc":"1116","fix":"1117"},{"desc":"1118","fix":"1119"},{"desc":"1120","fix":"1121"},{"desc":"1120","fix":"1122"},{"desc":"1120","fix":"1123"},{"desc":"1099","fix":"1124"},"Update the dependencies array to be: [patientId]",{"range":"1125","text":"1126"},"Update the dependencies array to be: [basicInfo.dateOfRegistration, basicInfo.dob, getPatient, loadEducation, loadGenders, loadMaritalStatus, loadOccupation, loadRelationships, loadTopLevelCountry]",{"range":"1127","text":"1128"},"Update the dependencies array to be: [clear_storelist, getPersonBiometrics, getRecaptureCount]",{"range":"1129","text":"1130"},"Update the dependencies array to be: [patientId, setValue]",{"range":"1131","text":"1132"},"Update the dependencies array to be: [loadSexes, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, getPatient, districtValue]",{"range":"1133","text":"1134"},"Update the dependencies array to be: [patientObj.id]",{"range":"1135","text":"1136"},{"range":"1137","text":"1136"},"Update the dependencies array to be: [loadPatientVisits, patientObj.id]",{"range":"1138","text":"1139"},"Update the dependencies array to be: [clear_storelist, getPersonBiometrics]",{"range":"1140","text":"1141"},"Update the dependencies array to be: [getRecaptureCount]",{"range":"1142","text":"1143"},{"range":"1144","text":"1130"},{"range":"1145","text":"1136"},"Update the dependencies array to be: [BiometricCount, props.patientBiometricStatus]",{"range":"1146","text":"1147"},"Update the dependencies array to be: [objValues.device]",{"range":"1148","text":"1149"},"Update the dependencies array to be: [loadPatients]",{"range":"1150","text":"1151"},{"range":"1152","text":"1151"},{"range":"1153","text":"1151"},{"range":"1154","text":"1130"},[8272,8274],"[patientId]",[8648,8660],"[basicInfo.dateOfRegistration, basicInfo.dob, getPatient, loadEducation, loadGenders, loadMaritalStatus, loadOccupation, loadRelationships, loadTopLevelCountry]",[6786,6788],"[clear_storelist, getPersonBiometrics, getRecaptureCount]",[11310,11312],"[patientId, setValue]",[23196,23342],"[loadSexes, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, getPatient, districtValue]",[8012,8014],"[patientObj.id]",[7686,7688],[7815,7817],"[loadPatientVisits, patientObj.id]",[7554,7556],"[clear_storelist, getPersonBiometrics]",[5202,5204],"[getRecaptureCount]",[6606,6608],[6344,6346],[2109,2139],"[BiometricCount, props.patientBiometricStatus]",[3362,3364],"[objValues.device]",[6901,6903],"[loadPatients]",[6795,6797],[6900,6902],[7102,7104]]